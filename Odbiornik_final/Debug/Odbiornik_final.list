
Odbiornik_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c88  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08002dc4  08002dc4  00012dc4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002e30  08002e30  00012e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002e34  08002e34  00012e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000014c  20000000  08002e38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000780  2000014c  08002f84  0002014c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200008cc  08002f84  000208cc  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
  9 .debug_info   000135ed  00000000  00000000  00020175  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000034f9  00000000  00000000  00033762  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000684a  00000000  00000000  00036c5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000a98  00000000  00000000  0003d4a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000df0  00000000  00000000  0003df40  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000061ee  00000000  00000000  0003ed30  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000039da  00000000  00000000  00044f1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000488f8  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001a70  00000000  00000000  00048974  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000014c 	.word	0x2000014c
 8000158:	00000000 	.word	0x00000000
 800015c:	08002dac 	.word	0x08002dac

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000150 	.word	0x20000150
 8000178:	08002dac 	.word	0x08002dac

0800017c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800017c:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 800017e:	4b0f      	ldr	r3, [pc, #60]	; (80001bc <HAL_InitTick+0x40>)
{
 8000180:	4605      	mov	r5, r0
  if (uwTickFreq != 0U)
 8000182:	6818      	ldr	r0, [r3, #0]
 8000184:	b908      	cbnz	r0, 800018a <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8000186:	2001      	movs	r0, #1
 8000188:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f0 	udiv	r3, r3, r0
 8000192:	4a0b      	ldr	r2, [pc, #44]	; (80001c0 <HAL_InitTick+0x44>)
 8000194:	6810      	ldr	r0, [r2, #0]
 8000196:	fbb0 f0f3 	udiv	r0, r0, r3
 800019a:	f000 f89d 	bl	80002d8 <HAL_SYSTICK_Config>
 800019e:	4604      	mov	r4, r0
 80001a0:	2800      	cmp	r0, #0
 80001a2:	d1f0      	bne.n	8000186 <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a4:	2d0f      	cmp	r5, #15
 80001a6:	d8ee      	bhi.n	8000186 <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001a8:	4602      	mov	r2, r0
 80001aa:	4629      	mov	r1, r5
 80001ac:	f04f 30ff 	mov.w	r0, #4294967295
 80001b0:	f000 f850 	bl	8000254 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80001b4:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <HAL_InitTick+0x48>)
 80001b6:	4620      	mov	r0, r4
 80001b8:	601d      	str	r5, [r3, #0]
  }

  /* Return function status */
  return status;
}
 80001ba:	bd38      	pop	{r3, r4, r5, pc}
 80001bc:	20000000 	.word	0x20000000
 80001c0:	200000f8 	.word	0x200000f8
 80001c4:	20000004 	.word	0x20000004

080001c8 <HAL_Init>:
{
 80001c8:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001ca:	2003      	movs	r0, #3
 80001cc:	f000 f830 	bl	8000230 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80001d0:	2000      	movs	r0, #0
 80001d2:	f7ff ffd3 	bl	800017c <HAL_InitTick>
 80001d6:	4604      	mov	r4, r0
 80001d8:	b918      	cbnz	r0, 80001e2 <HAL_Init+0x1a>
    HAL_MspInit();
 80001da:	f002 fb2f 	bl	800283c <HAL_MspInit>
}
 80001de:	4620      	mov	r0, r4
 80001e0:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80001e2:	2401      	movs	r4, #1
 80001e4:	e7fb      	b.n	80001de <HAL_Init+0x16>
	...

080001e8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x10>)
 80001ea:	4904      	ldr	r1, [pc, #16]	; (80001fc <HAL_IncTick+0x14>)
 80001ec:	6813      	ldr	r3, [r2, #0]
 80001ee:	6809      	ldr	r1, [r1, #0]
 80001f0:	440b      	add	r3, r1
 80001f2:	6013      	str	r3, [r2, #0]
 80001f4:	4770      	bx	lr
 80001f6:	bf00      	nop
 80001f8:	20000180 	.word	0x20000180
 80001fc:	20000000 	.word	0x20000000

08000200 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000200:	4b01      	ldr	r3, [pc, #4]	; (8000208 <HAL_GetTick+0x8>)
 8000202:	6818      	ldr	r0, [r3, #0]
}
 8000204:	4770      	bx	lr
 8000206:	bf00      	nop
 8000208:	20000180 	.word	0x20000180

0800020c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800020c:	b538      	push	{r3, r4, r5, lr}
 800020e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000210:	f7ff fff6 	bl	8000200 <HAL_GetTick>
 8000214:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000216:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000218:	bf1e      	ittt	ne
 800021a:	4b04      	ldrne	r3, [pc, #16]	; (800022c <HAL_Delay+0x20>)
 800021c:	681b      	ldrne	r3, [r3, #0]
 800021e:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000220:	f7ff ffee 	bl	8000200 <HAL_GetTick>
 8000224:	1b40      	subs	r0, r0, r5
 8000226:	4284      	cmp	r4, r0
 8000228:	d8fa      	bhi.n	8000220 <HAL_Delay+0x14>
  {
  }
}
 800022a:	bd38      	pop	{r3, r4, r5, pc}
 800022c:	20000000 	.word	0x20000000

08000230 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000230:	4a07      	ldr	r2, [pc, #28]	; (8000250 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000232:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000234:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000236:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800023a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800023e:	041b      	lsls	r3, r3, #16
 8000240:	0c1b      	lsrs	r3, r3, #16
 8000242:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000246:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800024a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800024c:	60d3      	str	r3, [r2, #12]
 800024e:	4770      	bx	lr
 8000250:	e000ed00 	.word	0xe000ed00

08000254 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000254:	4b17      	ldr	r3, [pc, #92]	; (80002b4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000256:	b530      	push	{r4, r5, lr}
 8000258:	68dc      	ldr	r4, [r3, #12]
 800025a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800025e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000262:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000264:	2b04      	cmp	r3, #4
 8000266:	bf28      	it	cs
 8000268:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800026a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800026c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000270:	bf98      	it	ls
 8000272:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000274:	fa05 f303 	lsl.w	r3, r5, r3
 8000278:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800027c:	bf88      	it	hi
 800027e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000280:	4019      	ands	r1, r3
 8000282:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000284:	fa05 f404 	lsl.w	r4, r5, r4
 8000288:	3c01      	subs	r4, #1
 800028a:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 800028c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800028e:	ea42 0201 	orr.w	r2, r2, r1
 8000292:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000296:	bfa9      	itett	ge
 8000298:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800029c:	4b06      	ldrlt	r3, [pc, #24]	; (80002b8 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800029e:	b2d2      	uxtbge	r2, r2
 80002a0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a4:	bfbb      	ittet	lt
 80002a6:	f000 000f 	andlt.w	r0, r0, #15
 80002aa:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ac:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002b0:	541a      	strblt	r2, [r3, r0]
 80002b2:	bd30      	pop	{r4, r5, pc}
 80002b4:	e000ed00 	.word	0xe000ed00
 80002b8:	e000ed14 	.word	0xe000ed14

080002bc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80002bc:	2800      	cmp	r0, #0
 80002be:	db08      	blt.n	80002d2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002c0:	2301      	movs	r3, #1
 80002c2:	0942      	lsrs	r2, r0, #5
 80002c4:	f000 001f 	and.w	r0, r0, #31
 80002c8:	fa03 f000 	lsl.w	r0, r3, r0
 80002cc:	4b01      	ldr	r3, [pc, #4]	; (80002d4 <HAL_NVIC_EnableIRQ+0x18>)
 80002ce:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80002d2:	4770      	bx	lr
 80002d4:	e000e100 	.word	0xe000e100

080002d8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002d8:	3801      	subs	r0, #1
 80002da:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002de:	d20a      	bcs.n	80002f6 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e0:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002e2:	4b06      	ldr	r3, [pc, #24]	; (80002fc <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e4:	4a06      	ldr	r2, [pc, #24]	; (8000300 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002e6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002ec:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002ee:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002f0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002f2:	601a      	str	r2, [r3, #0]
 80002f4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002f6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002f8:	4770      	bx	lr
 80002fa:	bf00      	nop
 80002fc:	e000e010 	.word	0xe000e010
 8000300:	e000ed00 	.word	0xe000ed00

08000304 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000304:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{
 8000308:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800030a:	2a02      	cmp	r2, #2
 800030c:	d003      	beq.n	8000316 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800030e:	2204      	movs	r2, #4
 8000310:	6382      	str	r2, [r0, #56]	; 0x38

    status = HAL_ERROR;
 8000312:	2001      	movs	r0, #1
 8000314:	bd10      	pop	{r4, pc}
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000316:	6802      	ldr	r2, [r0, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000318:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800031a:	6811      	ldr	r1, [r2, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800031c:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800031e:	f021 010e 	bic.w	r1, r1, #14
 8000322:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8000324:	6811      	ldr	r1, [r2, #0]
 8000326:	f021 0101 	bic.w	r1, r1, #1
 800032a:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800032c:	2101      	movs	r1, #1
 800032e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000330:	f002 021c 	and.w	r2, r2, #28
 8000334:	fa01 f202 	lsl.w	r2, r1, r2
 8000338:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 800033a:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 800033c:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8000340:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8000344:	b113      	cbz	r3, 800034c <HAL_DMA_Abort_IT+0x48>
    {
      hdma->XferAbortCallback(hdma);
 8000346:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000348:	4620      	mov	r0, r4
 800034a:	bd10      	pop	{r4, pc}
 800034c:	4618      	mov	r0, r3
    }
  }
  return status;
}
 800034e:	bd10      	pop	{r4, pc}

08000350 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
  uint32_t position = 0x00;
 8000350:	2300      	movs	r3, #0
{ 
 8000352:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000356:	4a62      	ldr	r2, [pc, #392]	; (80004e0 <HAL_GPIO_Init+0x190>)
  while (((GPIO_Init->Pin) >> position) != 0)
 8000358:	f8d1 8000 	ldr.w	r8, [r1]
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800035c:	f8df 9188 	ldr.w	r9, [pc, #392]	; 80004e8 <HAL_GPIO_Init+0x198>
{ 
 8000360:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0)
 8000362:	fa38 f403 	lsrs.w	r4, r8, r3
 8000366:	d102      	bne.n	800036e <HAL_GPIO_Init+0x1e>
      }
    }
    
    position++;
  } 
}
 8000368:	b005      	add	sp, #20
 800036a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800036e:	2401      	movs	r4, #1
 8000370:	409c      	lsls	r4, r3
    if(iocurrent)
 8000372:	ea18 0604 	ands.w	r6, r8, r4
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000376:	9401      	str	r4, [sp, #4]
    if(iocurrent)
 8000378:	f000 80a7 	beq.w	80004ca <HAL_GPIO_Init+0x17a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 800037c:	684c      	ldr	r4, [r1, #4]
 800037e:	f024 0a10 	bic.w	sl, r4, #16
 8000382:	f1ba 0f02 	cmp.w	sl, #2
 8000386:	d116      	bne.n	80003b6 <HAL_GPIO_Init+0x66>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8000388:	f04f 0e0f 	mov.w	lr, #15
        temp = GPIOx->AFR[position >> 3];
 800038c:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8000390:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8000394:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8000398:	f8dc 5020 	ldr.w	r5, [ip, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 800039c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80003a0:	fa0e fe0b 	lsl.w	lr, lr, fp
 80003a4:	ea25 0e0e 	bic.w	lr, r5, lr
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 80003a8:	690d      	ldr	r5, [r1, #16]
 80003aa:	fa05 f50b 	lsl.w	r5, r5, fp
 80003ae:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3] = temp;
 80003b2:	f8cc 5020 	str.w	r5, [ip, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 80003b6:	2503      	movs	r5, #3
 80003b8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80003bc:	fa05 f50c 	lsl.w	r5, r5, ip
 80003c0:	43ed      	mvns	r5, r5
      temp = GPIOx->MODER;
 80003c2:	f8d0 b000 	ldr.w	fp, [r0]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80003c6:	f004 0e03 	and.w	lr, r4, #3
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 80003ca:	ea0b 0b05 	and.w	fp, fp, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80003ce:	fa0e fe0c 	lsl.w	lr, lr, ip
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003d2:	f10a 3aff 	add.w	sl, sl, #4294967295
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80003d6:	ea4e 0e0b 	orr.w	lr, lr, fp
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003da:	f1ba 0f01 	cmp.w	sl, #1
      GPIOx->MODER = temp;
 80003de:	f8c0 e000 	str.w	lr, [r0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003e2:	d816      	bhi.n	8000412 <HAL_GPIO_Init+0xc2>
        temp = GPIOx->OSPEEDR; 
 80003e4:	f8d0 e008 	ldr.w	lr, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80003e8:	68cf      	ldr	r7, [r1, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80003ea:	ea05 0e0e 	and.w	lr, r5, lr
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80003ee:	fa07 fa0c 	lsl.w	sl, r7, ip
 80003f2:	ea4a 0e0e 	orr.w	lr, sl, lr
        GPIOx->OSPEEDR = temp;
 80003f6:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 80003fa:	f8d0 e004 	ldr.w	lr, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80003fe:	9f01      	ldr	r7, [sp, #4]
 8000400:	ea2e 0707 	bic.w	r7, lr, r7
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000404:	f3c4 1e00 	ubfx	lr, r4, #4, #1
 8000408:	fa0e fe03 	lsl.w	lr, lr, r3
 800040c:	ea4e 0707 	orr.w	r7, lr, r7
        GPIOx->OTYPER = temp;
 8000410:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000412:	68c7      	ldr	r7, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000414:	403d      	ands	r5, r7
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000416:	688f      	ldr	r7, [r1, #8]
 8000418:	fa07 f70c 	lsl.w	r7, r7, ip
 800041c:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 800041e:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000420:	00e5      	lsls	r5, r4, #3
 8000422:	d552      	bpl.n	80004ca <HAL_GPIO_Init+0x17a>
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000424:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000428:	f8d9 5020 	ldr.w	r5, [r9, #32]
 800042c:	f023 0703 	bic.w	r7, r3, #3
 8000430:	f045 0501 	orr.w	r5, r5, #1
 8000434:	f8c9 5020 	str.w	r5, [r9, #32]
 8000438:	f8d9 5020 	ldr.w	r5, [r9, #32]
 800043c:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000440:	f005 0501 	and.w	r5, r5, #1
 8000444:	9503      	str	r5, [sp, #12]
 8000446:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800044a:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800044e:	9d03      	ldr	r5, [sp, #12]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000450:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp = SYSCFG->EXTICR[position >> 2];
 8000454:	68bd      	ldr	r5, [r7, #8]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000456:	fa0e fe0c 	lsl.w	lr, lr, ip
 800045a:	ea25 0e0e 	bic.w	lr, r5, lr
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800045e:	4d21      	ldr	r5, [pc, #132]	; (80004e4 <HAL_GPIO_Init+0x194>)
 8000460:	42a8      	cmp	r0, r5
 8000462:	d034      	beq.n	80004ce <HAL_GPIO_Init+0x17e>
 8000464:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000468:	42a8      	cmp	r0, r5
 800046a:	d032      	beq.n	80004d2 <HAL_GPIO_Init+0x182>
 800046c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000470:	42a8      	cmp	r0, r5
 8000472:	d030      	beq.n	80004d6 <HAL_GPIO_Init+0x186>
 8000474:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000478:	42a8      	cmp	r0, r5
 800047a:	d02e      	beq.n	80004da <HAL_GPIO_Init+0x18a>
 800047c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000480:	42a8      	cmp	r0, r5
 8000482:	bf14      	ite	ne
 8000484:	2505      	movne	r5, #5
 8000486:	2504      	moveq	r5, #4
 8000488:	fa05 f50c 	lsl.w	r5, r5, ip
 800048c:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8000490:	60bd      	str	r5, [r7, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000492:	43f7      	mvns	r7, r6
        temp = EXTI->IMR;
 8000494:	6815      	ldr	r5, [r2, #0]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000496:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800049a:	bf0c      	ite	eq
 800049c:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 800049e:	4335      	orrne	r5, r6
        EXTI->IMR = temp;
 80004a0:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 80004a2:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80004a4:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80004a8:	bf0c      	ite	eq
 80004aa:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 80004ac:	4335      	orrne	r5, r6
        EXTI->EMR = temp;
 80004ae:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 80004b0:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80004b2:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80004b6:	bf0c      	ite	eq
 80004b8:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 80004ba:	4335      	orrne	r5, r6
        EXTI->RTSR = temp;
 80004bc:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 80004be:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80004c0:	02a4      	lsls	r4, r4, #10
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80004c2:	bf54      	ite	pl
 80004c4:	403d      	andpl	r5, r7
          SET_BIT(temp, iocurrent); 
 80004c6:	4335      	orrmi	r5, r6
        EXTI->FTSR = temp;
 80004c8:	60d5      	str	r5, [r2, #12]
    position++;
 80004ca:	3301      	adds	r3, #1
 80004cc:	e749      	b.n	8000362 <HAL_GPIO_Init+0x12>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80004ce:	2500      	movs	r5, #0
 80004d0:	e7da      	b.n	8000488 <HAL_GPIO_Init+0x138>
 80004d2:	2501      	movs	r5, #1
 80004d4:	e7d8      	b.n	8000488 <HAL_GPIO_Init+0x138>
 80004d6:	2502      	movs	r5, #2
 80004d8:	e7d6      	b.n	8000488 <HAL_GPIO_Init+0x138>
 80004da:	2503      	movs	r5, #3
 80004dc:	e7d4      	b.n	8000488 <HAL_GPIO_Init+0x138>
 80004de:	bf00      	nop
 80004e0:	40010400 	.word	0x40010400
 80004e4:	40020000 	.word	0x40020000
 80004e8:	40023800 	.word	0x40023800

080004ec <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80004ec:	b10a      	cbz	r2, 80004f2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80004ee:	6181      	str	r1, [r0, #24]
 80004f0:	4770      	bx	lr
 80004f2:	0409      	lsls	r1, r1, #16
 80004f4:	e7fb      	b.n	80004ee <HAL_GPIO_WritePin+0x2>

080004f6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80004f6:	b570      	push	{r4, r5, r6, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80004f8:	4604      	mov	r4, r0
{
 80004fa:	b086      	sub	sp, #24
  if (hpcd == NULL)
 80004fc:	2800      	cmp	r0, #0
 80004fe:	d051      	beq.n	80005a4 <HAL_PCD_Init+0xae>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000500:	f890 3229 	ldrb.w	r3, [r0, #553]	; 0x229
 8000504:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000508:	b91b      	cbnz	r3, 8000512 <HAL_PCD_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800050a:	f880 2228 	strb.w	r2, [r0, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800050e:	f002 fa69 	bl	80029e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000512:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000514:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000516:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  __HAL_PCD_DISABLE(hpcd);
 800051a:	f001 f8aa 	bl	8001672 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800051e:	2200      	movs	r2, #0
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000520:	2601      	movs	r6, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000522:	4615      	mov	r5, r2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000524:	6860      	ldr	r0, [r4, #4]
 8000526:	b2d3      	uxtb	r3, r2
 8000528:	4298      	cmp	r0, r3
 800052a:	f102 0201 	add.w	r2, r2, #1
 800052e:	d81a      	bhi.n	8000566 <HAL_PCD_Init+0x70>
 8000530:	2200      	movs	r2, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000532:	4611      	mov	r1, r2
 8000534:	b2d3      	uxtb	r3, r2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000536:	4298      	cmp	r0, r3
 8000538:	f102 0201 	add.w	r2, r2, #1
 800053c:	d822      	bhi.n	8000584 <HAL_PCD_Init+0x8e>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800053e:	466d      	mov	r5, sp
 8000540:	f104 0610 	add.w	r6, r4, #16
 8000544:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000546:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000548:	6833      	ldr	r3, [r6, #0]
 800054a:	602b      	str	r3, [r5, #0]
 800054c:	1d23      	adds	r3, r4, #4
 800054e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000550:	6820      	ldr	r0, [r4, #0]
 8000552:	f001 f898 	bl	8001686 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8000556:	2000      	movs	r0, #0
  hpcd->State = HAL_PCD_STATE_READY;
 8000558:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 800055a:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800055e:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  return HAL_OK;
}
 8000562:	b006      	add	sp, #24
 8000564:	bd70      	pop	{r4, r5, r6, pc}
    hpcd->IN_ep[i].is_in = 1U;
 8000566:	eb04 1143 	add.w	r1, r4, r3, lsl #5
    hpcd->IN_ep[i].num = i;
 800056a:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 800056e:	86cb      	strh	r3, [r1, #54]	; 0x36
    hpcd->IN_ep[i].xfer_len = 0U;
 8000570:	3302      	adds	r3, #2
 8000572:	015b      	lsls	r3, r3, #5
    hpcd->IN_ep[i].is_in = 1U;
 8000574:	f881 6029 	strb.w	r6, [r1, #41]	; 0x29
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000578:	f881 502b 	strb.w	r5, [r1, #43]	; 0x2b
    hpcd->IN_ep[i].maxpacket = 0U;
 800057c:	638d      	str	r5, [r1, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 800057e:	63cd      	str	r5, [r1, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 8000580:	50e5      	str	r5, [r4, r3]
 8000582:	e7d0      	b.n	8000526 <HAL_PCD_Init+0x30>
    hpcd->OUT_ep[i].is_in = 0U;
 8000584:	eb04 1543 	add.w	r5, r4, r3, lsl #5
    hpcd->OUT_ep[i].num = i;
 8000588:	f885 3128 	strb.w	r3, [r5, #296]	; 0x128
    hpcd->OUT_ep[i].xfer_len = 0U;
 800058c:	330a      	adds	r3, #10
 800058e:	015b      	lsls	r3, r3, #5
    hpcd->OUT_ep[i].is_in = 0U;
 8000590:	f885 1129 	strb.w	r1, [r5, #297]	; 0x129
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000594:	f885 112b 	strb.w	r1, [r5, #299]	; 0x12b
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000598:	f8c5 1138 	str.w	r1, [r5, #312]	; 0x138
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800059c:	f8c5 113c 	str.w	r1, [r5, #316]	; 0x13c
    hpcd->OUT_ep[i].xfer_len = 0U;
 80005a0:	50e1      	str	r1, [r4, r3]
 80005a2:	e7c7      	b.n	8000534 <HAL_PCD_Init+0x3e>
    return HAL_ERROR;
 80005a4:	2001      	movs	r0, #1
 80005a6:	e7dc      	b.n	8000562 <HAL_PCD_Init+0x6c>

080005a8 <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 80005a8:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
{
 80005ac:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 80005ae:	2b01      	cmp	r3, #1
{
 80005b0:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80005b2:	d00e      	beq.n	80005d2 <HAL_PCD_Start+0x2a>
 80005b4:	2101      	movs	r1, #1
 80005b6:	f880 1228 	strb.w	r1, [r0, #552]	; 0x228

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80005ba:	f000 fb3b 	bl	8000c34 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 80005be:	6820      	ldr	r0, [r4, #0]
 80005c0:	f001 fb38 	bl	8001c34 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80005c4:	6820      	ldr	r0, [r4, #0]
 80005c6:	f001 f84b 	bl	8001660 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80005ca:	2000      	movs	r0, #0
 80005cc:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
 80005d0:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80005d2:	2002      	movs	r0, #2
}
 80005d4:	bd10      	pop	{r4, pc}

080005d6 <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 80005d6:	f890 2228 	ldrb.w	r2, [r0, #552]	; 0x228
{
 80005da:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 80005dc:	2a01      	cmp	r2, #1
{
 80005de:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80005e0:	d00b      	beq.n	80005fa <HAL_PCD_SetAddress+0x24>
 80005e2:	2201      	movs	r2, #1
 80005e4:	f880 2228 	strb.w	r2, [r0, #552]	; 0x228
  hpcd->USB_Address = address;
 80005e8:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80005ec:	6800      	ldr	r0, [r0, #0]
 80005ee:	f001 fb1b 	bl	8001c28 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80005f2:	2000      	movs	r0, #0
 80005f4:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
 80005f8:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80005fa:	2002      	movs	r0, #2
  return HAL_OK;
}
 80005fc:	bd10      	pop	{r4, pc}

080005fe <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80005fe:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000600:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 8000604:	4604      	mov	r4, r0
 8000606:	f001 0007 	and.w	r0, r1, #7
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800060a:	ea4f 1540 	mov.w	r5, r0, lsl #5
  if ((ep_addr & 0x80U) == 0x80U)
 800060e:	d01f      	beq.n	8000650 <HAL_PCD_EP_Open+0x52>
    ep->is_in = 1U;
 8000610:	2601      	movs	r6, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000612:	f105 0128 	add.w	r1, r5, #40	; 0x28
    ep->is_in = 1U;
 8000616:	4425      	add	r5, r4
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000618:	4421      	add	r1, r4
    ep->is_in = 1U;
 800061a:	f885 6029 	strb.w	r6, [r5, #41]	; 0x29
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
  }

  ep->num = ep_addr & EP_ADDR_MSK;
  ep->maxpacket = ep_mps;
 800061e:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;

  if (ep->is_in != 0U)
 8000620:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000622:	b2c0      	uxtb	r0, r0
 8000624:	7008      	strb	r0, [r1, #0]
  ep->type = ep_type;
 8000626:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8000628:	b102      	cbz	r2, 800062c <HAL_PCD_EP_Open+0x2e>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800062a:	81c8      	strh	r0, [r1, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800062c:	2b02      	cmp	r3, #2
  {
    ep->data_pid_start = 0U;
 800062e:	bf04      	itt	eq
 8000630:	2300      	moveq	r3, #0
 8000632:	710b      	strbeq	r3, [r1, #4]
  }

  __HAL_LOCK(hpcd);
 8000634:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 8000638:	2b01      	cmp	r3, #1
 800063a:	d011      	beq.n	8000660 <HAL_PCD_EP_Open+0x62>
 800063c:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800063e:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8000640:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8000644:	f001 f83a 	bl	80016bc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000648:	2000      	movs	r0, #0
 800064a:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228

  return ret;
 800064e:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 8000650:	2600      	movs	r6, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000652:	f505 7194 	add.w	r1, r5, #296	; 0x128
    ep->is_in = 0U;
 8000656:	4425      	add	r5, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000658:	4421      	add	r1, r4
    ep->is_in = 0U;
 800065a:	f885 6129 	strb.w	r6, [r5, #297]	; 0x129
 800065e:	e7de      	b.n	800061e <HAL_PCD_EP_Open+0x20>
  __HAL_LOCK(hpcd);
 8000660:	2002      	movs	r0, #2
}
 8000662:	bd70      	pop	{r4, r5, r6, pc}

08000664 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000664:	f001 0307 	and.w	r3, r1, #7
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000668:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 800066c:	b510      	push	{r4, lr}
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800066e:	ea4f 1243 	mov.w	r2, r3, lsl #5
{
 8000672:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 8000674:	d015      	beq.n	80006a2 <HAL_PCD_EP_Close+0x3e>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000676:	f102 0128 	add.w	r1, r2, #40	; 0x28
 800067a:	4401      	add	r1, r0
    ep->is_in = 1U;
 800067c:	4402      	add	r2, r0
 800067e:	2001      	movs	r0, #1
 8000680:	f882 0029 	strb.w	r0, [r2, #41]	; 0x29
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8000684:	700b      	strb	r3, [r1, #0]

  __HAL_LOCK(hpcd);
 8000686:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 800068a:	2b01      	cmp	r3, #1
 800068c:	d011      	beq.n	80006b2 <HAL_PCD_EP_Close+0x4e>
 800068e:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8000690:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8000692:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8000696:	f001 f97d 	bl	8001994 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800069a:	2000      	movs	r0, #0
 800069c:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
 80006a0:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80006a2:	f502 7194 	add.w	r1, r2, #296	; 0x128
 80006a6:	4401      	add	r1, r0
    ep->is_in = 0U;
 80006a8:	4402      	add	r2, r0
 80006aa:	2000      	movs	r0, #0
 80006ac:	f882 0129 	strb.w	r0, [r2, #297]	; 0x129
 80006b0:	e7e8      	b.n	8000684 <HAL_PCD_EP_Close+0x20>
  __HAL_LOCK(hpcd);
 80006b2:	2002      	movs	r0, #2
}
 80006b4:	bd10      	pop	{r4, pc}

080006b6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80006b6:	b570      	push	{r4, r5, r6, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 80006b8:	2600      	movs	r6, #0
 80006ba:	f001 0107 	and.w	r1, r1, #7
 80006be:	014d      	lsls	r5, r1, #5
  ep->xfer_buff = pBuf;
 80006c0:	1944      	adds	r4, r0, r5
  ep->is_in = 0U;
  ep->num = ep_addr & EP_ADDR_MSK;
 80006c2:	f884 1128 	strb.w	r1, [r4, #296]	; 0x128
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80006c6:	f505 7194 	add.w	r1, r5, #296	; 0x128
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80006ca:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 80006cc:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
  ep->xfer_len = len;
 80006d0:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
  ep->xfer_count = 0U;
 80006d4:	f8c4 6144 	str.w	r6, [r4, #324]	; 0x144
  ep->is_in = 0U;
 80006d8:	f884 6129 	strb.w	r6, [r4, #297]	; 0x129
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80006dc:	6800      	ldr	r0, [r0, #0]
 80006de:	f001 fac5 	bl	8001c6c <USB_EPStartXfer>
  }

  return HAL_OK;
}
 80006e2:	4630      	mov	r0, r6
 80006e4:	bd70      	pop	{r4, r5, r6, pc}

080006e6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80006e6:	f001 0107 	and.w	r1, r1, #7
 80006ea:	b570      	push	{r4, r5, r6, lr}
 80006ec:	014d      	lsls	r5, r1, #5
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80006ee:	1944      	adds	r4, r0, r5
  ep->xfer_len = len;
 80006f0:	6423      	str	r3, [r4, #64]	; 0x40
  ep->xfer_count = 0U;
 80006f2:	2600      	movs	r6, #0
  ep->is_in = 1U;
 80006f4:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 80006f6:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80006fa:	f105 0128 	add.w	r1, r5, #40	; 0x28
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80006fe:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 8000700:	63e2      	str	r2, [r4, #60]	; 0x3c
  ep->xfer_count = 0U;
 8000702:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 8000704:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000708:	6800      	ldr	r0, [r0, #0]
 800070a:	f001 faaf 	bl	8001c6c <USB_EPStartXfer>
  }

  return HAL_OK;
}
 800070e:	4630      	mov	r0, r6
 8000710:	bd70      	pop	{r4, r5, r6, pc}
	...

08000714 <HAL_PCD_IRQHandler>:
{
 8000714:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000718:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800071a:	6800      	ldr	r0, [r0, #0]
 800071c:	f001 fa8c 	bl	8001c38 <USB_ReadInterrupts>
 8000720:	0400      	lsls	r0, r0, #16
 8000722:	f100 81fc 	bmi.w	8000b1e <HAL_PCD_IRQHandler+0x40a>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000726:	6820      	ldr	r0, [r4, #0]
 8000728:	f001 fa86 	bl	8001c38 <USB_ReadInterrupts>
 800072c:	0541      	lsls	r1, r0, #21
 800072e:	d50f      	bpl.n	8000750 <HAL_PCD_IRQHandler+0x3c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000730:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 8000732:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000734:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000738:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800073c:	041b      	lsls	r3, r3, #16
 800073e:	0c1b      	lsrs	r3, r3, #16
 8000740:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8000744:	f002 f985 	bl	8002a52 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000748:	2100      	movs	r1, #0
 800074a:	4620      	mov	r0, r4
 800074c:	f7ff ff43 	bl	80005d6 <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000750:	6820      	ldr	r0, [r4, #0]
 8000752:	f001 fa71 	bl	8001c38 <USB_ReadInterrupts>
 8000756:	0447      	lsls	r7, r0, #17
 8000758:	d508      	bpl.n	800076c <HAL_PCD_IRQHandler+0x58>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800075a:	6822      	ldr	r2, [r4, #0]
 800075c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000760:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000764:	041b      	lsls	r3, r3, #16
 8000766:	0c1b      	lsrs	r3, r3, #16
 8000768:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800076c:	6820      	ldr	r0, [r4, #0]
 800076e:	f001 fa63 	bl	8001c38 <USB_ReadInterrupts>
 8000772:	0486      	lsls	r6, r0, #18
 8000774:	d508      	bpl.n	8000788 <HAL_PCD_IRQHandler+0x74>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000776:	6822      	ldr	r2, [r4, #0]
 8000778:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800077c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000780:	041b      	lsls	r3, r3, #16
 8000782:	0c1b      	lsrs	r3, r3, #16
 8000784:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000788:	6820      	ldr	r0, [r4, #0]
 800078a:	f001 fa55 	bl	8001c38 <USB_ReadInterrupts>
 800078e:	04c5      	lsls	r5, r0, #19
 8000790:	d51c      	bpl.n	80007cc <HAL_PCD_IRQHandler+0xb8>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8000792:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8000794:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8000796:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800079a:	f023 0304 	bic.w	r3, r3, #4
 800079e:	041b      	lsls	r3, r3, #16
 80007a0:	0c1b      	lsrs	r3, r3, #16
 80007a2:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80007a6:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80007aa:	f023 0308 	bic.w	r3, r3, #8
 80007ae:	041b      	lsls	r3, r3, #16
 80007b0:	0c1b      	lsrs	r3, r3, #16
 80007b2:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 80007b6:	f002 f96f 	bl	8002a98 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80007ba:	6822      	ldr	r2, [r4, #0]
 80007bc:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80007c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80007c4:	041b      	lsls	r3, r3, #16
 80007c6:	0c1b      	lsrs	r3, r3, #16
 80007c8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80007cc:	6820      	ldr	r0, [r4, #0]
 80007ce:	f001 fa33 	bl	8001c38 <USB_ReadInterrupts>
 80007d2:	0500      	lsls	r0, r0, #20
 80007d4:	d51d      	bpl.n	8000812 <HAL_PCD_IRQHandler+0xfe>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80007d6:	6820      	ldr	r0, [r4, #0]
 80007d8:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80007dc:	b29b      	uxth	r3, r3
 80007de:	f043 0308 	orr.w	r3, r3, #8
 80007e2:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80007e6:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80007ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80007ee:	041b      	lsls	r3, r3, #16
 80007f0:	0c1b      	lsrs	r3, r3, #16
 80007f2:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 80007f6:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80007fa:	b29b      	uxth	r3, r3
 80007fc:	f043 0304 	orr.w	r3, r3, #4
 8000800:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP) == 0U)
 8000804:	f001 fa18 	bl	8001c38 <USB_ReadInterrupts>
 8000808:	04c1      	lsls	r1, r0, #19
 800080a:	d402      	bmi.n	8000812 <HAL_PCD_IRQHandler+0xfe>
      HAL_PCD_SuspendCallback(hpcd);
 800080c:	4620      	mov	r0, r4
 800080e:	f002 f933 	bl	8002a78 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8000812:	6820      	ldr	r0, [r4, #0]
 8000814:	f001 fa10 	bl	8001c38 <USB_ReadInterrupts>
 8000818:	0582      	lsls	r2, r0, #22
 800081a:	d50b      	bpl.n	8000834 <HAL_PCD_IRQHandler+0x120>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800081c:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 800081e:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000820:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000824:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000828:	041b      	lsls	r3, r3, #16
 800082a:	0c1b      	lsrs	r3, r3, #16
 800082c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8000830:	f002 f90b 	bl	8002a4a <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8000834:	6820      	ldr	r0, [r4, #0]
 8000836:	f001 f9ff 	bl	8001c38 <USB_ReadInterrupts>
 800083a:	05c3      	lsls	r3, r0, #23
 800083c:	d508      	bpl.n	8000850 <HAL_PCD_IRQHandler+0x13c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800083e:	6822      	ldr	r2, [r4, #0]
 8000840:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000844:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000848:	041b      	lsls	r3, r3, #16
 800084a:	0c1b      	lsrs	r3, r3, #16
 800084c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 8000850:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
  {
    wIstr = hpcd->Instance->ISTR;
 8000854:	f8b0 1044 	ldrh.w	r1, [r0, #68]	; 0x44
 8000858:	b289      	uxth	r1, r1
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);

    if (epindex == 0U)
 800085a:	f011 060f 	ands.w	r6, r1, #15
 800085e:	f040 80ac 	bne.w	80009ba <HAL_PCD_IRQHandler+0x2a6>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000862:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8000864:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000868:	b29b      	uxth	r3, r3
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800086a:	d12c      	bne.n	80008c6 <HAL_PCD_IRQHandler+0x1b2>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800086c:	ea03 0309 	and.w	r3, r3, r9
 8000870:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000874:	8003      	strh	r3, [r0, #0]
        ep = &hpcd->IN_ep[0];

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000876:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800087a:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800087e:	b29b      	uxth	r3, r3
 8000880:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000884:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8000888:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 800088c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800088e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000892:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8000894:	4413      	add	r3, r2
 8000896:	63e3      	str	r3, [r4, #60]	; 0x3c

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8000898:	4620      	mov	r0, r4
 800089a:	f002 f8cf 	bl	8002a3c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800089e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80008a2:	b153      	cbz	r3, 80008ba <HAL_PCD_IRQHandler+0x1a6>
 80008a4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80008a6:	b942      	cbnz	r2, 80008ba <HAL_PCD_IRQHandler+0x1a6>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80008a8:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80008ac:	6821      	ldr	r1, [r4, #0]
 80008ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008b2:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80008b6:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80008ba:	6820      	ldr	r0, [r4, #0]
 80008bc:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80008c0:	041b      	lsls	r3, r3, #16
 80008c2:	d4c7      	bmi.n	8000854 <HAL_PCD_IRQHandler+0x140>
 80008c4:	e72f      	b.n	8000726 <HAL_PCD_IRQHandler+0x12>
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80008c6:	051a      	lsls	r2, r3, #20
 80008c8:	d521      	bpl.n	800090e <HAL_PCD_IRQHandler+0x1fa>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80008ca:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80008ce:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
 80008d2:	b29b      	uxth	r3, r3
 80008d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80008d8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80008dc:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup, ep->pmaadress, (uint16_t)ep->xfer_count);
 80008e0:	f8b4 212e 	ldrh.w	r2, [r4, #302]	; 0x12e
 80008e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80008e8:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup, ep->pmaadress, (uint16_t)ep->xfer_count);
 80008ec:	f504 710c 	add.w	r1, r4, #560	; 0x230
 80008f0:	f001 fa8e 	bl	8001e10 <USB_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80008f4:	6822      	ldr	r2, [r4, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80008f6:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80008f8:	8813      	ldrh	r3, [r2, #0]
 80008fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80008fe:	051b      	lsls	r3, r3, #20
 8000900:	0d1b      	lsrs	r3, r3, #20
 8000902:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000906:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8000908:	f002 f88a 	bl	8002a20 <HAL_PCD_SetupStageCallback>
 800090c:	e7d5      	b.n	80008ba <HAL_PCD_IRQHandler+0x1a6>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800090e:	041f      	lsls	r7, r3, #16
 8000910:	d5d3      	bpl.n	80008ba <HAL_PCD_IRQHandler+0x1a6>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000912:	8803      	ldrh	r3, [r0, #0]
 8000914:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000918:	051b      	lsls	r3, r3, #20
 800091a:	0d1b      	lsrs	r3, r3, #20
 800091c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000920:	8003      	strh	r3, [r0, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000922:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000926:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
 800092a:	b29b      	uxth	r3, r3
 800092c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000930:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000934:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8000938:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800093c:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144

          if (ep->xfer_count != 0U)
 8000940:	b163      	cbz	r3, 800095c <HAL_PCD_IRQHandler+0x248>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, (uint16_t)ep->xfer_count);
 8000942:	f8b4 212e 	ldrh.w	r2, [r4, #302]	; 0x12e
 8000946:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 800094a:	f001 fa61 	bl	8001e10 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 800094e:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 8000952:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
 8000956:	4413      	add	r3, r2
 8000958:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c

          /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, 0U);
#else
          HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800095c:	4620      	mov	r0, r4
 800095e:	2100      	movs	r1, #0
 8000960:	f002 f864 	bl	8002a2c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000964:	6820      	ldr	r0, [r4, #0]
 8000966:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 800096a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800096e:	f200 450c 	addw	r5, r0, #1036	; 0x40c
 8000972:	b292      	uxth	r2, r2
 8000974:	b933      	cbnz	r3, 8000984 <HAL_PCD_IRQHandler+0x270>
 8000976:	5aab      	ldrh	r3, [r5, r2]
 8000978:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800097c:	ea43 030a 	orr.w	r3, r3, sl
 8000980:	52ab      	strh	r3, [r5, r2]
 8000982:	e007      	b.n	8000994 <HAL_PCD_IRQHandler+0x280>
 8000984:	2b3d      	cmp	r3, #61	; 0x3d
 8000986:	d814      	bhi.n	80009b2 <HAL_PCD_IRQHandler+0x29e>
 8000988:	0859      	lsrs	r1, r3, #1
 800098a:	07de      	lsls	r6, r3, #31
 800098c:	bf48      	it	mi
 800098e:	3101      	addmi	r1, #1
 8000990:	0289      	lsls	r1, r1, #10
 8000992:	52a9      	strh	r1, [r5, r2]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8000994:	8803      	ldrh	r3, [r0, #0]
 8000996:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800099a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800099e:	041b      	lsls	r3, r3, #16
 80009a0:	0c1b      	lsrs	r3, r3, #16
 80009a2:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80009a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009ae:	8003      	strh	r3, [r0, #0]
 80009b0:	e783      	b.n	80008ba <HAL_PCD_IRQHandler+0x1a6>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80009b2:	095b      	lsrs	r3, r3, #5
 80009b4:	ea4a 2383 	orr.w	r3, sl, r3, lsl #10
 80009b8:	e7e2      	b.n	8000980 <HAL_PCD_IRQHandler+0x26c>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80009ba:	f830 8026 	ldrh.w	r8, [r0, r6, lsl #2]
 80009be:	fa1f f888 	uxth.w	r8, r8
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80009c2:	f418 4f00 	tst.w	r8, #32768	; 0x8000
 80009c6:	d03d      	beq.n	8000a44 <HAL_PCD_IRQHandler+0x330>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80009c8:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
        ep = &hpcd->OUT_ep[epindex];

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 80009cc:	0177      	lsls	r7, r6, #5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80009ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80009d2:	051b      	lsls	r3, r3, #20
 80009d4:	0d1b      	lsrs	r3, r3, #20
 80009d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009da:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 80009de:	19e1      	adds	r1, r4, r7
 80009e0:	f891 3134 	ldrb.w	r3, [r1, #308]	; 0x134
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d158      	bne.n	8000a9a <HAL_PCD_IRQHandler+0x386>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80009e8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80009ec:	f891 2128 	ldrb.w	r2, [r1, #296]	; 0x128
 80009f0:	b29b      	uxth	r3, r3
 80009f2:	3306      	adds	r3, #6
 80009f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80009f8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80009fc:	f8b3 5400 	ldrh.w	r5, [r3, #1024]	; 0x400
 8000a00:	f3c5 0509 	ubfx	r5, r5, #0, #10
          if (count != 0U)
 8000a04:	b135      	cbz	r5, 8000a14 <HAL_PCD_IRQHandler+0x300>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8000a06:	f8b1 212e 	ldrh.w	r2, [r1, #302]	; 0x12e
 8000a0a:	462b      	mov	r3, r5
 8000a0c:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
 8000a10:	f001 f9fe 	bl	8001e10 <USB_ReadPMA>
 8000a14:	19e1      	adds	r1, r4, r7
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8000a16:	f8d1 3144 	ldr.w	r3, [r1, #324]	; 0x144
        ep->xfer_buff += count;
 8000a1a:	f8d1 213c 	ldr.w	r2, [r1, #316]	; 0x13c
        ep->xfer_count += count;
 8000a1e:	442b      	add	r3, r5
 8000a20:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8000a24:	f8d1 3140 	ldr.w	r3, [r1, #320]	; 0x140
        ep->xfer_buff += count;
 8000a28:	442a      	add	r2, r5
 8000a2a:	f8c1 213c 	str.w	r2, [r1, #316]	; 0x13c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8000a2e:	b11b      	cbz	r3, 8000a38 <HAL_PCD_IRQHandler+0x324>
 8000a30:	f8d1 0138 	ldr.w	r0, [r1, #312]	; 0x138
 8000a34:	4285      	cmp	r5, r0
 8000a36:	d269      	bcs.n	8000b0c <HAL_PCD_IRQHandler+0x3f8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8000a38:	4427      	add	r7, r4
 8000a3a:	f897 1128 	ldrb.w	r1, [r7, #296]	; 0x128
 8000a3e:	4620      	mov	r0, r4
 8000a40:	f001 fff4 	bl	8002a2c <HAL_PCD_DataOutStageCallback>
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8000a44:	f018 0f80 	tst.w	r8, #128	; 0x80
 8000a48:	f43f af37 	beq.w	80008ba <HAL_PCD_IRQHandler+0x1a6>
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000a4c:	6821      	ldr	r1, [r4, #0]
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000a4e:	4620      	mov	r0, r4
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000a50:	f831 2026 	ldrh.w	r2, [r1, r6, lsl #2]
 8000a54:	b292      	uxth	r2, r2
 8000a56:	ea02 0209 	and.w	r2, r2, r9
 8000a5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000a5e:	f821 2026 	strh.w	r2, [r1, r6, lsl #2]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000a62:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8000a66:	eb04 1646 	add.w	r6, r4, r6, lsl #5
 8000a6a:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
 8000a6e:	b29b      	uxth	r3, r3
 8000a70:	3302      	adds	r3, #2
 8000a72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000a76:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8000a7a:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	; 0x400
        ep->xfer_buff += ep->xfer_count;
 8000a7e:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000a80:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8000a84:	6472      	str	r2, [r6, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8000a86:	441a      	add	r2, r3
        if (ep->xfer_len == 0U)
 8000a88:	6c33      	ldr	r3, [r6, #64]	; 0x40
        ep->xfer_buff += ep->xfer_count;
 8000a8a:	63f2      	str	r2, [r6, #60]	; 0x3c
 8000a8c:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
        if (ep->xfer_len == 0U)
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d141      	bne.n	8000b18 <HAL_PCD_IRQHandler+0x404>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000a94:	f001 ffd2 	bl	8002a3c <HAL_PCD_DataInStageCallback>
 8000a98:	e70f      	b.n	80008ba <HAL_PCD_IRQHandler+0x1a6>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8000a9a:	f891 3128 	ldrb.w	r3, [r1, #296]	; 0x128
 8000a9e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8000aa2:	00db      	lsls	r3, r3, #3
 8000aa4:	f412 4f80 	tst.w	r2, #16384	; 0x4000
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000aa8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8000aac:	b292      	uxth	r2, r2
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8000aae:	d01f      	beq.n	8000af0 <HAL_PCD_IRQHandler+0x3dc>
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000ab0:	3202      	adds	r2, #2
 8000ab2:	4413      	add	r3, r2
 8000ab4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000ab8:	f8b3 5400 	ldrh.w	r5, [r3, #1024]	; 0x400
 8000abc:	f3c5 0509 	ubfx	r5, r5, #0, #10
            if (count != 0U)
 8000ac0:	b135      	cbz	r5, 8000ad0 <HAL_PCD_IRQHandler+0x3bc>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8000ac2:	462b      	mov	r3, r5
 8000ac4:	f8b1 2130 	ldrh.w	r2, [r1, #304]	; 0x130
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000ac8:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
 8000acc:	f001 f9a0 	bl	8001e10 <USB_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8000ad0:	19e3      	adds	r3, r4, r7
 8000ad2:	f893 1128 	ldrb.w	r1, [r3, #296]	; 0x128
 8000ad6:	6822      	ldr	r2, [r4, #0]
 8000ad8:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8000adc:	b29b      	uxth	r3, r3
 8000ade:	ea03 030b 	and.w	r3, r3, fp
 8000ae2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ae6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000aea:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8000aee:	e791      	b.n	8000a14 <HAL_PCD_IRQHandler+0x300>
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000af0:	3206      	adds	r2, #6
 8000af2:	4413      	add	r3, r2
 8000af4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000af8:	f8b3 5400 	ldrh.w	r5, [r3, #1024]	; 0x400
 8000afc:	f3c5 0509 	ubfx	r5, r5, #0, #10
            if (count != 0U)
 8000b00:	2d00      	cmp	r5, #0
 8000b02:	d0e5      	beq.n	8000ad0 <HAL_PCD_IRQHandler+0x3bc>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000b04:	462b      	mov	r3, r5
 8000b06:	f8b1 2132 	ldrh.w	r2, [r1, #306]	; 0x132
 8000b0a:	e7dd      	b.n	8000ac8 <HAL_PCD_IRQHandler+0x3b4>
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8000b0c:	f891 1128 	ldrb.w	r1, [r1, #296]	; 0x128
 8000b10:	4620      	mov	r0, r4
 8000b12:	f7ff fdd0 	bl	80006b6 <HAL_PCD_EP_Receive>
 8000b16:	e795      	b.n	8000a44 <HAL_PCD_IRQHandler+0x330>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8000b18:	f7ff fde5 	bl	80006e6 <HAL_PCD_EP_Transmit>
 8000b1c:	e6cd      	b.n	80008ba <HAL_PCD_IRQHandler+0x1a6>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000b1e:	f8df 900c 	ldr.w	r9, [pc, #12]	; 8000b2c <HAL_PCD_IRQHandler+0x418>
 8000b22:	f8df a00c 	ldr.w	sl, [pc, #12]	; 8000b30 <HAL_PCD_IRQHandler+0x41c>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8000b26:	f8df b00c 	ldr.w	fp, [pc, #12]	; 8000b34 <HAL_PCD_IRQHandler+0x420>
 8000b2a:	e6c6      	b.n	80008ba <HAL_PCD_IRQHandler+0x1a6>
 8000b2c:	ffff8f0f 	.word	0xffff8f0f
 8000b30:	ffff8000 	.word	0xffff8000
 8000b34:	ffff8f8f 	.word	0xffff8f8f

08000b38 <HAL_PCD_EP_SetStall>:
{
 8000b38:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8000b3a:	6843      	ldr	r3, [r0, #4]
 8000b3c:	f001 0507 	and.w	r5, r1, #7
 8000b40:	429d      	cmp	r5, r3
{
 8000b42:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8000b44:	d828      	bhi.n	8000b98 <HAL_PCD_EP_SetStall+0x60>
  if ((0x80U & ep_addr) == 0x80U)
 8000b46:	060b      	lsls	r3, r1, #24
 8000b48:	d51d      	bpl.n	8000b86 <HAL_PCD_EP_SetStall+0x4e>
    ep->is_in = 1U;
 8000b4a:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000b4c:	016b      	lsls	r3, r5, #5
 8000b4e:	f103 0128 	add.w	r1, r3, #40	; 0x28
    ep->is_in = 1U;
 8000b52:	4403      	add	r3, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000b54:	4401      	add	r1, r0
    ep->is_in = 1U;
 8000b56:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  ep->is_stall = 1U;
 8000b5a:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8000b5c:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8000b5e:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8000b60:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 8000b64:	429a      	cmp	r2, r3
 8000b66:	d019      	beq.n	8000b9c <HAL_PCD_EP_SetStall+0x64>
 8000b68:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8000b6c:	6820      	ldr	r0, [r4, #0]
 8000b6e:	f000 fff0 	bl	8001b52 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000b72:	b925      	cbnz	r5, 8000b7e <HAL_PCD_EP_SetStall+0x46>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8000b74:	f504 710c 	add.w	r1, r4, #560	; 0x230
 8000b78:	6820      	ldr	r0, [r4, #0]
 8000b7a:	f001 f861 	bl	8001c40 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 8000b7e:	2000      	movs	r0, #0
 8000b80:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
 8000b84:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 8000b86:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8000b88:	014b      	lsls	r3, r1, #5
 8000b8a:	f503 7194 	add.w	r1, r3, #296	; 0x128
    ep->is_in = 0U;
 8000b8e:	4403      	add	r3, r0
    ep = &hpcd->OUT_ep[ep_addr];
 8000b90:	4401      	add	r1, r0
    ep->is_in = 0U;
 8000b92:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
 8000b96:	e7e0      	b.n	8000b5a <HAL_PCD_EP_SetStall+0x22>
    return HAL_ERROR;
 8000b98:	2001      	movs	r0, #1
 8000b9a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8000b9c:	2002      	movs	r0, #2
}
 8000b9e:	bd38      	pop	{r3, r4, r5, pc}

08000ba0 <HAL_PCD_EP_ClrStall>:
{
 8000ba0:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8000ba2:	6843      	ldr	r3, [r0, #4]
 8000ba4:	f001 020f 	and.w	r2, r1, #15
 8000ba8:	429a      	cmp	r2, r3
{
 8000baa:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8000bac:	d826      	bhi.n	8000bfc <HAL_PCD_EP_ClrStall+0x5c>
 8000bae:	f001 0307 	and.w	r3, r1, #7
  if ((0x80U & ep_addr) == 0x80U)
 8000bb2:	f011 0f80 	tst.w	r1, #128	; 0x80
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000bb6:	ea4f 1243 	mov.w	r2, r3, lsl #5
  if ((0x80U & ep_addr) == 0x80U)
 8000bba:	d017      	beq.n	8000bec <HAL_PCD_EP_ClrStall+0x4c>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000bbc:	f102 0128 	add.w	r1, r2, #40	; 0x28
 8000bc0:	4401      	add	r1, r0
    ep->is_in = 1U;
 8000bc2:	4402      	add	r2, r0
 8000bc4:	2001      	movs	r0, #1
 8000bc6:	f882 0029 	strb.w	r0, [r2, #41]	; 0x29
  ep->is_stall = 0U;
 8000bca:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8000bcc:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 8000bce:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8000bd0:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	d013      	beq.n	8000c00 <HAL_PCD_EP_ClrStall+0x60>
 8000bd8:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8000bda:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8000bdc:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8000be0:	f000 ffd7 	bl	8001b92 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8000be4:	f884 5228 	strb.w	r5, [r4, #552]	; 0x228
  return HAL_OK;
 8000be8:	4628      	mov	r0, r5
 8000bea:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000bec:	f502 7194 	add.w	r1, r2, #296	; 0x128
 8000bf0:	4401      	add	r1, r0
    ep->is_in = 0U;
 8000bf2:	4402      	add	r2, r0
 8000bf4:	2000      	movs	r0, #0
 8000bf6:	f882 0129 	strb.w	r0, [r2, #297]	; 0x129
 8000bfa:	e7e6      	b.n	8000bca <HAL_PCD_EP_ClrStall+0x2a>
    return HAL_ERROR;
 8000bfc:	2001      	movs	r0, #1
 8000bfe:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8000c00:	2002      	movs	r0, #2
}
 8000c02:	bd38      	pop	{r3, r4, r5, pc}

08000c04 <HAL_PCDEx_PMAConfig>:
                                       uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8000c04:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000c08:	bf1b      	ittet	ne
 8000c0a:	f001 0107 	andne.w	r1, r1, #7
 8000c0e:	eb00 1041 	addne.w	r0, r0, r1, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000c12:	eb00 1041 	addeq.w	r0, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000c16:	3028      	addne	r0, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8000c18:	bf08      	it	eq
 8000c1a:	f500 7094 	addeq.w	r0, r0, #296	; 0x128
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8000c1e:	b91a      	cbnz	r2, 8000c28 <HAL_PCDEx_PMAConfig+0x24>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8000c20:	7302      	strb	r2, [r0, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8000c22:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 8000c24:	2000      	movs	r0, #0
 8000c26:	4770      	bx	lr
    ep->doublebuffer = 1U;
 8000c28:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8000c2a:	8103      	strh	r3, [r0, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8000c2c:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1U;
 8000c2e:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8000c30:	8143      	strh	r3, [r0, #10]
 8000c32:	e7f7      	b.n	8000c24 <HAL_PCDEx_PMAConfig+0x20>

08000c34 <HAL_PCDEx_SetConnectionState>:
 8000c34:	4770      	bx	lr
	...

08000c38 <RCC_SetFlashLatencyFromMSIRange>:
{
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8000c38:	4b1c      	ldr	r3, [pc, #112]	; (8000cac <RCC_SetFlashLatencyFromMSIRange+0x74>)
{
 8000c3a:	b082      	sub	sp, #8
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8000c3c:	689a      	ldr	r2, [r3, #8]
 8000c3e:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 8000c42:	d00c      	beq.n	8000c5e <RCC_SetFlashLatencyFromMSIRange+0x26>
{
 8000c44:	2200      	movs	r2, #0
    {
      latency = FLASH_LATENCY_1; /* 1WS */
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8000c46:	491a      	ldr	r1, [pc, #104]	; (8000cb0 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 8000c48:	680b      	ldr	r3, [r1, #0]
 8000c4a:	f023 0301 	bic.w	r3, r3, #1
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8000c52:	6808      	ldr	r0, [r1, #0]
 8000c54:	f000 0001 	and.w	r0, r0, #1
 8000c58:	4050      	eors	r0, r2
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8000c5a:	b002      	add	sp, #8
 8000c5c:	4770      	bx	lr
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000c5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c60:	4914      	ldr	r1, [pc, #80]	; (8000cb4 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8000c62:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000c66:	d00f      	beq.n	8000c88 <RCC_SetFlashLatencyFromMSIRange+0x50>
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8000c68:	680a      	ldr	r2, [r1, #0]
 8000c6a:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8000c6e:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 8000c72:	d1e7      	bne.n	8000c44 <RCC_SetFlashLatencyFromMSIRange+0xc>
 8000c74:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 8000c78:	d1e4      	bne.n	8000c44 <RCC_SetFlashLatencyFromMSIRange+0xc>
  __HAL_FLASH_SET_LATENCY(latency);
 8000c7a:	4a0d      	ldr	r2, [pc, #52]	; (8000cb0 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 8000c7c:	6813      	ldr	r3, [r2, #0]
 8000c7e:	f043 0304 	orr.w	r3, r3, #4
 8000c82:	6013      	str	r3, [r2, #0]
      latency = FLASH_LATENCY_1; /* 1WS */
 8000c84:	2201      	movs	r2, #1
 8000c86:	e7de      	b.n	8000c46 <RCC_SetFlashLatencyFromMSIRange+0xe>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c8a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000c8e:	625a      	str	r2, [r3, #36]	; 0x24
 8000c90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c92:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000c96:	9201      	str	r2, [sp, #4]
 8000c98:	9a01      	ldr	r2, [sp, #4]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8000c9a:	680a      	ldr	r2, [r1, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c9c:	6a59      	ldr	r1, [r3, #36]	; 0x24
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8000c9e:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ca2:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
 8000ca6:	6259      	str	r1, [r3, #36]	; 0x24
 8000ca8:	e7e1      	b.n	8000c6e <RCC_SetFlashLatencyFromMSIRange+0x36>
 8000caa:	bf00      	nop
 8000cac:	40023800 	.word	0x40023800
 8000cb0:	40023c00 	.word	0x40023c00
 8000cb4:	40007000 	.word	0x40007000

08000cb8 <HAL_RCC_OscConfig>:
{
 8000cb8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8000cbc:	4604      	mov	r4, r0
 8000cbe:	b908      	cbnz	r0, 8000cc4 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000cc0:	2001      	movs	r0, #1
 8000cc2:	e077      	b.n	8000db4 <HAL_RCC_OscConfig+0xfc>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000cc4:	4ba0      	ldr	r3, [pc, #640]	; (8000f48 <HAL_RCC_OscConfig+0x290>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cc6:	6802      	ldr	r2, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000cc8:	689e      	ldr	r6, [r3, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000cca:	689f      	ldr	r7, [r3, #8]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ccc:	07d0      	lsls	r0, r2, #31
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000cce:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000cd2:	f407 3780 	and.w	r7, r7, #65536	; 0x10000
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cd6:	d44b      	bmi.n	8000d70 <HAL_RCC_OscConfig+0xb8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cd8:	6823      	ldr	r3, [r4, #0]
 8000cda:	0799      	lsls	r1, r3, #30
 8000cdc:	f100 8092 	bmi.w	8000e04 <HAL_RCC_OscConfig+0x14c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000ce0:	6823      	ldr	r3, [r4, #0]
 8000ce2:	06d8      	lsls	r0, r3, #27
 8000ce4:	d536      	bpl.n	8000d54 <HAL_RCC_OscConfig+0x9c>
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8000ce6:	2e00      	cmp	r6, #0
 8000ce8:	f040 80dc 	bne.w	8000ea4 <HAL_RCC_OscConfig+0x1ec>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000cec:	4d96      	ldr	r5, [pc, #600]	; (8000f48 <HAL_RCC_OscConfig+0x290>)
 8000cee:	682b      	ldr	r3, [r5, #0]
 8000cf0:	0599      	lsls	r1, r3, #22
 8000cf2:	d502      	bpl.n	8000cfa <HAL_RCC_OscConfig+0x42>
 8000cf4:	69a3      	ldr	r3, [r4, #24]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d0e2      	beq.n	8000cc0 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000cfa:	686b      	ldr	r3, [r5, #4]
 8000cfc:	6a20      	ldr	r0, [r4, #32]
 8000cfe:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000d02:	4298      	cmp	r0, r3
 8000d04:	f240 80bc 	bls.w	8000e80 <HAL_RCC_OscConfig+0x1c8>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d08:	f7ff ff96 	bl	8000c38 <RCC_SetFlashLatencyFromMSIRange>
 8000d0c:	2800      	cmp	r0, #0
 8000d0e:	d1d7      	bne.n	8000cc0 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d10:	686b      	ldr	r3, [r5, #4]
 8000d12:	6a22      	ldr	r2, [r4, #32]
 8000d14:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d1c:	686b      	ldr	r3, [r5, #4]
 8000d1e:	69e2      	ldr	r2, [r4, #28]
 8000d20:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000d24:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000d28:	606b      	str	r3, [r5, #4]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000d2a:	4b87      	ldr	r3, [pc, #540]	; (8000f48 <HAL_RCC_OscConfig+0x290>)
 8000d2c:	6899      	ldr	r1, [r3, #8]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000d2e:	6a23      	ldr	r3, [r4, #32]
 8000d30:	0b5b      	lsrs	r3, r3, #13
 8000d32:	1c5a      	adds	r2, r3, #1
 8000d34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d38:	4093      	lsls	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000d3a:	f3c1 1203 	ubfx	r2, r1, #4, #4
 8000d3e:	4983      	ldr	r1, [pc, #524]	; (8000f4c <HAL_RCC_OscConfig+0x294>)
 8000d40:	5c8a      	ldrb	r2, [r1, r2]
 8000d42:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000d44:	4a82      	ldr	r2, [pc, #520]	; (8000f50 <HAL_RCC_OscConfig+0x298>)
 8000d46:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick(uwTickPrio);
 8000d48:	4b82      	ldr	r3, [pc, #520]	; (8000f54 <HAL_RCC_OscConfig+0x29c>)
 8000d4a:	6818      	ldr	r0, [r3, #0]
 8000d4c:	f7ff fa16 	bl	800017c <HAL_InitTick>
        if(status != HAL_OK)
 8000d50:	2800      	cmp	r0, #0
 8000d52:	d12f      	bne.n	8000db4 <HAL_RCC_OscConfig+0xfc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d54:	6823      	ldr	r3, [r4, #0]
 8000d56:	0718      	lsls	r0, r3, #28
 8000d58:	f100 80d3 	bmi.w	8000f02 <HAL_RCC_OscConfig+0x24a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d5c:	6823      	ldr	r3, [r4, #0]
 8000d5e:	0759      	lsls	r1, r3, #29
 8000d60:	f100 8100 	bmi.w	8000f64 <HAL_RCC_OscConfig+0x2ac>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000d64:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8000d66:	2800      	cmp	r0, #0
 8000d68:	f040 816a 	bne.w	8001040 <HAL_RCC_OscConfig+0x388>
  return HAL_OK;
 8000d6c:	2000      	movs	r0, #0
 8000d6e:	e021      	b.n	8000db4 <HAL_RCC_OscConfig+0xfc>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d70:	2e08      	cmp	r6, #8
 8000d72:	d002      	beq.n	8000d7a <HAL_RCC_OscConfig+0xc2>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000d74:	2e0c      	cmp	r6, #12
 8000d76:	d107      	bne.n	8000d88 <HAL_RCC_OscConfig+0xd0>
 8000d78:	b137      	cbz	r7, 8000d88 <HAL_RCC_OscConfig+0xd0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	039a      	lsls	r2, r3, #14
 8000d7e:	d5ab      	bpl.n	8000cd8 <HAL_RCC_OscConfig+0x20>
 8000d80:	6863      	ldr	r3, [r4, #4]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d1a8      	bne.n	8000cd8 <HAL_RCC_OscConfig+0x20>
 8000d86:	e79b      	b.n	8000cc0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d88:	6863      	ldr	r3, [r4, #4]
 8000d8a:	4d6f      	ldr	r5, [pc, #444]	; (8000f48 <HAL_RCC_OscConfig+0x290>)
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d114      	bne.n	8000dba <HAL_RCC_OscConfig+0x102>
 8000d90:	682b      	ldr	r3, [r5, #0]
 8000d92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d96:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000d98:	f7ff fa32 	bl	8000200 <HAL_GetTick>
 8000d9c:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000d9e:	4d6a      	ldr	r5, [pc, #424]	; (8000f48 <HAL_RCC_OscConfig+0x290>)
 8000da0:	682b      	ldr	r3, [r5, #0]
 8000da2:	039b      	lsls	r3, r3, #14
 8000da4:	d498      	bmi.n	8000cd8 <HAL_RCC_OscConfig+0x20>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000da6:	f7ff fa2b 	bl	8000200 <HAL_GetTick>
 8000daa:	eba0 0008 	sub.w	r0, r0, r8
 8000dae:	2864      	cmp	r0, #100	; 0x64
 8000db0:	d9f6      	bls.n	8000da0 <HAL_RCC_OscConfig+0xe8>
            return HAL_TIMEOUT;
 8000db2:	2003      	movs	r0, #3
}
 8000db4:	b003      	add	sp, #12
 8000db6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dba:	b9ab      	cbnz	r3, 8000de8 <HAL_RCC_OscConfig+0x130>
 8000dbc:	682b      	ldr	r3, [r5, #0]
 8000dbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dc2:	602b      	str	r3, [r5, #0]
 8000dc4:	682b      	ldr	r3, [r5, #0]
 8000dc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dca:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000dcc:	f7ff fa18 	bl	8000200 <HAL_GetTick>
 8000dd0:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000dd2:	682b      	ldr	r3, [r5, #0]
 8000dd4:	0398      	lsls	r0, r3, #14
 8000dd6:	f57f af7f 	bpl.w	8000cd8 <HAL_RCC_OscConfig+0x20>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dda:	f7ff fa11 	bl	8000200 <HAL_GetTick>
 8000dde:	eba0 0008 	sub.w	r0, r0, r8
 8000de2:	2864      	cmp	r0, #100	; 0x64
 8000de4:	d9f5      	bls.n	8000dd2 <HAL_RCC_OscConfig+0x11a>
 8000de6:	e7e4      	b.n	8000db2 <HAL_RCC_OscConfig+0xfa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000de8:	2b05      	cmp	r3, #5
 8000dea:	682b      	ldr	r3, [r5, #0]
 8000dec:	d103      	bne.n	8000df6 <HAL_RCC_OscConfig+0x13e>
 8000dee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000df2:	602b      	str	r3, [r5, #0]
 8000df4:	e7cc      	b.n	8000d90 <HAL_RCC_OscConfig+0xd8>
 8000df6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dfa:	602b      	str	r3, [r5, #0]
 8000dfc:	682b      	ldr	r3, [r5, #0]
 8000dfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e02:	e7c8      	b.n	8000d96 <HAL_RCC_OscConfig+0xde>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e04:	2e04      	cmp	r6, #4
 8000e06:	d002      	beq.n	8000e0e <HAL_RCC_OscConfig+0x156>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000e08:	2e0c      	cmp	r6, #12
 8000e0a:	d110      	bne.n	8000e2e <HAL_RCC_OscConfig+0x176>
 8000e0c:	b97f      	cbnz	r7, 8000e2e <HAL_RCC_OscConfig+0x176>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e0e:	4b4e      	ldr	r3, [pc, #312]	; (8000f48 <HAL_RCC_OscConfig+0x290>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	0791      	lsls	r1, r2, #30
 8000e14:	d503      	bpl.n	8000e1e <HAL_RCC_OscConfig+0x166>
 8000e16:	68e2      	ldr	r2, [r4, #12]
 8000e18:	2a01      	cmp	r2, #1
 8000e1a:	f47f af51 	bne.w	8000cc0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e1e:	685a      	ldr	r2, [r3, #4]
 8000e20:	6921      	ldr	r1, [r4, #16]
 8000e22:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 8000e26:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000e2a:	605a      	str	r2, [r3, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e2c:	e758      	b.n	8000ce0 <HAL_RCC_OscConfig+0x28>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e2e:	68e2      	ldr	r2, [r4, #12]
 8000e30:	4b49      	ldr	r3, [pc, #292]	; (8000f58 <HAL_RCC_OscConfig+0x2a0>)
 8000e32:	b1b2      	cbz	r2, 8000e62 <HAL_RCC_OscConfig+0x1aa>
        __HAL_RCC_HSI_ENABLE();
 8000e34:	2201      	movs	r2, #1
 8000e36:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e38:	f7ff f9e2 	bl	8000200 <HAL_GetTick>
 8000e3c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000e3e:	4d42      	ldr	r5, [pc, #264]	; (8000f48 <HAL_RCC_OscConfig+0x290>)
 8000e40:	682b      	ldr	r3, [r5, #0]
 8000e42:	079a      	lsls	r2, r3, #30
 8000e44:	d507      	bpl.n	8000e56 <HAL_RCC_OscConfig+0x19e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e46:	686b      	ldr	r3, [r5, #4]
 8000e48:	6922      	ldr	r2, [r4, #16]
 8000e4a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8000e4e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000e52:	606b      	str	r3, [r5, #4]
 8000e54:	e744      	b.n	8000ce0 <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e56:	f7ff f9d3 	bl	8000200 <HAL_GetTick>
 8000e5a:	1bc0      	subs	r0, r0, r7
 8000e5c:	2802      	cmp	r0, #2
 8000e5e:	d9ef      	bls.n	8000e40 <HAL_RCC_OscConfig+0x188>
 8000e60:	e7a7      	b.n	8000db2 <HAL_RCC_OscConfig+0xfa>
        __HAL_RCC_HSI_DISABLE();
 8000e62:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e64:	f7ff f9cc 	bl	8000200 <HAL_GetTick>
 8000e68:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000e6a:	4d37      	ldr	r5, [pc, #220]	; (8000f48 <HAL_RCC_OscConfig+0x290>)
 8000e6c:	682b      	ldr	r3, [r5, #0]
 8000e6e:	079b      	lsls	r3, r3, #30
 8000e70:	f57f af36 	bpl.w	8000ce0 <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e74:	f7ff f9c4 	bl	8000200 <HAL_GetTick>
 8000e78:	1bc0      	subs	r0, r0, r7
 8000e7a:	2802      	cmp	r0, #2
 8000e7c:	d9f6      	bls.n	8000e6c <HAL_RCC_OscConfig+0x1b4>
 8000e7e:	e798      	b.n	8000db2 <HAL_RCC_OscConfig+0xfa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e80:	686b      	ldr	r3, [r5, #4]
 8000e82:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000e86:	4303      	orrs	r3, r0
 8000e88:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e8a:	686b      	ldr	r3, [r5, #4]
 8000e8c:	69e2      	ldr	r2, [r4, #28]
 8000e8e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000e92:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000e96:	606b      	str	r3, [r5, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e98:	f7ff fece 	bl	8000c38 <RCC_SetFlashLatencyFromMSIRange>
 8000e9c:	2800      	cmp	r0, #0
 8000e9e:	f43f af44 	beq.w	8000d2a <HAL_RCC_OscConfig+0x72>
 8000ea2:	e70d      	b.n	8000cc0 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000ea4:	69a2      	ldr	r2, [r4, #24]
 8000ea6:	4b2d      	ldr	r3, [pc, #180]	; (8000f5c <HAL_RCC_OscConfig+0x2a4>)
 8000ea8:	b1e2      	cbz	r2, 8000ee4 <HAL_RCC_OscConfig+0x22c>
        __HAL_RCC_MSI_ENABLE();
 8000eaa:	2201      	movs	r2, #1
 8000eac:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000eae:	f7ff f9a7 	bl	8000200 <HAL_GetTick>
 8000eb2:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000eb4:	4d24      	ldr	r5, [pc, #144]	; (8000f48 <HAL_RCC_OscConfig+0x290>)
 8000eb6:	682b      	ldr	r3, [r5, #0]
 8000eb8:	059a      	lsls	r2, r3, #22
 8000eba:	d50d      	bpl.n	8000ed8 <HAL_RCC_OscConfig+0x220>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ebc:	686b      	ldr	r3, [r5, #4]
 8000ebe:	6a22      	ldr	r2, [r4, #32]
 8000ec0:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	606b      	str	r3, [r5, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ec8:	686b      	ldr	r3, [r5, #4]
 8000eca:	69e2      	ldr	r2, [r4, #28]
 8000ecc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000ed0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000ed4:	606b      	str	r3, [r5, #4]
 8000ed6:	e73d      	b.n	8000d54 <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ed8:	f7ff f992 	bl	8000200 <HAL_GetTick>
 8000edc:	1bc0      	subs	r0, r0, r7
 8000ede:	2802      	cmp	r0, #2
 8000ee0:	d9e9      	bls.n	8000eb6 <HAL_RCC_OscConfig+0x1fe>
 8000ee2:	e766      	b.n	8000db2 <HAL_RCC_OscConfig+0xfa>
        __HAL_RCC_MSI_DISABLE();
 8000ee4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000ee6:	f7ff f98b 	bl	8000200 <HAL_GetTick>
 8000eea:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000eec:	4d16      	ldr	r5, [pc, #88]	; (8000f48 <HAL_RCC_OscConfig+0x290>)
 8000eee:	682b      	ldr	r3, [r5, #0]
 8000ef0:	059b      	lsls	r3, r3, #22
 8000ef2:	f57f af2f 	bpl.w	8000d54 <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ef6:	f7ff f983 	bl	8000200 <HAL_GetTick>
 8000efa:	1bc0      	subs	r0, r0, r7
 8000efc:	2802      	cmp	r0, #2
 8000efe:	d9f6      	bls.n	8000eee <HAL_RCC_OscConfig+0x236>
 8000f00:	e757      	b.n	8000db2 <HAL_RCC_OscConfig+0xfa>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f02:	6962      	ldr	r2, [r4, #20]
 8000f04:	4b16      	ldr	r3, [pc, #88]	; (8000f60 <HAL_RCC_OscConfig+0x2a8>)
 8000f06:	b17a      	cbz	r2, 8000f28 <HAL_RCC_OscConfig+0x270>
      __HAL_RCC_LSI_ENABLE();
 8000f08:	2201      	movs	r2, #1
 8000f0a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000f0c:	f7ff f978 	bl	8000200 <HAL_GetTick>
 8000f10:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000f12:	4d0d      	ldr	r5, [pc, #52]	; (8000f48 <HAL_RCC_OscConfig+0x290>)
 8000f14:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000f16:	079a      	lsls	r2, r3, #30
 8000f18:	f53f af20 	bmi.w	8000d5c <HAL_RCC_OscConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f1c:	f7ff f970 	bl	8000200 <HAL_GetTick>
 8000f20:	1bc0      	subs	r0, r0, r7
 8000f22:	2802      	cmp	r0, #2
 8000f24:	d9f6      	bls.n	8000f14 <HAL_RCC_OscConfig+0x25c>
 8000f26:	e744      	b.n	8000db2 <HAL_RCC_OscConfig+0xfa>
      __HAL_RCC_LSI_DISABLE();
 8000f28:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000f2a:	f7ff f969 	bl	8000200 <HAL_GetTick>
 8000f2e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000f30:	4d05      	ldr	r5, [pc, #20]	; (8000f48 <HAL_RCC_OscConfig+0x290>)
 8000f32:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000f34:	079b      	lsls	r3, r3, #30
 8000f36:	f57f af11 	bpl.w	8000d5c <HAL_RCC_OscConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f3a:	f7ff f961 	bl	8000200 <HAL_GetTick>
 8000f3e:	1bc0      	subs	r0, r0, r7
 8000f40:	2802      	cmp	r0, #2
 8000f42:	d9f6      	bls.n	8000f32 <HAL_RCC_OscConfig+0x27a>
 8000f44:	e735      	b.n	8000db2 <HAL_RCC_OscConfig+0xfa>
 8000f46:	bf00      	nop
 8000f48:	40023800 	.word	0x40023800
 8000f4c:	08002dc4 	.word	0x08002dc4
 8000f50:	200000f8 	.word	0x200000f8
 8000f54:	20000004 	.word	0x20000004
 8000f58:	42470000 	.word	0x42470000
 8000f5c:	42470020 	.word	0x42470020
 8000f60:	42470680 	.word	0x42470680
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f64:	4b60      	ldr	r3, [pc, #384]	; (80010e8 <HAL_RCC_OscConfig+0x430>)
 8000f66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f68:	00d0      	lsls	r0, r2, #3
 8000f6a:	d429      	bmi.n	8000fc0 <HAL_RCC_OscConfig+0x308>
      pwrclkchanged = SET;
 8000f6c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f70:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000f74:	625a      	str	r2, [r3, #36]	; 0x24
 8000f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f7c:	9301      	str	r3, [sp, #4]
 8000f7e:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f80:	4d5a      	ldr	r5, [pc, #360]	; (80010ec <HAL_RCC_OscConfig+0x434>)
 8000f82:	682b      	ldr	r3, [r5, #0]
 8000f84:	05d9      	lsls	r1, r3, #23
 8000f86:	d51d      	bpl.n	8000fc4 <HAL_RCC_OscConfig+0x30c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f88:	68a3      	ldr	r3, [r4, #8]
 8000f8a:	4d57      	ldr	r5, [pc, #348]	; (80010e8 <HAL_RCC_OscConfig+0x430>)
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d12a      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x32e>
 8000f90:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000f92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f96:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000f98:	f7ff f932 	bl	8000200 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f9c:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000fa0:	4681      	mov	r9, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000fa2:	f8df 8144 	ldr.w	r8, [pc, #324]	; 80010e8 <HAL_RCC_OscConfig+0x430>
 8000fa6:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 8000faa:	059b      	lsls	r3, r3, #22
 8000fac:	d541      	bpl.n	8001032 <HAL_RCC_OscConfig+0x37a>
    if(pwrclkchanged == SET)
 8000fae:	2f00      	cmp	r7, #0
 8000fb0:	f43f aed8 	beq.w	8000d64 <HAL_RCC_OscConfig+0xac>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fb4:	4a4c      	ldr	r2, [pc, #304]	; (80010e8 <HAL_RCC_OscConfig+0x430>)
 8000fb6:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000fb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fbc:	6253      	str	r3, [r2, #36]	; 0x24
 8000fbe:	e6d1      	b.n	8000d64 <HAL_RCC_OscConfig+0xac>
    FlagStatus       pwrclkchanged = RESET;
 8000fc0:	2700      	movs	r7, #0
 8000fc2:	e7dd      	b.n	8000f80 <HAL_RCC_OscConfig+0x2c8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fc4:	682b      	ldr	r3, [r5, #0]
 8000fc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fca:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000fcc:	f7ff f918 	bl	8000200 <HAL_GetTick>
 8000fd0:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fd2:	682b      	ldr	r3, [r5, #0]
 8000fd4:	05da      	lsls	r2, r3, #23
 8000fd6:	d4d7      	bmi.n	8000f88 <HAL_RCC_OscConfig+0x2d0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fd8:	f7ff f912 	bl	8000200 <HAL_GetTick>
 8000fdc:	eba0 0008 	sub.w	r0, r0, r8
 8000fe0:	2864      	cmp	r0, #100	; 0x64
 8000fe2:	d9f6      	bls.n	8000fd2 <HAL_RCC_OscConfig+0x31a>
 8000fe4:	e6e5      	b.n	8000db2 <HAL_RCC_OscConfig+0xfa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fe6:	b9b3      	cbnz	r3, 8001016 <HAL_RCC_OscConfig+0x35e>
 8000fe8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fea:	f241 3988 	movw	r9, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ff2:	636b      	str	r3, [r5, #52]	; 0x34
 8000ff4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000ff6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000ffa:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000ffc:	f7ff f900 	bl	8000200 <HAL_GetTick>
 8001000:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001002:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001004:	0598      	lsls	r0, r3, #22
 8001006:	d5d2      	bpl.n	8000fae <HAL_RCC_OscConfig+0x2f6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001008:	f7ff f8fa 	bl	8000200 <HAL_GetTick>
 800100c:	eba0 0008 	sub.w	r0, r0, r8
 8001010:	4548      	cmp	r0, r9
 8001012:	d9f6      	bls.n	8001002 <HAL_RCC_OscConfig+0x34a>
 8001014:	e6cd      	b.n	8000db2 <HAL_RCC_OscConfig+0xfa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001016:	2b05      	cmp	r3, #5
 8001018:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800101a:	d103      	bne.n	8001024 <HAL_RCC_OscConfig+0x36c>
 800101c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001020:	636b      	str	r3, [r5, #52]	; 0x34
 8001022:	e7b5      	b.n	8000f90 <HAL_RCC_OscConfig+0x2d8>
 8001024:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001028:	636b      	str	r3, [r5, #52]	; 0x34
 800102a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800102c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001030:	e7b1      	b.n	8000f96 <HAL_RCC_OscConfig+0x2de>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001032:	f7ff f8e5 	bl	8000200 <HAL_GetTick>
 8001036:	eba0 0009 	sub.w	r0, r0, r9
 800103a:	42a8      	cmp	r0, r5
 800103c:	d9b3      	bls.n	8000fa6 <HAL_RCC_OscConfig+0x2ee>
 800103e:	e6b8      	b.n	8000db2 <HAL_RCC_OscConfig+0xfa>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001040:	2e0c      	cmp	r6, #12
 8001042:	d039      	beq.n	80010b8 <HAL_RCC_OscConfig+0x400>
 8001044:	2300      	movs	r3, #0
 8001046:	4d2a      	ldr	r5, [pc, #168]	; (80010f0 <HAL_RCC_OscConfig+0x438>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001048:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800104a:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800104c:	d126      	bne.n	800109c <HAL_RCC_OscConfig+0x3e4>
        tickstart = HAL_GetTick();
 800104e:	f7ff f8d7 	bl	8000200 <HAL_GetTick>
 8001052:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001054:	4e24      	ldr	r6, [pc, #144]	; (80010e8 <HAL_RCC_OscConfig+0x430>)
 8001056:	6833      	ldr	r3, [r6, #0]
 8001058:	0199      	lsls	r1, r3, #6
 800105a:	d419      	bmi.n	8001090 <HAL_RCC_OscConfig+0x3d8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800105c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800105e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001060:	68b2      	ldr	r2, [r6, #8]
 8001062:	430b      	orrs	r3, r1
 8001064:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 8001068:	4313      	orrs	r3, r2
 800106a:	6b22      	ldr	r2, [r4, #48]	; 0x30
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800106c:	4c1e      	ldr	r4, [pc, #120]	; (80010e8 <HAL_RCC_OscConfig+0x430>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800106e:	4313      	orrs	r3, r2
 8001070:	60b3      	str	r3, [r6, #8]
        __HAL_RCC_PLL_ENABLE();
 8001072:	2301      	movs	r3, #1
 8001074:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001076:	f7ff f8c3 	bl	8000200 <HAL_GetTick>
 800107a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800107c:	6823      	ldr	r3, [r4, #0]
 800107e:	019a      	lsls	r2, r3, #6
 8001080:	f53f ae74 	bmi.w	8000d6c <HAL_RCC_OscConfig+0xb4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001084:	f7ff f8bc 	bl	8000200 <HAL_GetTick>
 8001088:	1b40      	subs	r0, r0, r5
 800108a:	2802      	cmp	r0, #2
 800108c:	d9f6      	bls.n	800107c <HAL_RCC_OscConfig+0x3c4>
 800108e:	e690      	b.n	8000db2 <HAL_RCC_OscConfig+0xfa>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001090:	f7ff f8b6 	bl	8000200 <HAL_GetTick>
 8001094:	1bc0      	subs	r0, r0, r7
 8001096:	2802      	cmp	r0, #2
 8001098:	d9dd      	bls.n	8001056 <HAL_RCC_OscConfig+0x39e>
 800109a:	e68a      	b.n	8000db2 <HAL_RCC_OscConfig+0xfa>
        tickstart = HAL_GetTick();
 800109c:	f7ff f8b0 	bl	8000200 <HAL_GetTick>
 80010a0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80010a2:	4c11      	ldr	r4, [pc, #68]	; (80010e8 <HAL_RCC_OscConfig+0x430>)
 80010a4:	6823      	ldr	r3, [r4, #0]
 80010a6:	019b      	lsls	r3, r3, #6
 80010a8:	f57f ae60 	bpl.w	8000d6c <HAL_RCC_OscConfig+0xb4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010ac:	f7ff f8a8 	bl	8000200 <HAL_GetTick>
 80010b0:	1b40      	subs	r0, r0, r5
 80010b2:	2802      	cmp	r0, #2
 80010b4:	d9f6      	bls.n	80010a4 <HAL_RCC_OscConfig+0x3ec>
 80010b6:	e67c      	b.n	8000db2 <HAL_RCC_OscConfig+0xfa>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80010b8:	2801      	cmp	r0, #1
 80010ba:	f43f ae7b 	beq.w	8000db4 <HAL_RCC_OscConfig+0xfc>
        pll_config = RCC->CFGR;
 80010be:	4b0a      	ldr	r3, [pc, #40]	; (80010e8 <HAL_RCC_OscConfig+0x430>)
 80010c0:	6898      	ldr	r0, [r3, #8]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80010c4:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 80010c8:	429a      	cmp	r2, r3
 80010ca:	f47f adf9 	bne.w	8000cc0 <HAL_RCC_OscConfig+0x8>
 80010ce:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80010d0:	f400 1370 	and.w	r3, r0, #3932160	; 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010d4:	4293      	cmp	r3, r2
 80010d6:	f47f adf3 	bne.w	8000cc0 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80010da:	6b23      	ldr	r3, [r4, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80010dc:	f400 0040 	and.w	r0, r0, #12582912	; 0xc00000
    return HAL_ERROR;
 80010e0:	1ac0      	subs	r0, r0, r3
 80010e2:	bf18      	it	ne
 80010e4:	2001      	movne	r0, #1
 80010e6:	e665      	b.n	8000db4 <HAL_RCC_OscConfig+0xfc>
 80010e8:	40023800 	.word	0x40023800
 80010ec:	40007000 	.word	0x40007000
 80010f0:	42470060 	.word	0x42470060

080010f4 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 80010f4:	4a10      	ldr	r2, [pc, #64]	; (8001138 <HAL_RCC_GetSysClockFreq+0x44>)
 80010f6:	6893      	ldr	r3, [r2, #8]
  switch (tmpreg & RCC_CFGR_SWS)
 80010f8:	f003 010c 	and.w	r1, r3, #12
 80010fc:	2908      	cmp	r1, #8
 80010fe:	d003      	beq.n	8001108 <HAL_RCC_GetSysClockFreq+0x14>
 8001100:	290c      	cmp	r1, #12
 8001102:	d003      	beq.n	800110c <HAL_RCC_GetSysClockFreq+0x18>
 8001104:	2904      	cmp	r1, #4
 8001106:	d10e      	bne.n	8001126 <HAL_RCC_GetSysClockFreq+0x32>
      sysclockfreq = HSI_VALUE;
 8001108:	480c      	ldr	r0, [pc, #48]	; (800113c <HAL_RCC_GetSysClockFreq+0x48>)
}
 800110a:	4770      	bx	lr
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800110c:	480c      	ldr	r0, [pc, #48]	; (8001140 <HAL_RCC_GetSysClockFreq+0x4c>)
 800110e:	f3c3 4183 	ubfx	r1, r3, #18, #4
 8001112:	5c41      	ldrb	r1, [r0, r1]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001114:	f3c3 5081 	ubfx	r0, r3, #22, #2
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001118:	6893      	ldr	r3, [r2, #8]
 800111a:	4b08      	ldr	r3, [pc, #32]	; (800113c <HAL_RCC_GetSysClockFreq+0x48>)
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800111c:	3001      	adds	r0, #1
        pllvco = (HSE_VALUE * pllm) / plld;
 800111e:	434b      	muls	r3, r1
 8001120:	fbb3 f0f0 	udiv	r0, r3, r0
 8001124:	4770      	bx	lr
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001126:	6850      	ldr	r0, [r2, #4]
 8001128:	f3c0 3042 	ubfx	r0, r0, #13, #3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800112c:	1c43      	adds	r3, r0, #1
 800112e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001132:	4098      	lsls	r0, r3
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	40023800 	.word	0x40023800
 800113c:	00f42400 	.word	0x00f42400
 8001140:	08002ddc 	.word	0x08002ddc

08001144 <HAL_RCC_ClockConfig>:
{
 8001144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001148:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800114a:	4604      	mov	r4, r0
 800114c:	b910      	cbnz	r0, 8001154 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800114e:	2001      	movs	r0, #1
 8001150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001154:	4b57      	ldr	r3, [pc, #348]	; (80012b4 <HAL_RCC_ClockConfig+0x170>)
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	f002 0201 	and.w	r2, r2, #1
 800115c:	428a      	cmp	r2, r1
 800115e:	d32a      	bcc.n	80011b6 <HAL_RCC_ClockConfig+0x72>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001160:	6822      	ldr	r2, [r4, #0]
 8001162:	0796      	lsls	r6, r2, #30
 8001164:	d438      	bmi.n	80011d8 <HAL_RCC_ClockConfig+0x94>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001166:	07d0      	lsls	r0, r2, #31
 8001168:	d43e      	bmi.n	80011e8 <HAL_RCC_ClockConfig+0xa4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800116a:	4b52      	ldr	r3, [pc, #328]	; (80012b4 <HAL_RCC_ClockConfig+0x170>)
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	f002 0201 	and.w	r2, r2, #1
 8001172:	4295      	cmp	r5, r2
 8001174:	f0c0 808d 	bcc.w	8001292 <HAL_RCC_ClockConfig+0x14e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001178:	6822      	ldr	r2, [r4, #0]
 800117a:	0751      	lsls	r1, r2, #29
 800117c:	f100 8092 	bmi.w	80012a4 <HAL_RCC_ClockConfig+0x160>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001180:	0713      	lsls	r3, r2, #28
 8001182:	d507      	bpl.n	8001194 <HAL_RCC_ClockConfig+0x50>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001184:	4a4c      	ldr	r2, [pc, #304]	; (80012b8 <HAL_RCC_ClockConfig+0x174>)
 8001186:	6921      	ldr	r1, [r4, #16]
 8001188:	6893      	ldr	r3, [r2, #8]
 800118a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800118e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001192:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001194:	f7ff ffae 	bl	80010f4 <HAL_RCC_GetSysClockFreq>
}
 8001198:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800119c:	4b46      	ldr	r3, [pc, #280]	; (80012b8 <HAL_RCC_ClockConfig+0x174>)
 800119e:	4a47      	ldr	r2, [pc, #284]	; (80012bc <HAL_RCC_ClockConfig+0x178>)
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80011a6:	5cd3      	ldrb	r3, [r2, r3]
 80011a8:	40d8      	lsrs	r0, r3
 80011aa:	4b45      	ldr	r3, [pc, #276]	; (80012c0 <HAL_RCC_ClockConfig+0x17c>)
 80011ac:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 80011ae:	4b45      	ldr	r3, [pc, #276]	; (80012c4 <HAL_RCC_ClockConfig+0x180>)
 80011b0:	6818      	ldr	r0, [r3, #0]
 80011b2:	f7fe bfe3 	b.w	800017c <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011b6:	2901      	cmp	r1, #1
 80011b8:	bf02      	ittt	eq
 80011ba:	681a      	ldreq	r2, [r3, #0]
 80011bc:	f042 0204 	orreq.w	r2, r2, #4
 80011c0:	601a      	streq	r2, [r3, #0]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	f022 0201 	bic.w	r2, r2, #1
 80011c8:	430a      	orrs	r2, r1
 80011ca:	601a      	str	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	4299      	cmp	r1, r3
 80011d4:	d1bb      	bne.n	800114e <HAL_RCC_ClockConfig+0xa>
 80011d6:	e7c3      	b.n	8001160 <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011d8:	4937      	ldr	r1, [pc, #220]	; (80012b8 <HAL_RCC_ClockConfig+0x174>)
 80011da:	68a0      	ldr	r0, [r4, #8]
 80011dc:	688b      	ldr	r3, [r1, #8]
 80011de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80011e2:	4303      	orrs	r3, r0
 80011e4:	608b      	str	r3, [r1, #8]
 80011e6:	e7be      	b.n	8001166 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011e8:	6861      	ldr	r1, [r4, #4]
 80011ea:	4b33      	ldr	r3, [pc, #204]	; (80012b8 <HAL_RCC_ClockConfig+0x174>)
 80011ec:	2902      	cmp	r1, #2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80011ee:	681a      	ldr	r2, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011f0:	d11d      	bne.n	800122e <HAL_RCC_ClockConfig+0xea>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80011f2:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80011f6:	d0aa      	beq.n	800114e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011f8:	689a      	ldr	r2, [r3, #8]
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80011fa:	4f2f      	ldr	r7, [pc, #188]	; (80012b8 <HAL_RCC_ClockConfig+0x174>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011fc:	f022 0203 	bic.w	r2, r2, #3
 8001200:	430a      	orrs	r2, r1
 8001202:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001204:	f7fe fffc 	bl	8000200 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001208:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 800120a:	4606      	mov	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800120c:	2b02      	cmp	r3, #2
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800120e:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001212:	d119      	bne.n	8001248 <HAL_RCC_ClockConfig+0x104>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	f003 030c 	and.w	r3, r3, #12
 800121a:	2b08      	cmp	r3, #8
 800121c:	d0a5      	beq.n	800116a <HAL_RCC_ClockConfig+0x26>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800121e:	f7fe ffef 	bl	8000200 <HAL_GetTick>
 8001222:	1b80      	subs	r0, r0, r6
 8001224:	4540      	cmp	r0, r8
 8001226:	d9f5      	bls.n	8001214 <HAL_RCC_ClockConfig+0xd0>
          return HAL_TIMEOUT;
 8001228:	2003      	movs	r0, #3
 800122a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800122e:	2903      	cmp	r1, #3
 8001230:	d102      	bne.n	8001238 <HAL_RCC_ClockConfig+0xf4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001232:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001236:	e7de      	b.n	80011f6 <HAL_RCC_ClockConfig+0xb2>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001238:	2901      	cmp	r1, #1
 800123a:	d102      	bne.n	8001242 <HAL_RCC_ClockConfig+0xfe>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800123c:	f012 0f02 	tst.w	r2, #2
 8001240:	e7d9      	b.n	80011f6 <HAL_RCC_ClockConfig+0xb2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001242:	f412 7f00 	tst.w	r2, #512	; 0x200
 8001246:	e7d6      	b.n	80011f6 <HAL_RCC_ClockConfig+0xb2>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001248:	2b03      	cmp	r3, #3
 800124a:	d10a      	bne.n	8001262 <HAL_RCC_ClockConfig+0x11e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	f003 030c 	and.w	r3, r3, #12
 8001252:	2b0c      	cmp	r3, #12
 8001254:	d089      	beq.n	800116a <HAL_RCC_ClockConfig+0x26>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001256:	f7fe ffd3 	bl	8000200 <HAL_GetTick>
 800125a:	1b80      	subs	r0, r0, r6
 800125c:	4540      	cmp	r0, r8
 800125e:	d9f5      	bls.n	800124c <HAL_RCC_ClockConfig+0x108>
 8001260:	e7e2      	b.n	8001228 <HAL_RCC_ClockConfig+0xe4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001262:	2b01      	cmp	r3, #1
 8001264:	d110      	bne.n	8001288 <HAL_RCC_ClockConfig+0x144>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	f003 030c 	and.w	r3, r3, #12
 800126c:	2b04      	cmp	r3, #4
 800126e:	f43f af7c 	beq.w	800116a <HAL_RCC_ClockConfig+0x26>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001272:	f7fe ffc5 	bl	8000200 <HAL_GetTick>
 8001276:	1b80      	subs	r0, r0, r6
 8001278:	4540      	cmp	r0, r8
 800127a:	d9f4      	bls.n	8001266 <HAL_RCC_ClockConfig+0x122>
 800127c:	e7d4      	b.n	8001228 <HAL_RCC_ClockConfig+0xe4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800127e:	f7fe ffbf 	bl	8000200 <HAL_GetTick>
 8001282:	1b80      	subs	r0, r0, r6
 8001284:	4540      	cmp	r0, r8
 8001286:	d8cf      	bhi.n	8001228 <HAL_RCC_ClockConfig+0xe4>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	f013 0f0c 	tst.w	r3, #12
 800128e:	d1f6      	bne.n	800127e <HAL_RCC_ClockConfig+0x13a>
 8001290:	e76b      	b.n	800116a <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	f022 0201 	bic.w	r2, r2, #1
 8001298:	601a      	str	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	07da      	lsls	r2, r3, #31
 800129e:	f53f af56 	bmi.w	800114e <HAL_RCC_ClockConfig+0xa>
 80012a2:	e769      	b.n	8001178 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012a4:	4904      	ldr	r1, [pc, #16]	; (80012b8 <HAL_RCC_ClockConfig+0x174>)
 80012a6:	68e0      	ldr	r0, [r4, #12]
 80012a8:	688b      	ldr	r3, [r1, #8]
 80012aa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80012ae:	4303      	orrs	r3, r0
 80012b0:	608b      	str	r3, [r1, #8]
 80012b2:	e765      	b.n	8001180 <HAL_RCC_ClockConfig+0x3c>
 80012b4:	40023c00 	.word	0x40023c00
 80012b8:	40023800 	.word	0x40023800
 80012bc:	08002dc4 	.word	0x08002dc4
 80012c0:	200000f8 	.word	0x200000f8
 80012c4:	20000004 	.word	0x20000004

080012c8 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80012c8:	4b04      	ldr	r3, [pc, #16]	; (80012dc <HAL_RCC_GetPCLK1Freq+0x14>)
 80012ca:	4a05      	ldr	r2, [pc, #20]	; (80012e0 <HAL_RCC_GetPCLK1Freq+0x18>)
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80012d2:	5cd3      	ldrb	r3, [r2, r3]
 80012d4:	4a03      	ldr	r2, [pc, #12]	; (80012e4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80012d6:	6810      	ldr	r0, [r2, #0]
}
 80012d8:	40d8      	lsrs	r0, r3
 80012da:	4770      	bx	lr
 80012dc:	40023800 	.word	0x40023800
 80012e0:	08002dd4 	.word	0x08002dd4
 80012e4:	200000f8 	.word	0x200000f8

080012e8 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80012e8:	4b04      	ldr	r3, [pc, #16]	; (80012fc <HAL_RCC_GetPCLK2Freq+0x14>)
 80012ea:	4a05      	ldr	r2, [pc, #20]	; (8001300 <HAL_RCC_GetPCLK2Freq+0x18>)
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80012f2:	5cd3      	ldrb	r3, [r2, r3]
 80012f4:	4a03      	ldr	r2, [pc, #12]	; (8001304 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80012f6:	6810      	ldr	r0, [r2, #0]
}
 80012f8:	40d8      	lsrs	r0, r3
 80012fa:	4770      	bx	lr
 80012fc:	40023800 	.word	0x40023800
 8001300:	08002dd4 	.word	0x08002dd4
 8001304:	200000f8 	.word	0x200000f8

08001308 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001308:	6803      	ldr	r3, [r0, #0]
 800130a:	68da      	ldr	r2, [r3, #12]
 800130c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001310:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001312:	695a      	ldr	r2, [r3, #20]
 8001314:	f022 0201 	bic.w	r2, r2, #1
 8001318:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800131a:	2320      	movs	r3, #32
 800131c:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8001320:	4770      	bx	lr
	...

08001324 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001324:	b538      	push	{r3, r4, r5, lr}
 8001326:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001328:	6802      	ldr	r2, [r0, #0]
 800132a:	68c1      	ldr	r1, [r0, #12]
 800132c:	6913      	ldr	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800132e:	692c      	ldr	r4, [r5, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001330:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001334:	430b      	orrs	r3, r1
 8001336:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001338:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(huart->Instance->CR1,
 800133a:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800133c:	4323      	orrs	r3, r4
 800133e:	696c      	ldr	r4, [r5, #20]
 8001340:	69c0      	ldr	r0, [r0, #28]
 8001342:	4323      	orrs	r3, r4
  MODIFY_REG(huart->Instance->CR1,
 8001344:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 8001348:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800134c:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 800134e:	430b      	orrs	r3, r1
 8001350:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001352:	6953      	ldr	r3, [r2, #20]
 8001354:	69a9      	ldr	r1, [r5, #24]
 8001356:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800135a:	430b      	orrs	r3, r1

  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800135c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001360:	6153      	str	r3, [r2, #20]
 8001362:	4b1f      	ldr	r3, [pc, #124]	; (80013e0 <UART_SetConfig+0xbc>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001364:	d121      	bne.n	80013aa <UART_SetConfig+0x86>
  {
    /*------- UART-associated USART registers setting : BRR Configuration ------*/
    if((huart->Instance == USART1))
 8001366:	429a      	cmp	r2, r3
 8001368:	f04f 0419 	mov.w	r4, #25
 800136c:	d11a      	bne.n	80013a4 <UART_SetConfig+0x80>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800136e:	f7ff ffbb 	bl	80012e8 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001372:	4360      	muls	r0, r4
 8001374:	686c      	ldr	r4, [r5, #4]
 8001376:	6829      	ldr	r1, [r5, #0]
 8001378:	0064      	lsls	r4, r4, #1
 800137a:	fbb0 f0f4 	udiv	r0, r0, r4
 800137e:	2464      	movs	r4, #100	; 0x64
 8001380:	fbb0 f5f4 	udiv	r5, r0, r4
 8001384:	fb04 0315 	mls	r3, r4, r5, r0
 8001388:	00db      	lsls	r3, r3, #3
 800138a:	3332      	adds	r3, #50	; 0x32
 800138c:	fbb3 f3f4 	udiv	r3, r3, r4
 8001390:	f003 0207 	and.w	r2, r3, #7
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 800139a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800139e:	4413      	add	r3, r2
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80013a0:	608b      	str	r3, [r1, #8]
 80013a2:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 80013a4:	f7ff ff90 	bl	80012c8 <HAL_RCC_GetPCLK1Freq>
 80013a8:	e7e3      	b.n	8001372 <UART_SetConfig+0x4e>
    if((huart->Instance == USART1))
 80013aa:	429a      	cmp	r2, r3
 80013ac:	f04f 0419 	mov.w	r4, #25
 80013b0:	d113      	bne.n	80013da <UART_SetConfig+0xb6>
      pclk = HAL_RCC_GetPCLK2Freq();
 80013b2:	f7ff ff99 	bl	80012e8 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80013b6:	4360      	muls	r0, r4
 80013b8:	686c      	ldr	r4, [r5, #4]
 80013ba:	2264      	movs	r2, #100	; 0x64
 80013bc:	00a4      	lsls	r4, r4, #2
 80013be:	fbb0 f0f4 	udiv	r0, r0, r4
 80013c2:	fbb0 f4f2 	udiv	r4, r0, r2
 80013c6:	fb02 0314 	mls	r3, r2, r4, r0
 80013ca:	011b      	lsls	r3, r3, #4
 80013cc:	3332      	adds	r3, #50	; 0x32
 80013ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80013d2:	6829      	ldr	r1, [r5, #0]
 80013d4:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80013d8:	e7e2      	b.n	80013a0 <UART_SetConfig+0x7c>
      pclk = HAL_RCC_GetPCLK1Freq();
 80013da:	f7ff ff75 	bl	80012c8 <HAL_RCC_GetPCLK1Freq>
 80013de:	e7ea      	b.n	80013b6 <UART_SetConfig+0x92>
 80013e0:	40013800 	.word	0x40013800

080013e4 <HAL_UART_Init>:
{
 80013e4:	b510      	push	{r4, lr}
  if (huart == NULL)
 80013e6:	4604      	mov	r4, r0
 80013e8:	b340      	cbz	r0, 800143c <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80013ea:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80013ee:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80013f2:	b91b      	cbnz	r3, 80013fc <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80013f4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80013f8:	f001 fa98 	bl	800292c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80013fc:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80013fe:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001400:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001404:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8001406:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8001408:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800140c:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800140e:	f7ff ff89 	bl	8001324 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001412:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001414:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001416:	691a      	ldr	r2, [r3, #16]
 8001418:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800141c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800141e:	695a      	ldr	r2, [r3, #20]
 8001420:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001424:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001426:	68da      	ldr	r2, [r3, #12]
 8001428:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800142c:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800142e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001430:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001432:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001436:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800143a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800143c:	2001      	movs	r0, #1
}
 800143e:	bd10      	pop	{r4, pc}

08001440 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8001440:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001444:	2b20      	cmp	r3, #32
 8001446:	d120      	bne.n	800148a <HAL_UART_Receive_IT+0x4a>
    if ((pData == NULL) || (Size == 0U))
 8001448:	b1e9      	cbz	r1, 8001486 <HAL_UART_Receive_IT+0x46>
 800144a:	b1e2      	cbz	r2, 8001486 <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 800144c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001450:	2b01      	cmp	r3, #1
 8001452:	d01a      	beq.n	800148a <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 8001454:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 8001456:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001458:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800145a:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800145c:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800145e:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001462:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 8001464:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001466:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 8001468:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800146c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001470:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001472:	6951      	ldr	r1, [r2, #20]
    return HAL_OK;
 8001474:	4618      	mov	r0, r3
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001476:	f041 0101 	orr.w	r1, r1, #1
 800147a:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800147c:	68d1      	ldr	r1, [r2, #12]
 800147e:	f041 0120 	orr.w	r1, r1, #32
 8001482:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 8001484:	4770      	bx	lr
      return HAL_ERROR;
 8001486:	2001      	movs	r0, #1
 8001488:	4770      	bx	lr
    return HAL_BUSY;
 800148a:	2002      	movs	r0, #2
}
 800148c:	4770      	bx	lr

0800148e <HAL_UART_TxCpltCallback>:
 800148e:	4770      	bx	lr

08001490 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001490:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 8001494:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001496:	2b22      	cmp	r3, #34	; 0x22
 8001498:	d136      	bne.n	8001508 <UART_Receive_IT+0x78>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800149a:	6883      	ldr	r3, [r0, #8]
 800149c:	6901      	ldr	r1, [r0, #16]
 800149e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014a2:	6802      	ldr	r2, [r0, #0]
 80014a4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80014a6:	d123      	bne.n	80014f0 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80014a8:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80014aa:	b9e9      	cbnz	r1, 80014e8 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80014ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80014b0:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 80014b4:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 80014b6:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 80014b8:	3c01      	subs	r4, #1
 80014ba:	b2a4      	uxth	r4, r4
 80014bc:	85c4      	strh	r4, [r0, #46]	; 0x2e
 80014be:	b98c      	cbnz	r4, 80014e4 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80014c0:	6803      	ldr	r3, [r0, #0]
 80014c2:	68da      	ldr	r2, [r3, #12]
 80014c4:	f022 0220 	bic.w	r2, r2, #32
 80014c8:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80014ca:	68da      	ldr	r2, [r3, #12]
 80014cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014d0:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80014d2:	695a      	ldr	r2, [r3, #20]
 80014d4:	f022 0201 	bic.w	r2, r2, #1
 80014d8:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80014da:	2320      	movs	r3, #32
 80014dc:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 80014e0:	f001 f998 	bl	8002814 <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 80014e4:	2000      	movs	r0, #0
}
 80014e6:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80014e8:	b2d2      	uxtb	r2, r2
 80014ea:	f823 2b01 	strh.w	r2, [r3], #1
 80014ee:	e7e1      	b.n	80014b4 <UART_Receive_IT+0x24>
      if (huart->Init.Parity == UART_PARITY_NONE)
 80014f0:	b921      	cbnz	r1, 80014fc <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80014f2:	1c59      	adds	r1, r3, #1
 80014f4:	6852      	ldr	r2, [r2, #4]
 80014f6:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80014f8:	701a      	strb	r2, [r3, #0]
 80014fa:	e7dc      	b.n	80014b6 <UART_Receive_IT+0x26>
 80014fc:	6852      	ldr	r2, [r2, #4]
 80014fe:	1c59      	adds	r1, r3, #1
 8001500:	6281      	str	r1, [r0, #40]	; 0x28
 8001502:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001506:	e7f7      	b.n	80014f8 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8001508:	2002      	movs	r0, #2
 800150a:	bd10      	pop	{r4, pc}

0800150c <HAL_UART_ErrorCallback>:
 800150c:	4770      	bx	lr
	...

08001510 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001510:	6803      	ldr	r3, [r0, #0]
{
 8001512:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001514:	681a      	ldr	r2, [r3, #0]
{
 8001516:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8001518:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800151a:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800151c:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 800151e:	d107      	bne.n	8001530 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001520:	0696      	lsls	r6, r2, #26
 8001522:	d55a      	bpl.n	80015da <HAL_UART_IRQHandler+0xca>
 8001524:	068d      	lsls	r5, r1, #26
 8001526:	d558      	bpl.n	80015da <HAL_UART_IRQHandler+0xca>
}
 8001528:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 800152c:	f7ff bfb0 	b.w	8001490 <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001530:	f015 0501 	ands.w	r5, r5, #1
 8001534:	d102      	bne.n	800153c <HAL_UART_IRQHandler+0x2c>
 8001536:	f411 7f90 	tst.w	r1, #288	; 0x120
 800153a:	d04e      	beq.n	80015da <HAL_UART_IRQHandler+0xca>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800153c:	07d3      	lsls	r3, r2, #31
 800153e:	d505      	bpl.n	800154c <HAL_UART_IRQHandler+0x3c>
 8001540:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001542:	bf42      	ittt	mi
 8001544:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8001546:	f043 0301 	orrmi.w	r3, r3, #1
 800154a:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800154c:	0750      	lsls	r0, r2, #29
 800154e:	d504      	bpl.n	800155a <HAL_UART_IRQHandler+0x4a>
 8001550:	b11d      	cbz	r5, 800155a <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001552:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001554:	f043 0302 	orr.w	r3, r3, #2
 8001558:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800155a:	0793      	lsls	r3, r2, #30
 800155c:	d504      	bpl.n	8001568 <HAL_UART_IRQHandler+0x58>
 800155e:	b11d      	cbz	r5, 8001568 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001560:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001562:	f043 0304 	orr.w	r3, r3, #4
 8001566:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001568:	0716      	lsls	r6, r2, #28
 800156a:	d504      	bpl.n	8001576 <HAL_UART_IRQHandler+0x66>
 800156c:	b11d      	cbz	r5, 8001576 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800156e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001570:	f043 0308 	orr.w	r3, r3, #8
 8001574:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001576:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001578:	2b00      	cmp	r3, #0
 800157a:	d066      	beq.n	800164a <HAL_UART_IRQHandler+0x13a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800157c:	0695      	lsls	r5, r2, #26
 800157e:	d504      	bpl.n	800158a <HAL_UART_IRQHandler+0x7a>
 8001580:	0688      	lsls	r0, r1, #26
 8001582:	d502      	bpl.n	800158a <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8001584:	4620      	mov	r0, r4
 8001586:	f7ff ff83 	bl	8001490 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800158a:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 800158c:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800158e:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001590:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001592:	0711      	lsls	r1, r2, #28
 8001594:	d402      	bmi.n	800159c <HAL_UART_IRQHandler+0x8c>
 8001596:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 800159a:	d01a      	beq.n	80015d2 <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 800159c:	f7ff feb4 	bl	8001308 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80015a0:	6823      	ldr	r3, [r4, #0]
 80015a2:	695a      	ldr	r2, [r3, #20]
 80015a4:	0652      	lsls	r2, r2, #25
 80015a6:	d510      	bpl.n	80015ca <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80015a8:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 80015aa:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80015ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80015b0:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 80015b2:	b150      	cbz	r0, 80015ca <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80015b4:	4b25      	ldr	r3, [pc, #148]	; (800164c <HAL_UART_IRQHandler+0x13c>)
 80015b6:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80015b8:	f7fe fea4 	bl	8000304 <HAL_DMA_Abort_IT>
 80015bc:	2800      	cmp	r0, #0
 80015be:	d044      	beq.n	800164a <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80015c0:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 80015c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80015c6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80015c8:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 80015ca:	4620      	mov	r0, r4
 80015cc:	f7ff ff9e 	bl	800150c <HAL_UART_ErrorCallback>
 80015d0:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 80015d2:	f7ff ff9b 	bl	800150c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015d6:	63e5      	str	r5, [r4, #60]	; 0x3c
 80015d8:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80015da:	0616      	lsls	r6, r2, #24
 80015dc:	d527      	bpl.n	800162e <HAL_UART_IRQHandler+0x11e>
 80015de:	060d      	lsls	r5, r1, #24
 80015e0:	d525      	bpl.n	800162e <HAL_UART_IRQHandler+0x11e>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80015e2:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80015e6:	2a21      	cmp	r2, #33	; 0x21
 80015e8:	d12f      	bne.n	800164a <HAL_UART_IRQHandler+0x13a>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80015ea:	68a2      	ldr	r2, [r4, #8]
 80015ec:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80015f0:	6a22      	ldr	r2, [r4, #32]
 80015f2:	d117      	bne.n	8001624 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80015f4:	8811      	ldrh	r1, [r2, #0]
 80015f6:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80015fa:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80015fc:	6921      	ldr	r1, [r4, #16]
 80015fe:	b979      	cbnz	r1, 8001620 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8001600:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8001602:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8001604:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8001606:	3a01      	subs	r2, #1
 8001608:	b292      	uxth	r2, r2
 800160a:	84e2      	strh	r2, [r4, #38]	; 0x26
 800160c:	b9ea      	cbnz	r2, 800164a <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800160e:	68da      	ldr	r2, [r3, #12]
 8001610:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001614:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001616:	68da      	ldr	r2, [r3, #12]
 8001618:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800161c:	60da      	str	r2, [r3, #12]
 800161e:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8001620:	3201      	adds	r2, #1
 8001622:	e7ee      	b.n	8001602 <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001624:	1c51      	adds	r1, r2, #1
 8001626:	6221      	str	r1, [r4, #32]
 8001628:	7812      	ldrb	r2, [r2, #0]
 800162a:	605a      	str	r2, [r3, #4]
 800162c:	e7ea      	b.n	8001604 <HAL_UART_IRQHandler+0xf4>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800162e:	0650      	lsls	r0, r2, #25
 8001630:	d50b      	bpl.n	800164a <HAL_UART_IRQHandler+0x13a>
 8001632:	064a      	lsls	r2, r1, #25
 8001634:	d509      	bpl.n	800164a <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001636:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8001638:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800163a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800163e:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001640:	2320      	movs	r3, #32
 8001642:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8001646:	f7ff ff22 	bl	800148e <HAL_UART_TxCpltCallback>
 800164a:	bd70      	pop	{r4, r5, r6, pc}
 800164c:	08001651 	.word	0x08001651

08001650 <UART_DMAAbortOnError>:
{
 8001650:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8001652:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001654:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8001656:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001658:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800165a:	f7ff ff57 	bl	800150c <HAL_UART_ErrorCallback>
 800165e:	bd08      	pop	{r3, pc}

08001660 <USB_EnableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8001660:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8001664:	b29b      	uxth	r3, r3
 8001666:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 800166a:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 800166e:	2000      	movs	r0, #0
 8001670:	4770      	bx	lr

08001672 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8001672:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8001676:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800167a:	045b      	lsls	r3, r3, #17
 800167c:	0c5b      	lsrs	r3, r3, #17
 800167e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8001682:	2000      	movs	r0, #0
 8001684:	4770      	bx	lr

08001686 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8001686:	b084      	sub	sp, #16
 8001688:	b510      	push	{r4, lr}
 800168a:	ac03      	add	r4, sp, #12
 800168c:	e884 000e 	stmia.w	r4, {r1, r2, r3}

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 8001690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR = 0;
 8001694:	2200      	movs	r2, #0
  USBx->CNTR = USB_CNTR_FRES;
 8001696:	2301      	movs	r3, #1
 8001698:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->CNTR = 0;
 800169c:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
  USBx->ISTR = 0;
 80016a0:	f8a0 2044 	strh.w	r2, [r0, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 80016a4:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
  USBx->CNTR |= winterruptmask;
 80016a8:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
}
 80016ac:	b004      	add	sp, #16
  USBx->CNTR |= winterruptmask;
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 80016b4:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
}
 80016b8:	4610      	mov	r0, r2
 80016ba:	4770      	bx	lr

080016bc <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80016bc:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80016be:	780d      	ldrb	r5, [r1, #0]
{
 80016c0:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80016c2:	f830 2025 	ldrh.w	r2, [r0, r5, lsl #2]

  /* initialize Endpoint */
  switch (ep->type)
 80016c6:	78c8      	ldrb	r0, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80016c8:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 80016cc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80016d0:	0412      	lsls	r2, r2, #16
 80016d2:	0c12      	lsrs	r2, r2, #16
  switch (ep->type)
 80016d4:	2803      	cmp	r0, #3
 80016d6:	d84c      	bhi.n	8001772 <USB_ActivateEndpoint+0xb6>
 80016d8:	e8df f000 	tbb	[pc, r0]
 80016dc:	45044802 	.word	0x45044802
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80016e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  HAL_StatusTypeDef ret = HAL_OK;
 80016e4:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 80016e6:	f248 0480 	movw	r4, #32896	; 0x8080
 80016ea:	4322      	orrs	r2, r4
 80016ec:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80016f0:	780e      	ldrb	r6, [r1, #0]
 80016f2:	4da5      	ldr	r5, [pc, #660]	; (8001988 <USB_ActivateEndpoint+0x2cc>)
 80016f4:	f833 2026 	ldrh.w	r2, [r3, r6, lsl #2]
 80016f8:	4334      	orrs	r4, r6
 80016fa:	b292      	uxth	r2, r2
 80016fc:	402a      	ands	r2, r5
 80016fe:	4322      	orrs	r2, r4
 8001700:	f823 2026 	strh.w	r2, [r3, r6, lsl #2]

  if (ep->doublebuffer == 0U)
 8001704:	7b0c      	ldrb	r4, [r1, #12]
 8001706:	780a      	ldrb	r2, [r1, #0]
 8001708:	2c00      	cmp	r4, #0
 800170a:	d17d      	bne.n	8001808 <USB_ActivateEndpoint+0x14c>
  {
    if (ep->is_in != 0U)
 800170c:	784e      	ldrb	r6, [r1, #1]
 800170e:	88cc      	ldrh	r4, [r1, #6]
 8001710:	b38e      	cbz	r6, 8001776 <USB_ActivateEndpoint+0xba>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8001712:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8001716:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 800171a:	b2b6      	uxth	r6, r6
 800171c:	4432      	add	r2, r6
 800171e:	f024 0401 	bic.w	r4, r4, #1
 8001722:	f8a2 4400 	strh.w	r4, [r2, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001726:	780c      	ldrb	r4, [r1, #0]
 8001728:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800172c:	0656      	lsls	r6, r2, #25
 800172e:	d509      	bpl.n	8001744 <USB_ActivateEndpoint+0x88>
 8001730:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8001734:	b292      	uxth	r2, r2
 8001736:	402a      	ands	r2, r5
 8001738:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800173c:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8001740:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8001744:	78ca      	ldrb	r2, [r1, #3]
 8001746:	7809      	ldrb	r1, [r1, #0]
 8001748:	2a01      	cmp	r2, #1
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800174a:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800174e:	4c8f      	ldr	r4, [pc, #572]	; (800198c <USB_ActivateEndpoint+0x2d0>)
 8001750:	b292      	uxth	r2, r2
 8001752:	ea02 0204 	and.w	r2, r2, r4
      if (ep->type != EP_TYPE_ISOC)
 8001756:	d001      	beq.n	800175c <USB_ActivateEndpoint+0xa0>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8001758:	f082 0220 	eor.w	r2, r2, #32
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800175c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001760:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001764:	e0c0      	b.n	80018e8 <USB_ActivateEndpoint+0x22c>
      wEpRegVal |= USB_EP_INTERRUPT;
 8001766:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
 800176a:	e7bb      	b.n	80016e4 <USB_ActivateEndpoint+0x28>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800176c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001770:	e7b8      	b.n	80016e4 <USB_ActivateEndpoint+0x28>
      ret = HAL_ERROR;
 8001772:	2001      	movs	r0, #1
 8001774:	e7b7      	b.n	80016e6 <USB_ActivateEndpoint+0x2a>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8001776:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 800177a:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 800177e:	b2ad      	uxth	r5, r5
 8001780:	442a      	add	r2, r5
 8001782:	f024 0401 	bic.w	r4, r4, #1
 8001786:	f8a2 4408 	strh.w	r4, [r2, #1032]	; 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800178a:	780a      	ldrb	r2, [r1, #0]
 800178c:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8001790:	690c      	ldr	r4, [r1, #16]
 8001792:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8001796:	b2ad      	uxth	r5, r5
 8001798:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 800179c:	b944      	cbnz	r4, 80017b0 <USB_ActivateEndpoint+0xf4>
 800179e:	5b54      	ldrh	r4, [r2, r5]
 80017a0:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 80017a4:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 80017a8:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 80017ac:	5354      	strh	r4, [r2, r5]
 80017ae:	e007      	b.n	80017c0 <USB_ActivateEndpoint+0x104>
 80017b0:	2c3d      	cmp	r4, #61	; 0x3d
 80017b2:	d824      	bhi.n	80017fe <USB_ActivateEndpoint+0x142>
 80017b4:	0866      	lsrs	r6, r4, #1
 80017b6:	07e4      	lsls	r4, r4, #31
 80017b8:	bf48      	it	mi
 80017ba:	3601      	addmi	r6, #1
 80017bc:	02b6      	lsls	r6, r6, #10
 80017be:	5356      	strh	r6, [r2, r5]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80017c0:	780c      	ldrb	r4, [r1, #0]
 80017c2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80017c6:	0452      	lsls	r2, r2, #17
 80017c8:	d50d      	bpl.n	80017e6 <USB_ActivateEndpoint+0x12a>
 80017ca:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80017ce:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80017d2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80017d6:	0412      	lsls	r2, r2, #16
 80017d8:	0c12      	lsrs	r2, r2, #16
 80017da:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80017de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80017e2:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80017e6:	7809      	ldrb	r1, [r1, #0]
 80017e8:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80017ec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80017f0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80017f4:	0412      	lsls	r2, r2, #16
 80017f6:	0c12      	lsrs	r2, r2, #16
 80017f8:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 80017fc:	e7ae      	b.n	800175c <USB_ActivateEndpoint+0xa0>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80017fe:	4e64      	ldr	r6, [pc, #400]	; (8001990 <USB_ActivateEndpoint+0x2d4>)
 8001800:	0964      	lsrs	r4, r4, #5
 8001802:	ea46 2484 	orr.w	r4, r6, r4, lsl #10
 8001806:	e7d1      	b.n	80017ac <USB_ActivateEndpoint+0xf0>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8001808:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 800180c:	b2a4      	uxth	r4, r4
 800180e:	402c      	ands	r4, r5
 8001810:	f444 4401 	orr.w	r4, r4, #33024	; 0x8100
 8001814:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8001818:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800181c:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8001820:	b294      	uxth	r4, r2
 8001822:	780a      	ldrb	r2, [r1, #0]
 8001824:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8001828:	4422      	add	r2, r4
 800182a:	890c      	ldrh	r4, [r1, #8]
 800182c:	f024 0401 	bic.w	r4, r4, #1
 8001830:	f8a2 4400 	strh.w	r4, [r2, #1024]	; 0x400
 8001834:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8001838:	b294      	uxth	r4, r2
 800183a:	780a      	ldrb	r2, [r1, #0]
 800183c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8001840:	4422      	add	r2, r4
 8001842:	894c      	ldrh	r4, [r1, #10]
 8001844:	f024 0401 	bic.w	r4, r4, #1
 8001848:	f8a2 4408 	strh.w	r4, [r2, #1032]	; 0x408
    if (ep->is_in == 0U)
 800184c:	784a      	ldrb	r2, [r1, #1]
 800184e:	780c      	ldrb	r4, [r1, #0]
 8001850:	2a00      	cmp	r2, #0
 8001852:	d14c      	bne.n	80018ee <USB_ActivateEndpoint+0x232>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001854:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8001858:	0456      	lsls	r6, r2, #17
 800185a:	d509      	bpl.n	8001870 <USB_ActivateEndpoint+0x1b4>
 800185c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8001860:	b292      	uxth	r2, r2
 8001862:	402a      	ands	r2, r5
 8001864:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001868:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800186c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001870:	780c      	ldrb	r4, [r1, #0]
 8001872:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8001876:	0652      	lsls	r2, r2, #25
 8001878:	d50d      	bpl.n	8001896 <USB_ActivateEndpoint+0x1da>
 800187a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800187e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8001882:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001886:	0412      	lsls	r2, r2, #16
 8001888:	0c12      	lsrs	r2, r2, #16
 800188a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800188e:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8001892:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8001896:	780c      	ldrb	r4, [r1, #0]
 8001898:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800189c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80018a0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80018a4:	0412      	lsls	r2, r2, #16
 80018a6:	0c12      	lsrs	r2, r2, #16
 80018a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018ac:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80018b0:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80018b4:	f248 0480 	movw	r4, #32896	; 0x8080
 80018b8:	780d      	ldrb	r5, [r1, #0]
 80018ba:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 80018be:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80018c2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80018c6:	0412      	lsls	r2, r2, #16
 80018c8:	0c12      	lsrs	r2, r2, #16
 80018ca:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 80018ce:	4322      	orrs	r2, r4
 80018d0:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80018d4:	7809      	ldrb	r1, [r1, #0]
 80018d6:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80018da:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80018de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80018e2:	0412      	lsls	r2, r2, #16
 80018e4:	0c12      	lsrs	r2, r2, #16
 80018e6:	4322      	orrs	r2, r4
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80018e8:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    }
  }

  return ret;
}
 80018ec:	bd70      	pop	{r4, r5, r6, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80018ee:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80018f2:	0456      	lsls	r6, r2, #17
 80018f4:	d509      	bpl.n	800190a <USB_ActivateEndpoint+0x24e>
 80018f6:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80018fa:	b292      	uxth	r2, r2
 80018fc:	402a      	ands	r2, r5
 80018fe:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001902:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001906:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800190a:	780c      	ldrb	r4, [r1, #0]
 800190c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8001910:	0652      	lsls	r2, r2, #25
 8001912:	d50d      	bpl.n	8001930 <USB_ActivateEndpoint+0x274>
 8001914:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8001918:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800191c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001920:	0412      	lsls	r2, r2, #16
 8001922:	0c12      	lsrs	r2, r2, #16
 8001924:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001928:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800192c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8001930:	780c      	ldrb	r4, [r1, #0]
 8001932:	4d16      	ldr	r5, [pc, #88]	; (800198c <USB_ActivateEndpoint+0x2d0>)
 8001934:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8001938:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800193c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001940:	0412      	lsls	r2, r2, #16
 8001942:	0c12      	lsrs	r2, r2, #16
 8001944:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001948:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800194c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 8001950:	78ca      	ldrb	r2, [r1, #3]
 8001952:	780c      	ldrb	r4, [r1, #0]
 8001954:	2a01      	cmp	r2, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8001956:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800195a:	b292      	uxth	r2, r2
 800195c:	ea02 0205 	and.w	r2, r2, r5
 8001960:	bf18      	it	ne
 8001962:	f082 0220 	eorne.w	r2, r2, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001966:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800196a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800196e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001972:	7809      	ldrb	r1, [r1, #0]
 8001974:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8001978:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800197c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001980:	0412      	lsls	r2, r2, #16
 8001982:	0c12      	lsrs	r2, r2, #16
 8001984:	e6ea      	b.n	800175c <USB_ActivateEndpoint+0xa0>
 8001986:	bf00      	nop
 8001988:	ffff8f8f 	.word	0xffff8f8f
 800198c:	ffff8fbf 	.word	0xffff8fbf
 8001990:	ffff8000 	.word	0xffff8000

08001994 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8001994:	b510      	push	{r4, lr}
  if (ep->doublebuffer == 0U)
 8001996:	7b0c      	ldrb	r4, [r1, #12]
 8001998:	784b      	ldrb	r3, [r1, #1]
 800199a:	780a      	ldrb	r2, [r1, #0]
 800199c:	2c00      	cmp	r4, #0
 800199e:	d13d      	bne.n	8001a1c <USB_DeactivateEndpoint+0x88>
  {
    if (ep->is_in != 0U)
 80019a0:	b313      	cbz	r3, 80019e8 <USB_DeactivateEndpoint+0x54>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80019a2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80019a6:	065c      	lsls	r4, r3, #25
 80019a8:	d50d      	bpl.n	80019c6 <USB_DeactivateEndpoint+0x32>
 80019aa:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80019ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80019b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019b6:	041b      	lsls	r3, r3, #16
 80019b8:	0c1b      	lsrs	r3, r3, #16
 80019ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019be:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80019c2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80019c6:	780a      	ldrb	r2, [r1, #0]
 80019c8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80019cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80019d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80019d4:	041b      	lsls	r3, r3, #16
 80019d6:	0c1b      	lsrs	r3, r3, #16
 80019d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019e0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 80019e4:	2000      	movs	r0, #0
 80019e6:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80019e8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80019ec:	045b      	lsls	r3, r3, #17
 80019ee:	d50d      	bpl.n	8001a0c <USB_DeactivateEndpoint+0x78>
 80019f0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80019f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80019f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019fc:	041b      	lsls	r3, r3, #16
 80019fe:	0c1b      	lsrs	r3, r3, #16
 8001a00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a08:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001a0c:	780a      	ldrb	r2, [r1, #0]
 8001a0e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001a12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a1a:	e7db      	b.n	80019d4 <USB_DeactivateEndpoint+0x40>
    if (ep->is_in == 0U)
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d14e      	bne.n	8001abe <USB_DeactivateEndpoint+0x12a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001a20:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001a24:	045c      	lsls	r4, r3, #17
 8001a26:	d50d      	bpl.n	8001a44 <USB_DeactivateEndpoint+0xb0>
 8001a28:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001a2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001a30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a34:	041b      	lsls	r3, r3, #16
 8001a36:	0c1b      	lsrs	r3, r3, #16
 8001a38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a40:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001a44:	780a      	ldrb	r2, [r1, #0]
 8001a46:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001a4a:	065b      	lsls	r3, r3, #25
 8001a4c:	d50d      	bpl.n	8001a6a <USB_DeactivateEndpoint+0xd6>
 8001a4e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001a52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a5a:	041b      	lsls	r3, r3, #16
 8001a5c:	0c1b      	lsrs	r3, r3, #16
 8001a5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a62:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001a66:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8001a6a:	780a      	ldrb	r2, [r1, #0]
 8001a6c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001a70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001a74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a78:	041b      	lsls	r3, r3, #16
 8001a7a:	0c1b      	lsrs	r3, r3, #16
 8001a7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a80:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001a84:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001a88:	f248 0280 	movw	r2, #32896	; 0x8080
 8001a8c:	780c      	ldrb	r4, [r1, #0]
 8001a8e:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8001a92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a9a:	041b      	lsls	r3, r3, #16
 8001a9c:	0c1b      	lsrs	r3, r3, #16
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001aa4:	7809      	ldrb	r1, [r1, #0]
 8001aa6:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8001aaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001aae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001ab2:	041b      	lsls	r3, r3, #16
 8001ab4:	0c1b      	lsrs	r3, r3, #16
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 8001abc:	e792      	b.n	80019e4 <USB_DeactivateEndpoint+0x50>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001abe:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001ac2:	045c      	lsls	r4, r3, #17
 8001ac4:	d50d      	bpl.n	8001ae2 <USB_DeactivateEndpoint+0x14e>
 8001ac6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001aca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ad2:	041b      	lsls	r3, r3, #16
 8001ad4:	0c1b      	lsrs	r3, r3, #16
 8001ad6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ada:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ade:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001ae2:	780a      	ldrb	r2, [r1, #0]
 8001ae4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001ae8:	065b      	lsls	r3, r3, #25
 8001aea:	d50d      	bpl.n	8001b08 <USB_DeactivateEndpoint+0x174>
 8001aec:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001af0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001af4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001af8:	041b      	lsls	r3, r3, #16
 8001afa:	0c1b      	lsrs	r3, r3, #16
 8001afc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b00:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001b04:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8001b08:	780a      	ldrb	r2, [r1, #0]
 8001b0a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001b0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b16:	041b      	lsls	r3, r3, #16
 8001b18:	0c1b      	lsrs	r3, r3, #16
 8001b1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b22:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001b26:	f248 0280 	movw	r2, #32896	; 0x8080
 8001b2a:	780c      	ldrb	r4, [r1, #0]
 8001b2c:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8001b30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001b38:	041b      	lsls	r3, r3, #16
 8001b3a:	0c1b      	lsrs	r3, r3, #16
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001b42:	7809      	ldrb	r1, [r1, #0]
 8001b44:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8001b48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b50:	e7af      	b.n	8001ab2 <USB_DeactivateEndpoint+0x11e>

08001b52 <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8001b52:	784b      	ldrb	r3, [r1, #1]
 8001b54:	780a      	ldrb	r2, [r1, #0]
 8001b56:	b18b      	cbz	r3, 8001b7c <USB_EPSetStall+0x2a>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8001b58:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001b5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001b64:	041b      	lsls	r3, r3, #16
 8001b66:	0c1b      	lsrs	r3, r3, #16
 8001b68:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8001b6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b74:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8001b78:	2000      	movs	r0, #0
 8001b7a:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8001b7c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001b80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b88:	041b      	lsls	r3, r3, #16
 8001b8a:	0c1b      	lsrs	r3, r3, #16
 8001b8c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001b90:	e7ec      	b.n	8001b6c <USB_EPSetStall+0x1a>

08001b92 <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8001b92:	7b0b      	ldrb	r3, [r1, #12]
 8001b94:	bb43      	cbnz	r3, 8001be8 <USB_EPClearStall+0x56>
  {
    if (ep->is_in != 0U)
 8001b96:	784b      	ldrb	r3, [r1, #1]
 8001b98:	780a      	ldrb	r2, [r1, #0]
 8001b9a:	b33b      	cbz	r3, 8001bec <USB_EPClearStall+0x5a>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001b9c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001ba0:	065b      	lsls	r3, r3, #25
 8001ba2:	d50d      	bpl.n	8001bc0 <USB_EPClearStall+0x2e>
 8001ba4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001ba8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001bac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bb0:	041b      	lsls	r3, r3, #16
 8001bb2:	0c1b      	lsrs	r3, r3, #16
 8001bb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bb8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001bbc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8001bc0:	78cb      	ldrb	r3, [r1, #3]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d010      	beq.n	8001be8 <USB_EPClearStall+0x56>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8001bc6:	780a      	ldrb	r2, [r1, #0]
 8001bc8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001bcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001bd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001bd4:	041b      	lsls	r3, r3, #16
 8001bd6:	0c1b      	lsrs	r3, r3, #16
 8001bd8:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001bdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001be0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001be4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8001be8:	2000      	movs	r0, #0
 8001bea:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001bec:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001bf0:	045b      	lsls	r3, r3, #17
 8001bf2:	d50d      	bpl.n	8001c10 <USB_EPClearStall+0x7e>
 8001bf4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001bf8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001bfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c00:	041b      	lsls	r3, r3, #16
 8001c02:	0c1b      	lsrs	r3, r3, #16
 8001c04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c0c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001c10:	780a      	ldrb	r2, [r1, #0]
 8001c12:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001c16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c1e:	041b      	lsls	r3, r3, #16
 8001c20:	0c1b      	lsrs	r3, r3, #16
 8001c22:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001c26:	e7d9      	b.n	8001bdc <USB_EPClearStall+0x4a>

08001c28 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8001c28:	b911      	cbnz	r1, 8001c30 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8001c2a:	2380      	movs	r3, #128	; 0x80
 8001c2c:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 8001c30:	2000      	movs	r0, #0
 8001c32:	4770      	bx	lr

08001c34 <USB_DevConnect>:
 8001c34:	2000      	movs	r0, #0
 8001c36:	4770      	bx	lr

08001c38 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8001c38:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8001c3c:	b280      	uxth	r0, r0
 8001c3e:	4770      	bx	lr

08001c40 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001c40:	2000      	movs	r0, #0
 8001c42:	4770      	bx	lr

08001c44 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8001c44:	b530      	push	{r4, r5, lr}
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8001c46:	460c      	mov	r4, r1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8001c48:	3301      	adds	r3, #1

  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8001c4a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8001c4e:	f023 0301 	bic.w	r3, r3, #1
 8001c52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c56:	440b      	add	r3, r1

  for (i = n; i != 0U; i--)
 8001c58:	429c      	cmp	r4, r3
 8001c5a:	d100      	bne.n	8001c5e <USB_WritePMA+0x1a>
    pdwVal++;
#endif

    pBuf++;
  }
}
 8001c5c:	bd30      	pop	{r4, r5, pc}
 8001c5e:	8825      	ldrh	r5, [r4, #0]
    *pdwVal = (uint16_t)temp2;
 8001c60:	1a60      	subs	r0, r4, r1
 8001c62:	f822 5010 	strh.w	r5, [r2, r0, lsl #1]
 8001c66:	3402      	adds	r4, #2
 8001c68:	e7f6      	b.n	8001c58 <USB_WritePMA+0x14>
	...

08001c6c <USB_EPStartXfer>:
{
 8001c6c:	b570      	push	{r4, r5, r6, lr}
 8001c6e:	460d      	mov	r5, r1
  if (ep->is_in == 1U)
 8001c70:	7849      	ldrb	r1, [r1, #1]
{
 8001c72:	4604      	mov	r4, r0
  if (ep->is_in == 1U)
 8001c74:	2901      	cmp	r1, #1
 8001c76:	69aa      	ldr	r2, [r5, #24]
 8001c78:	692b      	ldr	r3, [r5, #16]
 8001c7a:	7b28      	ldrb	r0, [r5, #12]
 8001c7c:	d163      	bne.n	8001d46 <USB_EPStartXfer+0xda>
    if (ep->xfer_len > ep->maxpacket)
 8001c7e:	429a      	cmp	r2, r3
      ep->xfer_len = 0U;
 8001c80:	bf9d      	ittte	ls
 8001c82:	2300      	movls	r3, #0
 8001c84:	61ab      	strls	r3, [r5, #24]
 8001c86:	4613      	movls	r3, r2
      ep->xfer_len -= len;
 8001c88:	1ad2      	subhi	r2, r2, r3
 8001c8a:	bf88      	it	hi
 8001c8c:	61aa      	strhi	r2, [r5, #24]
 8001c8e:	b29e      	uxth	r6, r3
    if (ep->doublebuffer == 0U)
 8001c90:	bb08      	cbnz	r0, 8001cd6 <USB_EPStartXfer+0x6a>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8001c92:	4633      	mov	r3, r6
 8001c94:	88ea      	ldrh	r2, [r5, #6]
 8001c96:	6969      	ldr	r1, [r5, #20]
 8001c98:	4620      	mov	r0, r4
 8001c9a:	f7ff ffd3 	bl	8001c44 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8001c9e:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 8001ca2:	b29a      	uxth	r2, r3
 8001ca4:	782b      	ldrb	r3, [r5, #0]
 8001ca6:	eb04 1303 	add.w	r3, r4, r3, lsl #4
 8001caa:	4413      	add	r3, r2
 8001cac:	f8a3 6404 	strh.w	r6, [r3, #1028]	; 0x404
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8001cb0:	782a      	ldrb	r2, [r5, #0]
 8001cb2:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8001cb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001cba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001cbe:	041b      	lsls	r3, r3, #16
 8001cc0:	0c1b      	lsrs	r3, r3, #16
 8001cc2:	f083 0330 	eor.w	r3, r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001cc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cce:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
}
 8001cd2:	2000      	movs	r0, #0
 8001cd4:	bd70      	pop	{r4, r5, r6, pc}
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8001cd6:	782a      	ldrb	r2, [r5, #0]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8001cd8:	4620      	mov	r0, r4
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8001cda:	f834 1022 	ldrh.w	r1, [r4, r2, lsl #2]
 8001cde:	0112      	lsls	r2, r2, #4
 8001ce0:	f011 0f40 	tst.w	r1, #64	; 0x40
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8001ce4:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8001ce8:	4422      	add	r2, r4
 8001cea:	b289      	uxth	r1, r1
 8001cec:	440a      	add	r2, r1
 8001cee:	bf15      	itete	ne
 8001cf0:	f8a2 340c 	strhne.w	r3, [r2, #1036]	; 0x40c
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8001cf4:	f8a2 3404 	strheq.w	r3, [r2, #1028]	; 0x404
        pmabuffer = ep->pmaaddr1;
 8001cf8:	896a      	ldrhne	r2, [r5, #10]
        pmabuffer = ep->pmaaddr0;
 8001cfa:	892a      	ldrheq	r2, [r5, #8]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8001cfc:	4633      	mov	r3, r6
 8001cfe:	6969      	ldr	r1, [r5, #20]
 8001d00:	f7ff ffa0 	bl	8001c44 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8001d04:	786b      	ldrb	r3, [r5, #1]
 8001d06:	782a      	ldrb	r2, [r5, #0]
 8001d08:	b973      	cbnz	r3, 8001d28 <USB_EPStartXfer+0xbc>
 8001d0a:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8001d0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d16:	041b      	lsls	r3, r3, #16
 8001d18:	0c1b      	lsrs	r3, r3, #16
 8001d1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d1e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001d22:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
 8001d26:	e7c3      	b.n	8001cb0 <USB_EPStartXfer+0x44>
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d1c1      	bne.n	8001cb0 <USB_EPStartXfer+0x44>
 8001d2c:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8001d30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d38:	041b      	lsls	r3, r3, #16
 8001d3a:	0c1b      	lsrs	r3, r3, #16
 8001d3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d44:	e7ed      	b.n	8001d22 <USB_EPStartXfer+0xb6>
    if (ep->xfer_len > ep->maxpacket)
 8001d46:	429a      	cmp	r2, r3
      ep->xfer_len = 0U;
 8001d48:	bf93      	iteet	ls
 8001d4a:	2300      	movls	r3, #0
      ep->xfer_len -= len;
 8001d4c:	1ad2      	subhi	r2, r2, r3
 8001d4e:	61aa      	strhi	r2, [r5, #24]
      ep->xfer_len = 0U;
 8001d50:	61ab      	strls	r3, [r5, #24]
 8001d52:	bf98      	it	ls
 8001d54:	4613      	movls	r3, r2
 8001d56:	782a      	ldrb	r2, [r5, #0]
    if (ep->doublebuffer == 0U)
 8001d58:	b988      	cbnz	r0, 8001d7e <USB_EPStartXfer+0x112>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8001d5a:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8001d5e:	0112      	lsls	r2, r2, #4
 8001d60:	b288      	uxth	r0, r1
 8001d62:	f204 410c 	addw	r1, r4, #1036	; 0x40c
 8001d66:	4401      	add	r1, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d135      	bne.n	8001dd8 <USB_EPStartXfer+0x16c>
 8001d6c:	5a8b      	ldrh	r3, [r1, r2]
 8001d6e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001d72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d7a:	528b      	strh	r3, [r1, r2]
 8001d7c:	e034      	b.n	8001de8 <USB_EPStartXfer+0x17c>
 8001d7e:	b979      	cbnz	r1, 8001da0 <USB_EPStartXfer+0x134>
 8001d80:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 8001d84:	0112      	lsls	r2, r2, #4
 8001d86:	b281      	uxth	r1, r0
 8001d88:	f204 4004 	addw	r0, r4, #1028	; 0x404
 8001d8c:	4408      	add	r0, r1
 8001d8e:	b9b3      	cbnz	r3, 8001dbe <USB_EPStartXfer+0x152>
 8001d90:	5a81      	ldrh	r1, [r0, r2]
 8001d92:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8001d96:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8001d9a:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8001d9e:	5281      	strh	r1, [r0, r2]
 8001da0:	7869      	ldrb	r1, [r5, #1]
 8001da2:	782a      	ldrb	r2, [r5, #0]
 8001da4:	2900      	cmp	r1, #0
 8001da6:	d0d8      	beq.n	8001d5a <USB_EPStartXfer+0xee>
 8001da8:	2901      	cmp	r1, #1
 8001daa:	d11d      	bne.n	8001de8 <USB_EPStartXfer+0x17c>
 8001dac:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8001db0:	eb04 1202 	add.w	r2, r4, r2, lsl #4
 8001db4:	b289      	uxth	r1, r1
 8001db6:	440a      	add	r2, r1
 8001db8:	f8a2 340c 	strh.w	r3, [r2, #1036]	; 0x40c
 8001dbc:	e014      	b.n	8001de8 <USB_EPStartXfer+0x17c>
 8001dbe:	2b3d      	cmp	r3, #61	; 0x3d
 8001dc0:	d805      	bhi.n	8001dce <USB_EPStartXfer+0x162>
 8001dc2:	0859      	lsrs	r1, r3, #1
 8001dc4:	07de      	lsls	r6, r3, #31
 8001dc6:	bf48      	it	mi
 8001dc8:	3101      	addmi	r1, #1
 8001dca:	0289      	lsls	r1, r1, #10
 8001dcc:	e7e7      	b.n	8001d9e <USB_EPStartXfer+0x132>
 8001dce:	4e0f      	ldr	r6, [pc, #60]	; (8001e0c <USB_EPStartXfer+0x1a0>)
 8001dd0:	0959      	lsrs	r1, r3, #5
 8001dd2:	ea46 2181 	orr.w	r1, r6, r1, lsl #10
 8001dd6:	e7e2      	b.n	8001d9e <USB_EPStartXfer+0x132>
 8001dd8:	2b3d      	cmp	r3, #61	; 0x3d
 8001dda:	d811      	bhi.n	8001e00 <USB_EPStartXfer+0x194>
 8001ddc:	0858      	lsrs	r0, r3, #1
 8001dde:	07db      	lsls	r3, r3, #31
 8001de0:	bf48      	it	mi
 8001de2:	3001      	addmi	r0, #1
 8001de4:	0280      	lsls	r0, r0, #10
 8001de6:	5288      	strh	r0, [r1, r2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001de8:	782a      	ldrb	r2, [r5, #0]
 8001dea:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8001dee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001df6:	041b      	lsls	r3, r3, #16
 8001df8:	0c1b      	lsrs	r3, r3, #16
 8001dfa:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001dfe:	e762      	b.n	8001cc6 <USB_EPStartXfer+0x5a>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8001e00:	0958      	lsrs	r0, r3, #5
 8001e02:	4b02      	ldr	r3, [pc, #8]	; (8001e0c <USB_EPStartXfer+0x1a0>)
 8001e04:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 8001e08:	e7b7      	b.n	8001d7a <USB_EPStartXfer+0x10e>
 8001e0a:	bf00      	nop
 8001e0c:	ffff8000 	.word	0xffff8000

08001e10 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8001e10:	b570      	push	{r4, r5, r6, lr}
  uint32_t n = (uint32_t)wNBytes >> 1;
 8001e12:	085d      	lsrs	r5, r3, #1
  uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));

  for (i = n; i != 0U; i--)
 8001e14:	462e      	mov	r6, r5
  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8001e16:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8001e1a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e1e:	1c8c      	adds	r4, r1, #2
  for (i = n; i != 0U; i--)
 8001e20:	b936      	cbnz	r6, 8001e30 <USB_ReadPMA+0x20>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8001e22:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8001e24:	bf44      	itt	mi
 8001e26:	f832 3025 	ldrhmi.w	r3, [r2, r5, lsl #2]
 8001e2a:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
 8001e2e:	bd70      	pop	{r4, r5, r6, pc}
    temp = *pdwVal;
 8001e30:	1a60      	subs	r0, r4, r1
 8001e32:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8001e36:	f830 0c04 	ldrh.w	r0, [r0, #-4]
  for (i = n; i != 0U; i--)
 8001e3a:	3e01      	subs	r6, #1
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8001e3c:	f804 0c02 	strb.w	r0, [r4, #-2]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8001e40:	0a00      	lsrs	r0, r0, #8
 8001e42:	f804 0c01 	strb.w	r0, [r4, #-1]
 8001e46:	3402      	adds	r4, #2
 8001e48:	e7ea      	b.n	8001e20 <USB_ReadPMA+0x10>
	...

08001e4c <USBD_HID_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_HID_CfgFSDesc);
 8001e4c:	2322      	movs	r3, #34	; 0x22
 8001e4e:	8003      	strh	r3, [r0, #0]
  return USBD_HID_CfgFSDesc;
}
 8001e50:	4800      	ldr	r0, [pc, #0]	; (8001e54 <USBD_HID_GetFSCfgDesc+0x8>)
 8001e52:	4770      	bx	lr
 8001e54:	20000074 	.word	0x20000074

08001e58 <USBD_HID_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_HID_CfgHSDesc);
 8001e58:	2322      	movs	r3, #34	; 0x22
 8001e5a:	8003      	strh	r3, [r0, #0]
  return USBD_HID_CfgHSDesc;
}
 8001e5c:	4800      	ldr	r0, [pc, #0]	; (8001e60 <USBD_HID_GetHSCfgDesc+0x8>)
 8001e5e:	4770      	bx	lr
 8001e60:	20000098 	.word	0x20000098

08001e64 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_HID_OtherSpeedCfgDesc);
 8001e64:	2322      	movs	r3, #34	; 0x22
 8001e66:	8003      	strh	r3, [r0, #0]
  return USBD_HID_OtherSpeedCfgDesc;
}
 8001e68:	4800      	ldr	r0, [pc, #0]	; (8001e6c <USBD_HID_GetOtherSpeedCfgDesc+0x8>)
 8001e6a:	4770      	bx	lr
 8001e6c:	200000d4 	.word	0x200000d4

08001e70 <USBD_HID_DataIn>:
                              uint8_t epnum)
{

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8001e70:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290
 8001e74:	2000      	movs	r0, #0
 8001e76:	7318      	strb	r0, [r3, #12]
  return USBD_OK;
}
 8001e78:	4770      	bx	lr
	...

08001e7c <USBD_HID_GetDeviceQualifierDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc (uint16_t *length)
{
  *length = sizeof (USBD_HID_DeviceQualifierDesc);
 8001e7c:	230a      	movs	r3, #10
 8001e7e:	8003      	strh	r3, [r0, #0]
  return USBD_HID_DeviceQualifierDesc;
}
 8001e80:	4800      	ldr	r0, [pc, #0]	; (8001e84 <USBD_HID_GetDeviceQualifierDesc+0x8>)
 8001e82:	4770      	bx	lr
 8001e84:	200000c8 	.word	0x200000c8

08001e88 <USBD_HID_Setup>:
{
 8001e88:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint16_t status_info = 0U;
 8001e8a:	2500      	movs	r5, #0
 8001e8c:	f8ad 5006 	strh.w	r5, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8001e90:	780d      	ldrb	r5, [r1, #0]
{
 8001e92:	4603      	mov	r3, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8001e94:	f015 0560 	ands.w	r5, r5, #96	; 0x60
{
 8001e98:	460a      	mov	r2, r1
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef*) pdev->pClassData;
 8001e9a:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8001e9e:	d01e      	beq.n	8001ede <USBD_HID_Setup+0x56>
 8001ea0:	2d20      	cmp	r5, #32
 8001ea2:	d152      	bne.n	8001f4a <USBD_HID_Setup+0xc2>
    switch (req->bRequest)
 8001ea4:	7849      	ldrb	r1, [r1, #1]
 8001ea6:	3902      	subs	r1, #2
 8001ea8:	2909      	cmp	r1, #9
 8001eaa:	d84c      	bhi.n	8001f46 <USBD_HID_Setup+0xbe>
 8001eac:	e8df f001 	tbb	[pc, r1]
 8001eb0:	4b4b0a14 	.word	0x4b4b0a14
 8001eb4:	4b4b4b4b 	.word	0x4b4b4b4b
 8001eb8:	0510      	.short	0x0510
      hhid->Protocol = (uint8_t)(req->wValue);
 8001eba:	7893      	ldrb	r3, [r2, #2]
 8001ebc:	6023      	str	r3, [r4, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8001ebe:	2000      	movs	r0, #0
}
 8001ec0:	b003      	add	sp, #12
 8001ec2:	bd30      	pop	{r4, r5, pc}
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	4621      	mov	r1, r4
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f000 fbc6 	bl	800265a <USBD_CtlSendData>
 8001ece:	e7f6      	b.n	8001ebe <USBD_HID_Setup+0x36>
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8001ed0:	8853      	ldrh	r3, [r2, #2]
 8001ed2:	0a1b      	lsrs	r3, r3, #8
 8001ed4:	6063      	str	r3, [r4, #4]
 8001ed6:	e7f2      	b.n	8001ebe <USBD_HID_Setup+0x36>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8001ed8:	2201      	movs	r2, #1
 8001eda:	1d21      	adds	r1, r4, #4
 8001edc:	e7f4      	b.n	8001ec8 <USBD_HID_Setup+0x40>
    switch (req->bRequest)
 8001ede:	7849      	ldrb	r1, [r1, #1]
 8001ee0:	290b      	cmp	r1, #11
 8001ee2:	d830      	bhi.n	8001f46 <USBD_HID_Setup+0xbe>
 8001ee4:	e8df f001 	tbb	[pc, r1]
 8001ee8:	2f2f2f06 	.word	0x2f2f2f06
 8001eec:	2f0e2f2f 	.word	0x2f0e2f2f
 8001ef0:	28202f2f 	.word	0x28202f2f
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8001ef4:	f893 1274 	ldrb.w	r1, [r3, #628]	; 0x274
 8001ef8:	2903      	cmp	r1, #3
 8001efa:	d124      	bne.n	8001f46 <USBD_HID_Setup+0xbe>
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8001efc:	2202      	movs	r2, #2
 8001efe:	f10d 0106 	add.w	r1, sp, #6
 8001f02:	e7e1      	b.n	8001ec8 <USBD_HID_Setup+0x40>
      if(req->wValue >> 8 == HID_REPORT_DESC)
 8001f04:	8851      	ldrh	r1, [r2, #2]
 8001f06:	0a09      	lsrs	r1, r1, #8
 8001f08:	2922      	cmp	r1, #34	; 0x22
 8001f0a:	d105      	bne.n	8001f18 <USBD_HID_Setup+0x90>
        len = MIN(HID_MOUSE_REPORT_DESC_SIZE , req->wLength);
 8001f0c:	88d2      	ldrh	r2, [r2, #6]
        pbuf = HID_MOUSE_ReportDesc;
 8001f0e:	4911      	ldr	r1, [pc, #68]	; (8001f54 <USBD_HID_Setup+0xcc>)
        len = MIN(HID_MOUSE_REPORT_DESC_SIZE , req->wLength);
 8001f10:	2a32      	cmp	r2, #50	; 0x32
 8001f12:	bf28      	it	cs
 8001f14:	2232      	movcs	r2, #50	; 0x32
 8001f16:	e7d7      	b.n	8001ec8 <USBD_HID_Setup+0x40>
      else if(req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8001f18:	2921      	cmp	r1, #33	; 0x21
 8001f1a:	d114      	bne.n	8001f46 <USBD_HID_Setup+0xbe>
        len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8001f1c:	88d2      	ldrh	r2, [r2, #6]
        pbuf = USBD_HID_Desc;
 8001f1e:	490e      	ldr	r1, [pc, #56]	; (8001f58 <USBD_HID_Setup+0xd0>)
        len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8001f20:	2a09      	cmp	r2, #9
 8001f22:	bf28      	it	cs
 8001f24:	2209      	movcs	r2, #9
 8001f26:	e7cf      	b.n	8001ec8 <USBD_HID_Setup+0x40>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8001f28:	f893 1274 	ldrb.w	r1, [r3, #628]	; 0x274
 8001f2c:	2903      	cmp	r1, #3
 8001f2e:	d10a      	bne.n	8001f46 <USBD_HID_Setup+0xbe>
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8001f30:	2201      	movs	r2, #1
 8001f32:	f104 0108 	add.w	r1, r4, #8
 8001f36:	e7c7      	b.n	8001ec8 <USBD_HID_Setup+0x40>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8001f38:	f893 1274 	ldrb.w	r1, [r3, #628]	; 0x274
 8001f3c:	2903      	cmp	r1, #3
 8001f3e:	d102      	bne.n	8001f46 <USBD_HID_Setup+0xbe>
        hhid->AltSetting = (uint8_t)(req->wValue);
 8001f40:	7893      	ldrb	r3, [r2, #2]
 8001f42:	60a3      	str	r3, [r4, #8]
 8001f44:	e7bb      	b.n	8001ebe <USBD_HID_Setup+0x36>
      USBD_CtlError (pdev, req);
 8001f46:	4611      	mov	r1, r2
 8001f48:	4618      	mov	r0, r3
    USBD_CtlError (pdev, req);
 8001f4a:	f000 fb5f 	bl	800260c <USBD_CtlError>
    ret = USBD_FAIL;
 8001f4e:	2002      	movs	r0, #2
    break;
 8001f50:	e7b6      	b.n	8001ec0 <USBD_HID_Setup+0x38>
 8001f52:	bf00      	nop
 8001f54:	20000008 	.word	0x20000008
 8001f58:	200000bc 	.word	0x200000bc

08001f5c <USBD_HID_DeInit>:
{
 8001f5c:	b538      	push	{r3, r4, r5, lr}
 8001f5e:	4604      	mov	r4, r0
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8001f60:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8001f62:	2181      	movs	r1, #129	; 0x81
 8001f64:	f000 fdee 	bl	8002b44 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 8001f68:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8001f6c:	62e5      	str	r5, [r4, #44]	; 0x2c
  if(pdev->pClassData != NULL)
 8001f6e:	b118      	cbz	r0, 8001f78 <USBD_HID_DeInit+0x1c>
    USBD_free(pdev->pClassData);
 8001f70:	f000 fe50 	bl	8002c14 <USBD_static_free>
    pdev->pClassData = NULL;
 8001f74:	f8c4 5290 	str.w	r5, [r4, #656]	; 0x290
}
 8001f78:	2000      	movs	r0, #0
 8001f7a:	bd38      	pop	{r3, r4, r5, pc}

08001f7c <USBD_HID_Init>:
{
 8001f7c:	b510      	push	{r4, lr}
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8001f7e:	2304      	movs	r3, #4
 8001f80:	2203      	movs	r2, #3
 8001f82:	2181      	movs	r1, #129	; 0x81
{
 8001f84:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8001f86:	f000 fdcd 	bl	8002b24 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8001f8a:	2301      	movs	r3, #1
  pdev->pClassData = USBD_malloc(sizeof (USBD_HID_HandleTypeDef));
 8001f8c:	2010      	movs	r0, #16
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8001f8e:	62e3      	str	r3, [r4, #44]	; 0x2c
  pdev->pClassData = USBD_malloc(sizeof (USBD_HID_HandleTypeDef));
 8001f90:	f000 fe3c 	bl	8002c0c <USBD_static_malloc>
 8001f94:	f8c4 0290 	str.w	r0, [r4, #656]	; 0x290
  if (pdev->pClassData == NULL)
 8001f98:	b118      	cbz	r0, 8001fa2 <USBD_HID_Init+0x26>
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	7303      	strb	r3, [r0, #12]
  return USBD_OK;
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8001fa2:	2002      	movs	r0, #2
}
 8001fa4:	bd10      	pop	{r4, pc}

08001fa6 <USBD_HID_SendReport>:
{
 8001fa6:	b510      	push	{r4, lr}
 8001fa8:	4613      	mov	r3, r2
  if (pdev->dev_state == USBD_STATE_CONFIGURED )
 8001faa:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8001fae:	2a03      	cmp	r2, #3
 8001fb0:	d109      	bne.n	8001fc6 <USBD_HID_SendReport+0x20>
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef*)pdev->pClassData;
 8001fb2:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290
    if(hhid->state == HID_IDLE)
 8001fb6:	7b22      	ldrb	r2, [r4, #12]
 8001fb8:	b92a      	cbnz	r2, 8001fc6 <USBD_HID_SendReport+0x20>
      hhid->state = HID_BUSY;
 8001fba:	2201      	movs	r2, #1
 8001fbc:	7322      	strb	r2, [r4, #12]
      USBD_LL_Transmit (pdev,
 8001fbe:	460a      	mov	r2, r1
 8001fc0:	2181      	movs	r1, #129	; 0x81
 8001fc2:	f000 fe07 	bl	8002bd4 <USBD_LL_Transmit>
}
 8001fc6:	2000      	movs	r0, #0
 8001fc8:	bd10      	pop	{r4, pc}

08001fca <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8001fca:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8001fcc:	b180      	cbz	r0, 8001ff0 <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8001fce:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8001fd2:	b113      	cbz	r3, 8001fda <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	f8c0 328c 	str.w	r3, [r0, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8001fda:	b109      	cbz	r1, 8001fe0 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8001fdc:	f8c0 1288 	str.w	r1, [r0, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8001fe0:	2301      	movs	r3, #1
  pdev->id = id;
 8001fe2:	7002      	strb	r2, [r0, #0]
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8001fe4:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8001fe8:	f000 fd5a 	bl	8002aa0 <USBD_LL_Init>

  return USBD_OK;
 8001fec:	2000      	movs	r0, #0
 8001fee:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8001ff0:	2002      	movs	r0, #2
}
 8001ff2:	bd08      	pop	{r3, pc}

08001ff4 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8001ff4:	b119      	cbz	r1, 8001ffe <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8001ff6:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
    status = USBD_OK;
 8001ffa:	2000      	movs	r0, #0
 8001ffc:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8001ffe:	2002      	movs	r0, #2
  }

  return status;
}
 8002000:	4770      	bx	lr

08002002 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8002002:	b508      	push	{r3, lr}

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8002004:	f000 fd80 	bl	8002b08 <USBD_LL_Start>

  return USBD_OK;
}
 8002008:	2000      	movs	r0, #0
 800200a:	bd08      	pop	{r3, pc}

0800200c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800200c:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;

  if(pdev->pClass != NULL)
 800200e:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8002012:	b90b      	cbnz	r3, 8002018 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8002014:	2002      	movs	r0, #2
 8002016:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4798      	blx	r3
 800201c:	2800      	cmp	r0, #0
 800201e:	d1f9      	bne.n	8002014 <USBD_SetClassConfig+0x8>
      ret = USBD_OK;
    }
  }

  return ret;
}
 8002020:	bd08      	pop	{r3, pc}

08002022 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002022:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8002024:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	4798      	blx	r3
  return USBD_OK;
}
 800202c:	2000      	movs	r0, #0
 800202e:	bd08      	pop	{r3, pc}

08002030 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8002030:	b538      	push	{r3, r4, r5, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8002032:	f500 7520 	add.w	r5, r0, #640	; 0x280
{
 8002036:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8002038:	4628      	mov	r0, r5
 800203a:	f000 fad3 	bl	80025e4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800203e:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8002040:	f894 1280 	ldrb.w	r1, [r4, #640]	; 0x280
  pdev->ep0_state = USBD_EP0_SETUP;
 8002044:	f8c4 326c 	str.w	r3, [r4, #620]	; 0x26c
  pdev->ep0_data_len = pdev->request.wLength;
 8002048:	f8b4 3286 	ldrh.w	r3, [r4, #646]	; 0x286
 800204c:	f8c4 3270 	str.w	r3, [r4, #624]	; 0x270
  switch (pdev->request.bmRequest & 0x1FU)
 8002050:	f001 031f 	and.w	r3, r1, #31
 8002054:	2b01      	cmp	r3, #1
 8002056:	d00e      	beq.n	8002076 <USBD_LL_SetupStage+0x46>
 8002058:	d307      	bcc.n	800206a <USBD_LL_SetupStage+0x3a>
 800205a:	2b02      	cmp	r3, #2
 800205c:	d010      	beq.n	8002080 <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
    break;

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800205e:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8002062:	4620      	mov	r0, r4
 8002064:	f000 fd7c 	bl	8002b60 <USBD_LL_StallEP>
    break;
 8002068:	e003      	b.n	8002072 <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 800206a:	4629      	mov	r1, r5
 800206c:	4620      	mov	r0, r4
 800206e:	f000 f8f1 	bl	8002254 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 8002072:	2000      	movs	r0, #0
 8002074:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8002076:	4629      	mov	r1, r5
 8002078:	4620      	mov	r0, r4
 800207a:	f000 fa05 	bl	8002488 <USBD_StdItfReq>
    break;
 800207e:	e7f8      	b.n	8002072 <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);
 8002080:	4629      	mov	r1, r5
 8002082:	4620      	mov	r0, r4
 8002084:	f000 fa25 	bl	80024d2 <USBD_StdEPReq>
    break;
 8002088:	e7f3      	b.n	8002072 <USBD_LL_SetupStage+0x42>

0800208a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800208a:	b570      	push	{r4, r5, r6, lr}
 800208c:	4605      	mov	r5, r0
 800208e:	4616      	mov	r6, r2
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8002090:	bb49      	cbnz	r1, 80020e6 <USBD_LL_DataOutStage+0x5c>
  {
    pep = &pdev->ep_out[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8002092:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 8002096:	2b03      	cmp	r3, #3
 8002098:	d11e      	bne.n	80020d8 <USBD_LL_DataOutStage+0x4e>
    {
      if(pep->rem_length > pep->maxpacket)
 800209a:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 800209e:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d90b      	bls.n	80020be <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 80020a6:	1a9b      	subs	r3, r3, r2

        USBD_CtlContinueRx (pdev,
 80020a8:	429a      	cmp	r2, r3
        pep->rem_length -=  pep->maxpacket;
 80020aa:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
        USBD_CtlContinueRx (pdev,
 80020ae:	bf8c      	ite	hi
 80020b0:	b29a      	uxthhi	r2, r3
 80020b2:	b292      	uxthls	r2, r2
 80020b4:	4631      	mov	r1, r6
 80020b6:	f000 fae5 	bl	8002684 <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80020ba:	2000      	movs	r0, #0
    pdev->pClass->DataOut(pdev, epnum);
 80020bc:	bd70      	pop	{r4, r5, r6, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80020be:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	b123      	cbz	r3, 80020d0 <USBD_LL_DataOutStage+0x46>
 80020c6:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 80020ca:	2a03      	cmp	r2, #3
 80020cc:	d100      	bne.n	80020d0 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev);
 80020ce:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80020d0:	4628      	mov	r0, r5
 80020d2:	f000 fadf 	bl	8002694 <USBD_CtlSendStatus>
 80020d6:	e7f0      	b.n	80020ba <USBD_LL_DataOutStage+0x30>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80020d8:	2b05      	cmp	r3, #5
 80020da:	d1ee      	bne.n	80020ba <USBD_LL_DataOutStage+0x30>
        pdev->ep0_state = USBD_EP0_IDLE;
 80020dc:	f8c5 126c 	str.w	r1, [r5, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 80020e0:	f000 fd3e 	bl	8002b60 <USBD_LL_StallEP>
 80020e4:	e7e9      	b.n	80020ba <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL) &&
 80020e6:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	b12b      	cbz	r3, 80020fa <USBD_LL_DataOutStage+0x70>
 80020ee:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 80020f2:	2a03      	cmp	r2, #3
 80020f4:	d101      	bne.n	80020fa <USBD_LL_DataOutStage+0x70>
    pdev->pClass->DataOut(pdev, epnum);
 80020f6:	4798      	blx	r3
 80020f8:	e7df      	b.n	80020ba <USBD_LL_DataOutStage+0x30>
    return USBD_FAIL;
 80020fa:	2002      	movs	r0, #2
}
 80020fc:	bd70      	pop	{r4, r5, r6, pc}

080020fe <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 80020fe:	b570      	push	{r4, r5, r6, lr}
 8002100:	4613      	mov	r3, r2
 8002102:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8002104:	460e      	mov	r6, r1
 8002106:	2900      	cmp	r1, #0
 8002108:	d147      	bne.n	800219a <USBD_LL_DataInStage+0x9c>
  {
    pep = &pdev->ep_in[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800210a:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 800210e:	2a02      	cmp	r2, #2
 8002110:	d13c      	bne.n	800218c <USBD_LL_DataInStage+0x8e>
    {
      if(pep->rem_length > pep->maxpacket)
 8002112:	6a05      	ldr	r5, [r0, #32]
 8002114:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8002116:	4295      	cmp	r5, r2
 8002118:	d913      	bls.n	8002142 <USBD_LL_DataInStage+0x44>
      {
        pep->rem_length -= pep->maxpacket;
 800211a:	1aaa      	subs	r2, r5, r2
 800211c:	6202      	str	r2, [r0, #32]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800211e:	4619      	mov	r1, r3
 8002120:	b292      	uxth	r2, r2
 8002122:	f000 faa7 	bl	8002674 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8002126:	4633      	mov	r3, r6
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8002128:	461a      	mov	r2, r3
 800212a:	4619      	mov	r1, r3
 800212c:	4620      	mov	r0, r4
 800212e:	f000 fd5f 	bl	8002bf0 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8002132:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
 8002136:	2000      	movs	r0, #0
 8002138:	2b01      	cmp	r3, #1
 800213a:	d13a      	bne.n	80021b2 <USBD_LL_DataInStage+0xb4>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 800213c:	f884 0278 	strb.w	r0, [r4, #632]	; 0x278
 8002140:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0U) &&
 8002142:	69c3      	ldr	r3, [r0, #28]
 8002144:	fbb3 f5f2 	udiv	r5, r3, r2
 8002148:	fb02 3515 	mls	r5, r2, r5, r3
 800214c:	b965      	cbnz	r5, 8002168 <USBD_LL_DataInStage+0x6a>
 800214e:	429a      	cmp	r2, r3
 8002150:	d80a      	bhi.n	8002168 <USBD_LL_DataInStage+0x6a>
           (pep->total_length >= pep->maxpacket) &&
 8002152:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 8002156:	4293      	cmp	r3, r2
 8002158:	d206      	bcs.n	8002168 <USBD_LL_DataInStage+0x6a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800215a:	462a      	mov	r2, r5
 800215c:	f000 fa8a 	bl	8002674 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8002160:	f8c4 5270 	str.w	r5, [r4, #624]	; 0x270
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8002164:	462b      	mov	r3, r5
 8002166:	e7df      	b.n	8002128 <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8002168:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	b12b      	cbz	r3, 800217c <USBD_LL_DataInStage+0x7e>
 8002170:	f894 2274 	ldrb.w	r2, [r4, #628]	; 0x274
 8002174:	2a03      	cmp	r2, #3
 8002176:	d101      	bne.n	800217c <USBD_LL_DataInStage+0x7e>
            pdev->pClass->EP0_TxSent(pdev);
 8002178:	4620      	mov	r0, r4
 800217a:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 800217c:	2180      	movs	r1, #128	; 0x80
 800217e:	4620      	mov	r0, r4
 8002180:	f000 fcee 	bl	8002b60 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8002184:	4620      	mov	r0, r4
 8002186:	f000 fa90 	bl	80026aa <USBD_CtlReceiveStatus>
 800218a:	e7d2      	b.n	8002132 <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800218c:	f032 0304 	bics.w	r3, r2, #4
 8002190:	d1cf      	bne.n	8002132 <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 8002192:	2180      	movs	r1, #128	; 0x80
 8002194:	f000 fce4 	bl	8002b60 <USBD_LL_StallEP>
 8002198:	e7cb      	b.n	8002132 <USBD_LL_DataInStage+0x34>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800219a:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800219e:	695b      	ldr	r3, [r3, #20]
 80021a0:	b133      	cbz	r3, 80021b0 <USBD_LL_DataInStage+0xb2>
 80021a2:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 80021a6:	2a03      	cmp	r2, #3
 80021a8:	d102      	bne.n	80021b0 <USBD_LL_DataInStage+0xb2>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum);
 80021aa:	4798      	blx	r3
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80021ac:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 80021ae:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 80021b0:	2002      	movs	r0, #2
}
 80021b2:	bd70      	pop	{r4, r5, r6, pc}

080021b4 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80021b4:	2200      	movs	r2, #0
{
 80021b6:	b570      	push	{r4, r5, r6, lr}
 80021b8:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80021ba:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80021bc:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80021be:	4611      	mov	r1, r2
 80021c0:	2340      	movs	r3, #64	; 0x40
 80021c2:	f000 fcaf 	bl	8002b24 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80021c6:	4633      	mov	r3, r6
 80021c8:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80021ca:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80021ce:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80021d2:	2200      	movs	r2, #0
 80021d4:	4620      	mov	r0, r4
 80021d6:	f000 fca5 	bl	8002b24 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 80021da:	2100      	movs	r1, #0
  pdev->dev_config= 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 80021dc:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80021e0:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80021e2:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 80021e4:	f884 5274 	strb.w	r5, [r4, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 80021e8:	f8c4 126c 	str.w	r1, [r4, #620]	; 0x26c
  pdev->dev_config= 0U;
 80021ec:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 80021ee:	f8c4 127c 	str.w	r1, [r4, #636]	; 0x27c
  if (pdev->pClassData)
 80021f2:	b123      	cbz	r3, 80021fe <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80021f4:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 80021f8:	4620      	mov	r0, r4
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	4798      	blx	r3
  }

  return USBD_OK;
}
 80021fe:	2000      	movs	r0, #0
 8002200:	bd70      	pop	{r4, r5, r6, pc}

08002202 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8002202:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8002204:	2000      	movs	r0, #0
 8002206:	4770      	bx	lr

08002208 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8002208:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800220c:	f880 3275 	strb.w	r3, [r0, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8002210:	2304      	movs	r3, #4
 8002212:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 8002216:	2000      	movs	r0, #0
 8002218:	4770      	bx	lr

0800221a <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;
 800221a:	f890 3275 	ldrb.w	r3, [r0, #629]	; 0x275
 800221e:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 8002222:	2000      	movs	r0, #0
 8002224:	4770      	bx	lr

08002226 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8002226:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8002228:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800222c:	2a03      	cmp	r2, #3
 800222e:	d104      	bne.n	800223a <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 8002230:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8002234:	69db      	ldr	r3, [r3, #28]
 8002236:	b103      	cbz	r3, 800223a <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8002238:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 800223a:	2000      	movs	r0, #0
 800223c:	bd08      	pop	{r3, pc}

0800223e <USBD_CtlError.constprop.1>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 800223e:	b510      	push	{r4, lr}
 8002240:	4604      	mov	r4, r0
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80U);
 8002242:	2180      	movs	r1, #128	; 0x80
 8002244:	f000 fc8c 	bl	8002b60 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8002248:	4620      	mov	r0, r4
}
 800224a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0U);
 800224e:	2100      	movs	r1, #0
 8002250:	f000 bc86 	b.w	8002b60 <USBD_LL_StallEP>

08002254 <USBD_StdDevReq>:
{
 8002254:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002256:	780b      	ldrb	r3, [r1, #0]
{
 8002258:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800225a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800225e:	2b20      	cmp	r3, #32
{
 8002260:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002262:	d014      	beq.n	800228e <USBD_StdDevReq+0x3a>
 8002264:	2b40      	cmp	r3, #64	; 0x40
 8002266:	d012      	beq.n	800228e <USBD_StdDevReq+0x3a>
 8002268:	2b00      	cmp	r3, #0
 800226a:	f040 808d 	bne.w	8002388 <USBD_StdDevReq+0x134>
    switch (req->bRequest)
 800226e:	784b      	ldrb	r3, [r1, #1]
 8002270:	2b09      	cmp	r3, #9
 8002272:	f200 8088 	bhi.w	8002386 <USBD_StdDevReq+0x132>
 8002276:	e8df f013 	tbh	[pc, r3, lsl #1]
 800227a:	00df      	.short	0x00df
 800227c:	008600f9 	.word	0x008600f9
 8002280:	008600f2 	.word	0x008600f2
 8002284:	0013007a 	.word	0x0013007a
 8002288:	00ca0086 	.word	0x00ca0086
 800228c:	0098      	.short	0x0098
    pdev->pClass->Setup(pdev, req);
 800228e:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8002292:	4629      	mov	r1, r5
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	4620      	mov	r0, r4
 8002298:	4798      	blx	r3
}
 800229a:	2000      	movs	r0, #0
 800229c:	b003      	add	sp, #12
 800229e:	bd30      	pop	{r4, r5, pc}
  switch (req->wValue >> 8)
 80022a0:	884b      	ldrh	r3, [r1, #2]
 80022a2:	0a1a      	lsrs	r2, r3, #8
 80022a4:	3a01      	subs	r2, #1
 80022a6:	2a06      	cmp	r2, #6
 80022a8:	d86d      	bhi.n	8002386 <USBD_StdDevReq+0x132>
 80022aa:	e8df f002 	tbb	[pc, r2]
 80022ae:	2004      	.short	0x2004
 80022b0:	4d6c6c2d 	.word	0x4d6c6c2d
 80022b4:	56          	.byte	0x56
 80022b5:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80022b6:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 80022ba:	681b      	ldr	r3, [r3, #0]
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80022bc:	f10d 0106 	add.w	r1, sp, #6
 80022c0:	7c20      	ldrb	r0, [r4, #16]
 80022c2:	4798      	blx	r3
  if((len != 0U) && (req->wLength != 0U))
 80022c4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80022c8:	b152      	cbz	r2, 80022e0 <USBD_StdDevReq+0x8c>
 80022ca:	88eb      	ldrh	r3, [r5, #6]
 80022cc:	b143      	cbz	r3, 80022e0 <USBD_StdDevReq+0x8c>
    len = MIN(len, req->wLength);
 80022ce:	429a      	cmp	r2, r3
 80022d0:	bf28      	it	cs
 80022d2:	461a      	movcs	r2, r3
    USBD_CtlSendData (pdev, pbuf, len);
 80022d4:	4601      	mov	r1, r0
 80022d6:	4620      	mov	r0, r4
    len = MIN(len, req->wLength);
 80022d8:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, pbuf, len);
 80022dc:	f000 f9bd 	bl	800265a <USBD_CtlSendData>
  if(req->wLength == 0U)
 80022e0:	88eb      	ldrh	r3, [r5, #6]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d1d9      	bne.n	800229a <USBD_StdDevReq+0x46>
    USBD_CtlSendStatus(pdev);
 80022e6:	4620      	mov	r0, r4
 80022e8:	f000 f9d4 	bl	8002694 <USBD_CtlSendStatus>
 80022ec:	e7d5      	b.n	800229a <USBD_StdDevReq+0x46>
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 80022ee:	7c02      	ldrb	r2, [r0, #16]
 80022f0:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80022f4:	b932      	cbnz	r2, 8002304 <USBD_StdDevReq+0xb0>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80022f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80022f8:	f10d 0006 	add.w	r0, sp, #6
 80022fc:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80022fe:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002300:	7043      	strb	r3, [r0, #1]
 8002302:	e7df      	b.n	80022c4 <USBD_StdDevReq+0x70>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8002304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002306:	e7f7      	b.n	80022f8 <USBD_StdDevReq+0xa4>
    switch ((uint8_t)(req->wValue))
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b05      	cmp	r3, #5
 800230c:	d83b      	bhi.n	8002386 <USBD_StdDevReq+0x132>
 800230e:	e8df f003 	tbb	[pc, r3]
 8002312:	0703      	.short	0x0703
 8002314:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8002318:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	e7cd      	b.n	80022bc <USBD_StdDevReq+0x68>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8002320:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	e7c9      	b.n	80022bc <USBD_StdDevReq+0x68>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8002328:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	e7c5      	b.n	80022bc <USBD_StdDevReq+0x68>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8002330:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	e7c1      	b.n	80022bc <USBD_StdDevReq+0x68>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8002338:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	e7bd      	b.n	80022bc <USBD_StdDevReq+0x68>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8002340:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8002344:	699b      	ldr	r3, [r3, #24]
 8002346:	e7b9      	b.n	80022bc <USBD_StdDevReq+0x68>
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8002348:	7c03      	ldrb	r3, [r0, #16]
 800234a:	b9e3      	cbnz	r3, 8002386 <USBD_StdDevReq+0x132>
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800234c:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8002350:	f10d 0006 	add.w	r0, sp, #6
 8002354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002356:	4798      	blx	r3
 8002358:	e7b4      	b.n	80022c4 <USBD_StdDevReq+0x70>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800235a:	7c03      	ldrb	r3, [r0, #16]
 800235c:	b99b      	cbnz	r3, 8002386 <USBD_StdDevReq+0x132>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800235e:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8002362:	f10d 0006 	add.w	r0, sp, #6
 8002366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002368:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800236a:	2307      	movs	r3, #7
 800236c:	e7c8      	b.n	8002300 <USBD_StdDevReq+0xac>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800236e:	888b      	ldrh	r3, [r1, #4]
 8002370:	b94b      	cbnz	r3, 8002386 <USBD_StdDevReq+0x132>
 8002372:	88cb      	ldrh	r3, [r1, #6]
 8002374:	b93b      	cbnz	r3, 8002386 <USBD_StdDevReq+0x132>
 8002376:	884d      	ldrh	r5, [r1, #2]
 8002378:	2d7f      	cmp	r5, #127	; 0x7f
 800237a:	d804      	bhi.n	8002386 <USBD_StdDevReq+0x132>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800237c:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8002380:	b2e9      	uxtb	r1, r5
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002382:	2b03      	cmp	r3, #3
 8002384:	d103      	bne.n	800238e <USBD_StdDevReq+0x13a>
      USBD_CtlError(pdev, req);
 8002386:	4620      	mov	r0, r4
    USBD_CtlError(pdev, req);
 8002388:	f7ff ff59 	bl	800223e <USBD_CtlError.constprop.1>
    break;
 800238c:	e785      	b.n	800229a <USBD_StdDevReq+0x46>
      pdev->dev_address = dev_addr;
 800238e:	f880 1276 	strb.w	r1, [r0, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8002392:	f000 fc11 	bl	8002bb8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8002396:	4620      	mov	r0, r4
 8002398:	f000 f97c 	bl	8002694 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800239c:	b11d      	cbz	r5, 80023a6 <USBD_StdDevReq+0x152>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800239e:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 80023a0:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 80023a4:	e779      	b.n	800229a <USBD_StdDevReq+0x46>
 80023a6:	2301      	movs	r3, #1
 80023a8:	e7fa      	b.n	80023a0 <USBD_StdDevReq+0x14c>
  cfgidx = (uint8_t)(req->wValue);
 80023aa:	7889      	ldrb	r1, [r1, #2]
 80023ac:	4d35      	ldr	r5, [pc, #212]	; (8002484 <USBD_StdDevReq+0x230>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80023ae:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 80023b0:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80023b2:	d8e8      	bhi.n	8002386 <USBD_StdDevReq+0x132>
    switch (pdev->dev_state)
 80023b4:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d008      	beq.n	80023ce <USBD_StdDevReq+0x17a>
 80023bc:	2b03      	cmp	r3, #3
 80023be:	d014      	beq.n	80023ea <USBD_StdDevReq+0x196>
      USBD_CtlError(pdev, req);
 80023c0:	f7ff ff3d 	bl	800223e <USBD_CtlError.constprop.1>
      USBD_ClrClassConfig(pdev, cfgidx);
 80023c4:	7829      	ldrb	r1, [r5, #0]
 80023c6:	4620      	mov	r0, r4
 80023c8:	f7ff fe2b 	bl	8002022 <USBD_ClrClassConfig>
 80023cc:	e765      	b.n	800229a <USBD_StdDevReq+0x46>
      if (cfgidx)
 80023ce:	2900      	cmp	r1, #0
 80023d0:	d089      	beq.n	80022e6 <USBD_StdDevReq+0x92>
        pdev->dev_config = cfgidx;
 80023d2:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80023d4:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 80023d6:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80023d8:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80023dc:	4620      	mov	r0, r4
 80023de:	f7ff fe15 	bl	800200c <USBD_SetClassConfig>
 80023e2:	2802      	cmp	r0, #2
 80023e4:	f47f af7f 	bne.w	80022e6 <USBD_StdDevReq+0x92>
 80023e8:	e7cd      	b.n	8002386 <USBD_StdDevReq+0x132>
      if (cfgidx == 0U)
 80023ea:	b931      	cbnz	r1, 80023fa <USBD_StdDevReq+0x1a6>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80023ec:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;
 80023ee:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80023f0:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        USBD_ClrClassConfig(pdev, cfgidx);
 80023f4:	f7ff fe15 	bl	8002022 <USBD_ClrClassConfig>
 80023f8:	e775      	b.n	80022e6 <USBD_StdDevReq+0x92>
      else if (cfgidx != pdev->dev_config)
 80023fa:	6841      	ldr	r1, [r0, #4]
 80023fc:	2901      	cmp	r1, #1
 80023fe:	f43f af72 	beq.w	80022e6 <USBD_StdDevReq+0x92>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8002402:	b2c9      	uxtb	r1, r1
 8002404:	f7ff fe0d 	bl	8002022 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8002408:	7829      	ldrb	r1, [r5, #0]
 800240a:	6061      	str	r1, [r4, #4]
 800240c:	e7e6      	b.n	80023dc <USBD_StdDevReq+0x188>
  if (req->wLength != 1U)
 800240e:	88ca      	ldrh	r2, [r1, #6]
 8002410:	2a01      	cmp	r2, #1
 8002412:	d1b8      	bne.n	8002386 <USBD_StdDevReq+0x132>
    switch (pdev->dev_state)
 8002414:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8002418:	2b00      	cmp	r3, #0
 800241a:	d0b4      	beq.n	8002386 <USBD_StdDevReq+0x132>
 800241c:	2b02      	cmp	r3, #2
 800241e:	d903      	bls.n	8002428 <USBD_StdDevReq+0x1d4>
 8002420:	2b03      	cmp	r3, #3
 8002422:	d1b0      	bne.n	8002386 <USBD_StdDevReq+0x132>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8002424:	1d01      	adds	r1, r0, #4
 8002426:	e003      	b.n	8002430 <USBD_StdDevReq+0x1dc>
      pdev->dev_default_config = 0U;
 8002428:	4601      	mov	r1, r0
 800242a:	2300      	movs	r3, #0
 800242c:	f841 3f08 	str.w	r3, [r1, #8]!
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8002430:	4620      	mov	r0, r4
 8002432:	f000 f912 	bl	800265a <USBD_CtlSendData>
 8002436:	e730      	b.n	800229a <USBD_StdDevReq+0x46>
  switch (pdev->dev_state)
 8002438:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800243c:	3b01      	subs	r3, #1
 800243e:	2b02      	cmp	r3, #2
 8002440:	d8a1      	bhi.n	8002386 <USBD_StdDevReq+0x132>
    if(req->wLength != 0x2U)
 8002442:	88cb      	ldrh	r3, [r1, #6]
 8002444:	2b02      	cmp	r3, #2
 8002446:	d19e      	bne.n	8002386 <USBD_StdDevReq+0x132>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8002448:	2301      	movs	r3, #1
 800244a:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup)
 800244c:	f8d0 327c 	ldr.w	r3, [r0, #636]	; 0x27c
 8002450:	b10b      	cbz	r3, 8002456 <USBD_StdDevReq+0x202>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8002452:	2303      	movs	r3, #3
 8002454:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8002456:	2202      	movs	r2, #2
 8002458:	f104 010c 	add.w	r1, r4, #12
 800245c:	e7e8      	b.n	8002430 <USBD_StdDevReq+0x1dc>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800245e:	884b      	ldrh	r3, [r1, #2]
 8002460:	2b01      	cmp	r3, #1
 8002462:	f47f af1a 	bne.w	800229a <USBD_StdDevReq+0x46>
    pdev->dev_remote_wakeup = 1U;
 8002466:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
 800246a:	e73c      	b.n	80022e6 <USBD_StdDevReq+0x92>
  switch (pdev->dev_state)
 800246c:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8002470:	3b01      	subs	r3, #1
 8002472:	2b02      	cmp	r3, #2
 8002474:	d887      	bhi.n	8002386 <USBD_StdDevReq+0x132>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8002476:	884b      	ldrh	r3, [r1, #2]
 8002478:	2b01      	cmp	r3, #1
 800247a:	f47f af0e 	bne.w	800229a <USBD_StdDevReq+0x46>
      pdev->dev_remote_wakeup = 0U;
 800247e:	2300      	movs	r3, #0
 8002480:	e7f1      	b.n	8002466 <USBD_StdDevReq+0x212>
 8002482:	bf00      	nop
 8002484:	20000168 	.word	0x20000168

08002488 <USBD_StdItfReq>:
{
 8002488:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800248a:	780b      	ldrb	r3, [r1, #0]
{
 800248c:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800248e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8002492:	2b20      	cmp	r3, #32
{
 8002494:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002496:	d002      	beq.n	800249e <USBD_StdItfReq+0x16>
 8002498:	2b40      	cmp	r3, #64	; 0x40
 800249a:	d000      	beq.n	800249e <USBD_StdItfReq+0x16>
 800249c:	b9b3      	cbnz	r3, 80024cc <USBD_StdItfReq+0x44>
    switch (pdev->dev_state)
 800249e:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 80024a2:	3b01      	subs	r3, #1
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d810      	bhi.n	80024ca <USBD_StdItfReq+0x42>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80024a8:	792b      	ldrb	r3, [r5, #4]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d80d      	bhi.n	80024ca <USBD_StdItfReq+0x42>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80024ae:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 80024b2:	4629      	mov	r1, r5
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	4620      	mov	r0, r4
 80024b8:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 80024ba:	88eb      	ldrh	r3, [r5, #6]
 80024bc:	b91b      	cbnz	r3, 80024c6 <USBD_StdItfReq+0x3e>
 80024be:	b910      	cbnz	r0, 80024c6 <USBD_StdItfReq+0x3e>
          USBD_CtlSendStatus(pdev);
 80024c0:	4620      	mov	r0, r4
 80024c2:	f000 f8e7 	bl	8002694 <USBD_CtlSendStatus>
}
 80024c6:	2000      	movs	r0, #0
 80024c8:	bd38      	pop	{r3, r4, r5, pc}
      USBD_CtlError(pdev, req);
 80024ca:	4620      	mov	r0, r4
    USBD_CtlError(pdev, req);
 80024cc:	f7ff feb7 	bl	800223e <USBD_CtlError.constprop.1>
    break;
 80024d0:	e7f9      	b.n	80024c6 <USBD_StdItfReq+0x3e>

080024d2 <USBD_StdEPReq>:
{
 80024d2:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80024d4:	780a      	ldrb	r2, [r1, #0]
{
 80024d6:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80024d8:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80024dc:	2a20      	cmp	r2, #32
{
 80024de:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80024e0:	d013      	beq.n	800250a <USBD_StdEPReq+0x38>
 80024e2:	2a40      	cmp	r2, #64	; 0x40
 80024e4:	d011      	beq.n	800250a <USBD_StdEPReq+0x38>
 80024e6:	b96a      	cbnz	r2, 8002504 <USBD_StdEPReq+0x32>
    switch (req->bRequest)
 80024e8:	785d      	ldrb	r5, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 80024ea:	888a      	ldrh	r2, [r1, #4]
    switch (req->bRequest)
 80024ec:	2d01      	cmp	r5, #1
  ep_addr  = LOBYTE(req->wIndex);
 80024ee:	b2d1      	uxtb	r1, r2
    switch (req->bRequest)
 80024f0:	d01f      	beq.n	8002532 <USBD_StdEPReq+0x60>
 80024f2:	d335      	bcc.n	8002560 <USBD_StdEPReq+0x8e>
 80024f4:	2d03      	cmp	r5, #3
 80024f6:	d105      	bne.n	8002504 <USBD_StdEPReq+0x32>
      switch (pdev->dev_state)
 80024f8:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 80024fc:	2a02      	cmp	r2, #2
 80024fe:	d026      	beq.n	800254e <USBD_StdEPReq+0x7c>
 8002500:	2a03      	cmp	r2, #3
 8002502:	d00a      	beq.n	800251a <USBD_StdEPReq+0x48>
    USBD_CtlError(pdev, req);
 8002504:	f7ff fe9b 	bl	800223e <USBD_CtlError.constprop.1>
    break;
 8002508:	e005      	b.n	8002516 <USBD_StdEPReq+0x44>
    pdev->pClass->Setup (pdev, req);
 800250a:	f8d4 228c 	ldr.w	r2, [r4, #652]	; 0x28c
 800250e:	4619      	mov	r1, r3
 8002510:	6892      	ldr	r2, [r2, #8]
 8002512:	4620      	mov	r0, r4
 8002514:	4790      	blx	r2
}
 8002516:	2000      	movs	r0, #0
 8002518:	bd38      	pop	{r3, r4, r5, pc}
        if (req->wValue == USB_FEATURE_EP_HALT)
 800251a:	885a      	ldrh	r2, [r3, #2]
 800251c:	b92a      	cbnz	r2, 800252a <USBD_StdEPReq+0x58>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800251e:	064a      	lsls	r2, r1, #25
 8002520:	d003      	beq.n	800252a <USBD_StdEPReq+0x58>
 8002522:	88db      	ldrh	r3, [r3, #6]
 8002524:	b90b      	cbnz	r3, 800252a <USBD_StdEPReq+0x58>
            USBD_LL_StallEP(pdev, ep_addr);
 8002526:	f000 fb1b 	bl	8002b60 <USBD_LL_StallEP>
        USBD_CtlSendStatus(pdev);
 800252a:	4620      	mov	r0, r4
 800252c:	f000 f8b2 	bl	8002694 <USBD_CtlSendStatus>
        break;
 8002530:	e7f1      	b.n	8002516 <USBD_StdEPReq+0x44>
      switch (pdev->dev_state)
 8002532:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8002536:	2a02      	cmp	r2, #2
 8002538:	d009      	beq.n	800254e <USBD_StdEPReq+0x7c>
 800253a:	2a03      	cmp	r2, #3
 800253c:	d1e2      	bne.n	8002504 <USBD_StdEPReq+0x32>
        if (req->wValue == USB_FEATURE_EP_HALT)
 800253e:	885b      	ldrh	r3, [r3, #2]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d1e8      	bne.n	8002516 <USBD_StdEPReq+0x44>
          if ((ep_addr & 0x7FU) != 0x00U)
 8002544:	064d      	lsls	r5, r1, #25
 8002546:	d0f0      	beq.n	800252a <USBD_StdEPReq+0x58>
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8002548:	f000 fb18 	bl	8002b7c <USBD_LL_ClearStallEP>
 800254c:	e7ed      	b.n	800252a <USBD_StdEPReq+0x58>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800254e:	064b      	lsls	r3, r1, #25
 8002550:	d016      	beq.n	8002580 <USBD_StdEPReq+0xae>
          USBD_LL_StallEP(pdev, ep_addr);
 8002552:	f000 fb05 	bl	8002b60 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8002556:	2180      	movs	r1, #128	; 0x80
 8002558:	4620      	mov	r0, r4
 800255a:	f000 fb01 	bl	8002b60 <USBD_LL_StallEP>
 800255e:	e7da      	b.n	8002516 <USBD_StdEPReq+0x44>
      switch (pdev->dev_state)
 8002560:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8002564:	2b02      	cmp	r3, #2
 8002566:	d00d      	beq.n	8002584 <USBD_StdEPReq+0xb2>
 8002568:	2b03      	cmp	r3, #3
 800256a:	d1cb      	bne.n	8002504 <USBD_StdEPReq+0x32>
 800256c:	2314      	movs	r3, #20
        if((ep_addr & 0x80U) == 0x80U)
 800256e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002572:	f001 020f 	and.w	r2, r1, #15
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8002576:	fb03 0202 	mla	r2, r3, r2, r0
        if((ep_addr & 0x80U) == 0x80U)
 800257a:	d014      	beq.n	80025a6 <USBD_StdEPReq+0xd4>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800257c:	6992      	ldr	r2, [r2, #24]
 800257e:	b9ea      	cbnz	r2, 80025bc <USBD_StdEPReq+0xea>
          USBD_CtlError(pdev, req);
 8002580:	4620      	mov	r0, r4
 8002582:	e7bf      	b.n	8002504 <USBD_StdEPReq+0x32>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8002584:	0649      	lsls	r1, r1, #25
 8002586:	d1fb      	bne.n	8002580 <USBD_StdEPReq+0xae>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8002588:	0613      	lsls	r3, r2, #24
          pep->status = 0x0000U;
 800258a:	f04f 0300 	mov.w	r3, #0
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800258e:	f04f 0202 	mov.w	r2, #2
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8002592:	bf4c      	ite	mi
 8002594:	f100 0114 	addmi.w	r1, r0, #20
 8002598:	f500 71a0 	addpl.w	r1, r0, #320	; 0x140
          pep->status = 0x0000U;
 800259c:	600b      	str	r3, [r1, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800259e:	4620      	mov	r0, r4
 80025a0:	f000 f85b 	bl	800265a <USBD_CtlSendData>
          break;
 80025a4:	e7b7      	b.n	8002516 <USBD_StdEPReq+0x44>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80025a6:	f8d2 2144 	ldr.w	r2, [r2, #324]	; 0x144
 80025aa:	2a00      	cmp	r2, #0
 80025ac:	d0e8      	beq.n	8002580 <USBD_StdEPReq+0xae>
          &pdev->ep_out[ep_addr & 0x7FU];
 80025ae:	f001 057f 	and.w	r5, r1, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80025b2:	fb03 0505 	mla	r5, r3, r5, r0
 80025b6:	f505 75a0 	add.w	r5, r5, #320	; 0x140
 80025ba:	e004      	b.n	80025c6 <USBD_StdEPReq+0xf4>
 80025bc:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 80025c0:	fb05 3503 	mla	r5, r5, r3, r3
 80025c4:	4405      	add	r5, r0
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80025c6:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 80025ca:	d103      	bne.n	80025d4 <USBD_StdEPReq+0x102>
            pep->status = 0x0001U;
 80025cc:	602b      	str	r3, [r5, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80025ce:	2202      	movs	r2, #2
 80025d0:	4629      	mov	r1, r5
 80025d2:	e7e4      	b.n	800259e <USBD_StdEPReq+0xcc>
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 80025d4:	4620      	mov	r0, r4
 80025d6:	f000 fadf 	bl	8002b98 <USBD_LL_IsStallEP>
 80025da:	b108      	cbz	r0, 80025e0 <USBD_StdEPReq+0x10e>
            pep->status = 0x0001U;
 80025dc:	2301      	movs	r3, #1
 80025de:	e7f5      	b.n	80025cc <USBD_StdEPReq+0xfa>
            pep->status = 0x0000U;
 80025e0:	6028      	str	r0, [r5, #0]
 80025e2:	e7f4      	b.n	80025ce <USBD_StdEPReq+0xfc>

080025e4 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 80025e4:	780b      	ldrb	r3, [r1, #0]
 80025e6:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80025e8:	784b      	ldrb	r3, [r1, #1]
 80025ea:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80025ec:	78ca      	ldrb	r2, [r1, #3]
 80025ee:	788b      	ldrb	r3, [r1, #2]
 80025f0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80025f4:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80025f6:	794a      	ldrb	r2, [r1, #5]
 80025f8:	790b      	ldrb	r3, [r1, #4]
 80025fa:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80025fe:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8002600:	79ca      	ldrb	r2, [r1, #7]
 8002602:	798b      	ldrb	r3, [r1, #6]
 8002604:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002608:	80c3      	strh	r3, [r0, #6]
 800260a:	4770      	bx	lr

0800260c <USBD_CtlError>:
{
 800260c:	b510      	push	{r4, lr}
 800260e:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 8002610:	2180      	movs	r1, #128	; 0x80
 8002612:	f000 faa5 	bl	8002b60 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8002616:	4620      	mov	r0, r4
}
 8002618:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0U);
 800261c:	2100      	movs	r1, #0
 800261e:	f000 ba9f 	b.w	8002b60 <USBD_LL_StallEP>

08002622 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8002622:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 8002624:	b188      	cbz	r0, 800264a <USBD_GetString+0x28>
 8002626:	4605      	mov	r5, r0
 8002628:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0U;

    while (*buf != '\0')
 800262a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800262e:	b2db      	uxtb	r3, r3
 8002630:	2c00      	cmp	r4, #0
 8002632:	d1f9      	bne.n	8002628 <USBD_GetString+0x6>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8002634:	3301      	adds	r3, #1
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800263a:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800263c:	2303      	movs	r3, #3
 800263e:	704b      	strb	r3, [r1, #1]
 8002640:	2302      	movs	r3, #2
 8002642:	3801      	subs	r0, #1
    while (*desc != '\0')
 8002644:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8002648:	b905      	cbnz	r5, 800264c <USBD_GetString+0x2a>
 800264a:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 800264c:	1c5a      	adds	r2, r3, #1
 800264e:	54cd      	strb	r5, [r1, r3]
 8002650:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 8002652:	3302      	adds	r3, #2
 8002654:	b2db      	uxtb	r3, r3
 8002656:	548c      	strb	r4, [r1, r2]
 8002658:	e7f4      	b.n	8002644 <USBD_GetString+0x22>

0800265a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800265a:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800265c:	2202      	movs	r2, #2
{
 800265e:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8002660:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8002664:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8002666:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 8002668:	6203      	str	r3, [r0, #32]
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800266a:	2100      	movs	r1, #0
 800266c:	f000 fab2 	bl	8002bd4 <USBD_LL_Transmit>

  return USBD_OK;
}
 8002670:	2000      	movs	r0, #0
 8002672:	bd10      	pop	{r4, pc}

08002674 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8002674:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8002676:	4613      	mov	r3, r2
 8002678:	460a      	mov	r2, r1
 800267a:	2100      	movs	r1, #0
 800267c:	f000 faaa 	bl	8002bd4 <USBD_LL_Transmit>

  return USBD_OK;
}
 8002680:	2000      	movs	r0, #0
 8002682:	bd08      	pop	{r3, pc}

08002684 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8002684:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8002686:	4613      	mov	r3, r2
 8002688:	460a      	mov	r2, r1
 800268a:	2100      	movs	r1, #0
 800268c:	f000 fab0 	bl	8002bf0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8002690:	2000      	movs	r0, #0
 8002692:	bd08      	pop	{r3, pc}

08002694 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8002694:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8002696:	2304      	movs	r3, #4
 8002698:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800269c:	2300      	movs	r3, #0
 800269e:	461a      	mov	r2, r3
 80026a0:	4619      	mov	r1, r3
 80026a2:	f000 fa97 	bl	8002bd4 <USBD_LL_Transmit>

  return USBD_OK;
}
 80026a6:	2000      	movs	r0, #0
 80026a8:	bd08      	pop	{r3, pc}

080026aa <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 80026aa:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80026ac:	2305      	movs	r3, #5
 80026ae:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80026b2:	2300      	movs	r3, #0
 80026b4:	461a      	mov	r2, r3
 80026b6:	4619      	mov	r1, r3
 80026b8:	f000 fa9a 	bl	8002bf0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80026bc:	2000      	movs	r0, #0
 80026be:	bd08      	pop	{r3, pc}

080026c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80026c0:	b510      	push	{r4, lr}
 80026c2:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026c4:	2214      	movs	r2, #20
 80026c6:	2100      	movs	r1, #0
 80026c8:	a803      	add	r0, sp, #12
 80026ca:	f000 fb67 	bl	8002d9c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80026ce:	4b17      	ldr	r3, [pc, #92]	; (800272c <MX_GPIO_Init+0x6c>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80026d0:	4c17      	ldr	r4, [pc, #92]	; (8002730 <MX_GPIO_Init+0x70>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80026d2:	69da      	ldr	r2, [r3, #28]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80026d4:	4620      	mov	r0, r4
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80026d6:	f042 0210 	orr.w	r2, r2, #16
 80026da:	61da      	str	r2, [r3, #28]
 80026dc:	69da      	ldr	r2, [r3, #28]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80026de:	2104      	movs	r1, #4
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80026e0:	f002 0210 	and.w	r2, r2, #16
 80026e4:	9200      	str	r2, [sp, #0]
 80026e6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80026e8:	69da      	ldr	r2, [r3, #28]
 80026ea:	f042 0220 	orr.w	r2, r2, #32
 80026ee:	61da      	str	r2, [r3, #28]
 80026f0:	69da      	ldr	r2, [r3, #28]
 80026f2:	f002 0220 	and.w	r2, r2, #32
 80026f6:	9201      	str	r2, [sp, #4]
 80026f8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026fa:	69da      	ldr	r2, [r3, #28]
 80026fc:	f042 0201 	orr.w	r2, r2, #1
 8002700:	61da      	str	r2, [r3, #28]
 8002702:	69db      	ldr	r3, [r3, #28]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002704:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	9302      	str	r3, [sp, #8]
 800270c:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800270e:	f7fd feed 	bl	80004ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002712:	2304      	movs	r3, #4
 8002714:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002716:	2301      	movs	r3, #1
 8002718:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271a:	2300      	movs	r3, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800271c:	a903      	add	r1, sp, #12
 800271e:	4620      	mov	r0, r4
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002720:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002722:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002724:	f7fd fe14 	bl	8000350 <HAL_GPIO_Init>

}
 8002728:	b008      	add	sp, #32
 800272a:	bd10      	pop	{r4, pc}
 800272c:	40023800 	.word	0x40023800
 8002730:	40021000 	.word	0x40021000

08002734 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002734:	b510      	push	{r4, lr}
 8002736:	b092      	sub	sp, #72	; 0x48
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002738:	2234      	movs	r2, #52	; 0x34
 800273a:	2100      	movs	r1, #0
 800273c:	a805      	add	r0, sp, #20
 800273e:	f000 fb2d 	bl	8002d9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002742:	2100      	movs	r1, #0
 8002744:	2214      	movs	r2, #20
 8002746:	4668      	mov	r0, sp
 8002748:	f000 fb28 	bl	8002d9c <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800274c:	4a12      	ldr	r2, [pc, #72]	; (8002798 <SystemClock_Config+0x64>)
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800274e:	2401      	movs	r4, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002750:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002752:	a805      	add	r0, sp, #20
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002754:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8002758:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800275c:	6013      	str	r3, [r2, #0]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800275e:	2302      	movs	r3, #2
 8002760:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002762:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002766:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8002768:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800276c:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 800276e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002772:	9405      	str	r4, [sp, #20]
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8002774:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002776:	9406      	str	r4, [sp, #24]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002778:	f7fe fa9e 	bl	8000cb8 <HAL_RCC_OscConfig>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800277c:	200f      	movs	r0, #15
 800277e:	2303      	movs	r3, #3
 8002780:	e88d 0009 	stmia.w	sp, {r0, r3}
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002784:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002786:	4621      	mov	r1, r4
 8002788:	4668      	mov	r0, sp
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800278a:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800278c:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800278e:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002790:	f7fe fcd8 	bl	8001144 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8002794:	b012      	add	sp, #72	; 0x48
 8002796:	bd10      	pop	{r4, pc}
 8002798:	40007000 	.word	0x40007000

0800279c <main>:
{
 800279c:	b507      	push	{r0, r1, r2, lr}
  HAL_Init();
 800279e:	f7fd fd13 	bl	80001c8 <HAL_Init>
  SystemClock_Config();
 80027a2:	f7ff ffc7 	bl	8002734 <SystemClock_Config>
  MX_GPIO_Init();
 80027a6:	f7ff ff8b 	bl	80026c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80027aa:	f000 f8a3 	bl	80028f4 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 80027ae:	f000 f8f9 	bl	80029a4 <MX_USB_DEVICE_Init>
  HAL_UART_Receive_IT(&huart2, &UartBuffer, 1);
 80027b2:	2201      	movs	r2, #1
 80027b4:	4913      	ldr	r1, [pc, #76]	; (8002804 <main+0x68>)
 80027b6:	4814      	ldr	r0, [pc, #80]	; (8002808 <main+0x6c>)
 80027b8:	f7fe fe42 	bl	8001440 <HAL_UART_Receive_IT>
  struct Raport Raport_Clicked = {0, 0, 0};
 80027bc:	2300      	movs	r3, #0
 80027be:	f88d 3001 	strb.w	r3, [sp, #1]
 80027c2:	f88d 3002 	strb.w	r3, [sp, #2]
  struct Raport Raport_Idle = {0, 0, 0};
 80027c6:	f88d 3004 	strb.w	r3, [sp, #4]
 80027ca:	f88d 3005 	strb.w	r3, [sp, #5]
 80027ce:	f88d 3006 	strb.w	r3, [sp, #6]
  Raport_Clicked.buttons = 0x01;
 80027d2:	2301      	movs	r3, #1
	  while(received);
 80027d4:	4c0d      	ldr	r4, [pc, #52]	; (800280c <main+0x70>)
	  USBD_HID_SendReport(&hUsbDeviceFS, &Raport_Clicked, 3);
 80027d6:	4d0e      	ldr	r5, [pc, #56]	; (8002810 <main+0x74>)
  Raport_Clicked.buttons = 0x01;
 80027d8:	f88d 3000 	strb.w	r3, [sp]
	  while(received);
 80027dc:	7823      	ldrb	r3, [r4, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d1fc      	bne.n	80027dc <main+0x40>
	  USBD_HID_SendReport(&hUsbDeviceFS, &Raport_Clicked, 3);
 80027e2:	2203      	movs	r2, #3
 80027e4:	4669      	mov	r1, sp
 80027e6:	4628      	mov	r0, r5
 80027e8:	f7ff fbdd 	bl	8001fa6 <USBD_HID_SendReport>
	  HAL_Delay(20);
 80027ec:	2014      	movs	r0, #20
 80027ee:	f7fd fd0d 	bl	800020c <HAL_Delay>
	  USBD_HID_SendReport(&hUsbDeviceFS, &Raport_Idle , 3);
 80027f2:	2203      	movs	r2, #3
 80027f4:	a901      	add	r1, sp, #4
 80027f6:	4628      	mov	r0, r5
 80027f8:	f7ff fbd5 	bl	8001fa6 <USBD_HID_SendReport>
	  received = 1;
 80027fc:	2301      	movs	r3, #1
 80027fe:	7023      	strb	r3, [r4, #0]
	  while(received);
 8002800:	e7ec      	b.n	80027dc <main+0x40>
 8002802:	bf00      	nop
 8002804:	20000169 	.word	0x20000169
 8002808:	20000184 	.word	0x20000184
 800280c:	200000f6 	.word	0x200000f6
 8002810:	200001c4 	.word	0x200001c4

08002814 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
	void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
	{
		if (UartBuffer == 85){
 8002814:	4b05      	ldr	r3, [pc, #20]	; (800282c <HAL_UART_RxCpltCallback+0x18>)
			received = 0;
			}
		HAL_UART_Receive_IT(&huart2, &UartBuffer, 1);
 8002816:	4905      	ldr	r1, [pc, #20]	; (800282c <HAL_UART_RxCpltCallback+0x18>)
		if (UartBuffer == 85){
 8002818:	781b      	ldrb	r3, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &UartBuffer, 1);
 800281a:	4805      	ldr	r0, [pc, #20]	; (8002830 <HAL_UART_RxCpltCallback+0x1c>)
		if (UartBuffer == 85){
 800281c:	2b55      	cmp	r3, #85	; 0x55
			received = 0;
 800281e:	bf02      	ittt	eq
 8002820:	2200      	moveq	r2, #0
 8002822:	4b04      	ldreq	r3, [pc, #16]	; (8002834 <HAL_UART_RxCpltCallback+0x20>)
 8002824:	701a      	strbeq	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &UartBuffer, 1);
 8002826:	2201      	movs	r2, #1
 8002828:	f7fe be0a 	b.w	8001440 <HAL_UART_Receive_IT>
 800282c:	20000169 	.word	0x20000169
 8002830:	20000184 	.word	0x20000184
 8002834:	200000f6 	.word	0x200000f6

08002838 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002838:	4770      	bx	lr
	...

0800283c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800283c:	4b0f      	ldr	r3, [pc, #60]	; (800287c <HAL_MspInit+0x40>)
{
 800283e:	b084      	sub	sp, #16
  __HAL_RCC_COMP_CLK_ENABLE();
 8002840:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002842:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002846:	625a      	str	r2, [r3, #36]	; 0x24
 8002848:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800284a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800284e:	9201      	str	r2, [sp, #4]
 8002850:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002852:	6a1a      	ldr	r2, [r3, #32]
 8002854:	f042 0201 	orr.w	r2, r2, #1
 8002858:	621a      	str	r2, [r3, #32]
 800285a:	6a1a      	ldr	r2, [r3, #32]
 800285c:	f002 0201 	and.w	r2, r2, #1
 8002860:	9202      	str	r2, [sp, #8]
 8002862:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002864:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002866:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800286a:	625a      	str	r2, [r3, #36]	; 0x24
 800286c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002872:	9303      	str	r3, [sp, #12]
 8002874:	9b03      	ldr	r3, [sp, #12]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002876:	b004      	add	sp, #16
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	40023800 	.word	0x40023800

08002880 <NMI_Handler>:
 8002880:	4770      	bx	lr

08002882 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002882:	e7fe      	b.n	8002882 <HardFault_Handler>

08002884 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002884:	e7fe      	b.n	8002884 <MemManage_Handler>

08002886 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002886:	e7fe      	b.n	8002886 <BusFault_Handler>

08002888 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002888:	e7fe      	b.n	8002888 <UsageFault_Handler>

0800288a <SVC_Handler>:
 800288a:	4770      	bx	lr

0800288c <DebugMon_Handler>:
 800288c:	4770      	bx	lr

0800288e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800288e:	4770      	bx	lr

08002890 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002890:	f7fd bcaa 	b.w	80001e8 <HAL_IncTick>

08002894 <USB_LP_IRQHandler>:
void USB_LP_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002894:	4801      	ldr	r0, [pc, #4]	; (800289c <USB_LP_IRQHandler+0x8>)
 8002896:	f7fd bf3d 	b.w	8000714 <HAL_PCD_IRQHandler>
 800289a:	bf00      	nop
 800289c:	20000460 	.word	0x20000460

080028a0 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80028a0:	4801      	ldr	r0, [pc, #4]	; (80028a8 <USART2_IRQHandler+0x8>)
 80028a2:	f7fe be35 	b.w	8001510 <HAL_UART_IRQHandler>
 80028a6:	bf00      	nop
 80028a8:	20000184 	.word	0x20000184

080028ac <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 80028ac:	4b0e      	ldr	r3, [pc, #56]	; (80028e8 <SystemInit+0x3c>)
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028b4:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 80028b6:	6899      	ldr	r1, [r3, #8]
 80028b8:	4a0c      	ldr	r2, [pc, #48]	; (80028ec <SystemInit+0x40>)
 80028ba:	400a      	ands	r2, r1
 80028bc:	609a      	str	r2, [r3, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 80028c4:	f022 1201 	bic.w	r2, r2, #65537	; 0x10001
 80028c8:	601a      	str	r2, [r3, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80028d0:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 80028d2:	689a      	ldr	r2, [r3, #8]
 80028d4:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 80028d8:	609a      	str	r2, [r3, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 80028da:	2200      	movs	r2, #0
 80028dc:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80028de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80028e2:	4b03      	ldr	r3, [pc, #12]	; (80028f0 <SystemInit+0x44>)
 80028e4:	609a      	str	r2, [r3, #8]
 80028e6:	4770      	bx	lr
 80028e8:	40023800 	.word	0x40023800
 80028ec:	88ffc00c 	.word	0x88ffc00c
 80028f0:	e000ed00 	.word	0xe000ed00

080028f4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80028f4:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 1667;
 80028f6:	f240 6e83 	movw	lr, #1667	; 0x683
  huart2.Instance = USART2;
 80028fa:	480a      	ldr	r0, [pc, #40]	; (8002924 <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 1667;
 80028fc:	4b0a      	ldr	r3, [pc, #40]	; (8002928 <MX_USART2_UART_Init+0x34>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_RX;
 80028fe:	2204      	movs	r2, #4
  huart2.Init.BaudRate = 1667;
 8002900:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002904:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_RX;
 8002906:	6142      	str	r2, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002908:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800290a:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800290c:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800290e:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002910:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002912:	f7fe fd67 	bl	80013e4 <HAL_UART_Init>
 8002916:	b118      	cbz	r0, 8002920 <MX_USART2_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8002918:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800291c:	f7ff bf8c 	b.w	8002838 <Error_Handler>
 8002920:	bd08      	pop	{r3, pc}
 8002922:	bf00      	nop
 8002924:	20000184 	.word	0x20000184
 8002928:	40004400 	.word	0x40004400

0800292c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800292c:	b510      	push	{r4, lr}
 800292e:	4604      	mov	r4, r0
 8002930:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002932:	2214      	movs	r2, #20
 8002934:	2100      	movs	r1, #0
 8002936:	a803      	add	r0, sp, #12
 8002938:	f000 fa30 	bl	8002d9c <memset>
  if(uartHandle->Instance==USART2)
 800293c:	6822      	ldr	r2, [r4, #0]
 800293e:	4b17      	ldr	r3, [pc, #92]	; (800299c <HAL_UART_MspInit+0x70>)
 8002940:	429a      	cmp	r2, r3
 8002942:	d129      	bne.n	8002998 <HAL_UART_MspInit+0x6c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002944:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002948:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_2|RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800294a:	a903      	add	r1, sp, #12
    __HAL_RCC_USART2_CLK_ENABLE();
 800294c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002950:	625a      	str	r2, [r3, #36]	; 0x24
 8002952:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002954:	4812      	ldr	r0, [pc, #72]	; (80029a0 <HAL_UART_MspInit+0x74>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8002956:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800295a:	9201      	str	r2, [sp, #4]
 800295c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800295e:	69da      	ldr	r2, [r3, #28]
 8002960:	f042 0201 	orr.w	r2, r2, #1
 8002964:	61da      	str	r2, [r3, #28]
 8002966:	69db      	ldr	r3, [r3, #28]
 8002968:	f003 0301 	and.w	r3, r3, #1
 800296c:	9302      	str	r3, [sp, #8]
 800296e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|RX_Pin;
 8002970:	230c      	movs	r3, #12
 8002972:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002974:	2302      	movs	r3, #2
 8002976:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002978:	2301      	movs	r3, #1
 800297a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800297c:	2303      	movs	r3, #3
 800297e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002980:	2307      	movs	r3, #7
 8002982:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002984:	f7fd fce4 	bl	8000350 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002988:	2200      	movs	r2, #0
 800298a:	2026      	movs	r0, #38	; 0x26
 800298c:	4611      	mov	r1, r2
 800298e:	f7fd fc61 	bl	8000254 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002992:	2026      	movs	r0, #38	; 0x26
 8002994:	f7fd fc92 	bl	80002bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002998:	b008      	add	sp, #32
 800299a:	bd10      	pop	{r4, pc}
 800299c:	40004400 	.word	0x40004400
 80029a0:	40020000 	.word	0x40020000

080029a4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80029a4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80029a6:	2200      	movs	r2, #0
 80029a8:	490b      	ldr	r1, [pc, #44]	; (80029d8 <MX_USB_DEVICE_Init+0x34>)
 80029aa:	480c      	ldr	r0, [pc, #48]	; (80029dc <MX_USB_DEVICE_Init+0x38>)
 80029ac:	f7ff fb0d 	bl	8001fca <USBD_Init>
 80029b0:	b108      	cbz	r0, 80029b6 <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 80029b2:	f7ff ff41 	bl	8002838 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 80029b6:	490a      	ldr	r1, [pc, #40]	; (80029e0 <MX_USB_DEVICE_Init+0x3c>)
 80029b8:	4808      	ldr	r0, [pc, #32]	; (80029dc <MX_USB_DEVICE_Init+0x38>)
 80029ba:	f7ff fb1b 	bl	8001ff4 <USBD_RegisterClass>
 80029be:	b108      	cbz	r0, 80029c4 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 80029c0:	f7ff ff3a 	bl	8002838 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80029c4:	4805      	ldr	r0, [pc, #20]	; (80029dc <MX_USB_DEVICE_Init+0x38>)
 80029c6:	f7ff fb1c 	bl	8002002 <USBD_Start>
 80029ca:	b118      	cbz	r0, 80029d4 <MX_USB_DEVICE_Init+0x30>
    Error_Handler();
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80029cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80029d0:	f7ff bf32 	b.w	8002838 <Error_Handler>
 80029d4:	bd08      	pop	{r3, pc}
 80029d6:	bf00      	nop
 80029d8:	200000fc 	.word	0x200000fc
 80029dc:	200001c4 	.word	0x200001c4
 80029e0:	2000003c 	.word	0x2000003c

080029e4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80029e4:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 80029e6:	4b0d      	ldr	r3, [pc, #52]	; (8002a1c <HAL_PCD_MspInit+0x38>)
 80029e8:	6802      	ldr	r2, [r0, #0]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d112      	bne.n	8002a14 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80029ee:	f503 33ee 	add.w	r3, r3, #121856	; 0x1dc00
 80029f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 80029f4:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 80029f6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80029fa:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 80029fc:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 80029fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8002a00:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 8002a02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a06:	9301      	str	r3, [sp, #4]
 8002a08:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8002a0a:	f7fd fc23 	bl	8000254 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8002a0e:	2014      	movs	r0, #20
 8002a10:	f7fd fc54 	bl	80002bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8002a14:	b003      	add	sp, #12
 8002a16:	f85d fb04 	ldr.w	pc, [sp], #4
 8002a1a:	bf00      	nop
 8002a1c:	40005c00 	.word	0x40005c00

08002a20 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8002a20:	f500 710c 	add.w	r1, r0, #560	; 0x230
 8002a24:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8002a28:	f7ff bb02 	b.w	8002030 <USBD_LL_SetupStage>

08002a2c <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8002a2c:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8002a30:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8002a34:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8002a38:	f7ff bb27 	b.w	800208a <USBD_LL_DataOutStage>

08002a3c <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8002a3c:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8002a40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a42:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8002a46:	f7ff bb5a 	b.w	80020fe <USBD_LL_DataInStage>

08002a4a <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8002a4a:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8002a4e:	f7ff bbea 	b.w	8002226 <USBD_LL_SOF>

08002a52 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8002a52:	6883      	ldr	r3, [r0, #8]
{ 
 8002a54:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8002a56:	2b02      	cmp	r3, #2
{ 
 8002a58:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8002a5a:	d001      	beq.n	8002a60 <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 8002a5c:	f7ff feec 	bl	8002838 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8002a60:	f8d4 0268 	ldr.w	r0, [r4, #616]	; 0x268
 8002a64:	2101      	movs	r1, #1
 8002a66:	f7ff fbcc 	bl	8002202 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8002a6a:	f8d4 0268 	ldr.w	r0, [r4, #616]	; 0x268
}
 8002a6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8002a72:	f7ff bb9f 	b.w	80021b4 <USBD_LL_Reset>
	...

08002a78 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8002a78:	b510      	push	{r4, lr}
 8002a7a:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8002a7c:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8002a80:	f7ff fbc2 	bl	8002208 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8002a84:	69a3      	ldr	r3, [r4, #24]
 8002a86:	b123      	cbz	r3, 8002a92 <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8002a88:	4a02      	ldr	r2, [pc, #8]	; (8002a94 <HAL_PCD_SuspendCallback+0x1c>)
 8002a8a:	6913      	ldr	r3, [r2, #16]
 8002a8c:	f043 0306 	orr.w	r3, r3, #6
 8002a90:	6113      	str	r3, [r2, #16]
 8002a92:	bd10      	pop	{r4, pc}
 8002a94:	e000ed00 	.word	0xe000ed00

08002a98 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8002a98:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8002a9c:	f7ff bbbd 	b.w	800221a <USBD_LL_Resume>

08002aa0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8002aa0:	b510      	push	{r4, lr}
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8002aa2:	f04f 0e08 	mov.w	lr, #8
{
 8002aa6:	4604      	mov	r4, r0
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8002aa8:	4b15      	ldr	r3, [pc, #84]	; (8002b00 <USBD_LL_Init+0x60>)
  hpcd_USB_FS.pData = pdev;
 8002aaa:	4816      	ldr	r0, [pc, #88]	; (8002b04 <USBD_LL_Init+0x64>)
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8002aac:	e880 4008 	stmia.w	r0, {r3, lr}
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002ab4:	6103      	str	r3, [r0, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002ab6:	2300      	movs	r3, #0
  pdev->pData = &hpcd_USB_FS;
 8002ab8:	f8c4 0298 	str.w	r0, [r4, #664]	; 0x298
  hpcd_USB_FS.pData = pdev;
 8002abc:	f8c0 4268 	str.w	r4, [r0, #616]	; 0x268
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002ac0:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8002ac2:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8002ac4:	f7fd fd17 	bl	80004f6 <HAL_PCD_Init>
 8002ac8:	b108      	cbz	r0, 8002ace <USBD_LL_Init+0x2e>
  {
    Error_Handler( );
 8002aca:	f7ff feb5 	bl	8002838 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8002ace:	2200      	movs	r2, #0
 8002ad0:	2318      	movs	r3, #24
 8002ad2:	4611      	mov	r1, r2
 8002ad4:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 8002ad8:	f7fe f894 	bl	8000c04 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8002adc:	2358      	movs	r3, #88	; 0x58
 8002ade:	2200      	movs	r2, #0
 8002ae0:	2180      	movs	r1, #128	; 0x80
 8002ae2:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 8002ae6:	f7fe f88d 	bl	8000c04 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8002aea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002aee:	2200      	movs	r2, #0
 8002af0:	2181      	movs	r1, #129	; 0x81
 8002af2:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 8002af6:	f7fe f885 	bl	8000c04 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
}
 8002afa:	2000      	movs	r0, #0
 8002afc:	bd10      	pop	{r4, pc}
 8002afe:	bf00      	nop
 8002b00:	40005c00 	.word	0x40005c00
 8002b04:	20000460 	.word	0x20000460

08002b08 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8002b08:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8002b0a:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8002b0e:	f7fd fd4b 	bl	80005a8 <HAL_PCD_Start>
 8002b12:	2803      	cmp	r0, #3
 8002b14:	bf9a      	itte	ls
 8002b16:	4b02      	ldrls	r3, [pc, #8]	; (8002b20 <USBD_LL_Start+0x18>)
 8002b18:	5c18      	ldrbls	r0, [r3, r0]
 8002b1a:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8002b1c:	bd08      	pop	{r3, pc}
 8002b1e:	bf00      	nop
 8002b20:	08002de5 	.word	0x08002de5

08002b24 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8002b24:	b510      	push	{r4, lr}
 8002b26:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8002b28:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	4622      	mov	r2, r4
 8002b30:	f7fd fd65 	bl	80005fe <HAL_PCD_EP_Open>
 8002b34:	2803      	cmp	r0, #3
 8002b36:	bf9a      	itte	ls
 8002b38:	4b01      	ldrls	r3, [pc, #4]	; (8002b40 <USBD_LL_OpenEP+0x1c>)
 8002b3a:	5c18      	ldrbls	r0, [r3, r0]
 8002b3c:	2002      	movhi	r0, #2

  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;
}
 8002b3e:	bd10      	pop	{r4, pc}
 8002b40:	08002de5 	.word	0x08002de5

08002b44 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002b44:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8002b46:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8002b4a:	f7fd fd8b 	bl	8000664 <HAL_PCD_EP_Close>
 8002b4e:	2803      	cmp	r0, #3
 8002b50:	bf9a      	itte	ls
 8002b52:	4b02      	ldrls	r3, [pc, #8]	; (8002b5c <USBD_LL_CloseEP+0x18>)
 8002b54:	5c18      	ldrbls	r0, [r3, r0]
 8002b56:	2002      	movhi	r0, #2
      
  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;  
}
 8002b58:	bd08      	pop	{r3, pc}
 8002b5a:	bf00      	nop
 8002b5c:	08002de5 	.word	0x08002de5

08002b60 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002b60:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8002b62:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8002b66:	f7fd ffe7 	bl	8000b38 <HAL_PCD_EP_SetStall>
 8002b6a:	2803      	cmp	r0, #3
 8002b6c:	bf9a      	itte	ls
 8002b6e:	4b02      	ldrls	r3, [pc, #8]	; (8002b78 <USBD_LL_StallEP+0x18>)
 8002b70:	5c18      	ldrbls	r0, [r3, r0]
 8002b72:	2002      	movhi	r0, #2

  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;  
}
 8002b74:	bd08      	pop	{r3, pc}
 8002b76:	bf00      	nop
 8002b78:	08002de5 	.word	0x08002de5

08002b7c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002b7c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8002b7e:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8002b82:	f7fe f80d 	bl	8000ba0 <HAL_PCD_EP_ClrStall>
 8002b86:	2803      	cmp	r0, #3
 8002b88:	bf9a      	itte	ls
 8002b8a:	4b02      	ldrls	r3, [pc, #8]	; (8002b94 <USBD_LL_ClearStallEP+0x18>)
 8002b8c:	5c18      	ldrbls	r0, [r3, r0]
 8002b8e:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status; 
}
 8002b90:	bd08      	pop	{r3, pc}
 8002b92:	bf00      	nop
 8002b94:	08002de5 	.word	0x08002de5

08002b98 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8002b98:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8002b9a:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8002b9e:	bf45      	ittet	mi
 8002ba0:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 8002ba4:	eb03 1341 	addmi.w	r3, r3, r1, lsl #5
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8002ba8:	eb03 1341 	addpl.w	r3, r3, r1, lsl #5
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8002bac:	f893 002a 	ldrbmi.w	r0, [r3, #42]	; 0x2a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8002bb0:	bf58      	it	pl
 8002bb2:	f893 012a 	ldrbpl.w	r0, [r3, #298]	; 0x12a
  }
}
 8002bb6:	4770      	bx	lr

08002bb8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8002bb8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8002bba:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8002bbe:	f7fd fd0a 	bl	80005d6 <HAL_PCD_SetAddress>
 8002bc2:	2803      	cmp	r0, #3
 8002bc4:	bf9a      	itte	ls
 8002bc6:	4b02      	ldrls	r3, [pc, #8]	; (8002bd0 <USBD_LL_SetUSBAddress+0x18>)
 8002bc8:	5c18      	ldrbls	r0, [r3, r0]
 8002bca:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;  
}
 8002bcc:	bd08      	pop	{r3, pc}
 8002bce:	bf00      	nop
 8002bd0:	08002de5 	.word	0x08002de5

08002bd4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8002bd4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8002bd6:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8002bda:	f7fd fd84 	bl	80006e6 <HAL_PCD_EP_Transmit>
 8002bde:	2803      	cmp	r0, #3
 8002be0:	bf9a      	itte	ls
 8002be2:	4b02      	ldrls	r3, [pc, #8]	; (8002bec <USBD_LL_Transmit+0x18>)
 8002be4:	5c18      	ldrbls	r0, [r3, r0]
 8002be6:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;    
}
 8002be8:	bd08      	pop	{r3, pc}
 8002bea:	bf00      	nop
 8002bec:	08002de5 	.word	0x08002de5

08002bf0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8002bf0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8002bf2:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8002bf6:	f7fd fd5e 	bl	80006b6 <HAL_PCD_EP_Receive>
 8002bfa:	2803      	cmp	r0, #3
 8002bfc:	bf9a      	itte	ls
 8002bfe:	4b02      	ldrls	r3, [pc, #8]	; (8002c08 <USBD_LL_PrepareReceive+0x18>)
 8002c00:	5c18      	ldrbls	r0, [r3, r0]
 8002c02:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  	
  return usb_status; 
}
 8002c04:	bd08      	pop	{r3, pc}
 8002c06:	bf00      	nop
 8002c08:	08002de5 	.word	0x08002de5

08002c0c <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 8002c0c:	4800      	ldr	r0, [pc, #0]	; (8002c10 <USBD_static_malloc+0x4>)
 8002c0e:	4770      	bx	lr
 8002c10:	2000016c 	.word	0x2000016c

08002c14 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8002c14:	4770      	bx	lr
	...

08002c18 <USBD_FS_DeviceDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 8002c18:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8002c1a:	4801      	ldr	r0, [pc, #4]	; (8002c20 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8002c1c:	800b      	strh	r3, [r1, #0]
}
 8002c1e:	4770      	bx	lr
 8002c20:	20000118 	.word	0x20000118

08002c24 <USBD_FS_LangIDStrDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 8002c24:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8002c26:	4801      	ldr	r0, [pc, #4]	; (8002c2c <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8002c28:	800b      	strh	r3, [r1, #0]
}
 8002c2a:	4770      	bx	lr
 8002c2c:	2000012c 	.word	0x2000012c

08002c30 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8002c30:	2300      	movs	r3, #0
{
 8002c32:	b530      	push	{r4, r5, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8002c34:	461d      	mov	r5, r3
  for (idx = 0; idx < len; idx++)
 8002c36:	b2dc      	uxtb	r4, r3
 8002c38:	42a2      	cmp	r2, r4
 8002c3a:	d800      	bhi.n	8002c3e <IntToUnicode+0xe>
  }
}
 8002c3c:	bd30      	pop	{r4, r5, pc}
    if (((value >> 28)) < 0xA)
 8002c3e:	0f04      	lsrs	r4, r0, #28
 8002c40:	2c09      	cmp	r4, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8002c42:	bf94      	ite	ls
 8002c44:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8002c46:	3437      	addhi	r4, #55	; 0x37
 8002c48:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 8002c4c:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    value = value << 4;
 8002c50:	0100      	lsls	r0, r0, #4
    pbuf[2 * idx + 1] = 0;
 8002c52:	7065      	strb	r5, [r4, #1]
 8002c54:	3301      	adds	r3, #1
 8002c56:	e7ee      	b.n	8002c36 <IntToUnicode+0x6>

08002c58 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8002c58:	231a      	movs	r3, #26
{
 8002c5a:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8002c5c:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8002c5e:	4b09      	ldr	r3, [pc, #36]	; (8002c84 <USBD_FS_SerialStrDescriptor+0x2c>)
 8002c60:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8002c62:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 8002c64:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 8002c66:	18c0      	adds	r0, r0, r3
 8002c68:	d00a      	beq.n	8002c80 <USBD_FS_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8002c6a:	4b07      	ldr	r3, [pc, #28]	; (8002c88 <USBD_FS_SerialStrDescriptor+0x30>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8002c6c:	2208      	movs	r2, #8
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8002c6e:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8002c70:	4906      	ldr	r1, [pc, #24]	; (8002c8c <USBD_FS_SerialStrDescriptor+0x34>)
 8002c72:	f7ff ffdd 	bl	8002c30 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8002c76:	2204      	movs	r2, #4
 8002c78:	4905      	ldr	r1, [pc, #20]	; (8002c90 <USBD_FS_SerialStrDescriptor+0x38>)
 8002c7a:	4620      	mov	r0, r4
 8002c7c:	f7ff ffd8 	bl	8002c30 <IntToUnicode>
}
 8002c80:	4804      	ldr	r0, [pc, #16]	; (8002c94 <USBD_FS_SerialStrDescriptor+0x3c>)
 8002c82:	bd10      	pop	{r4, pc}
 8002c84:	1ff80050 	.word	0x1ff80050
 8002c88:	1ff80054 	.word	0x1ff80054
 8002c8c:	20000132 	.word	0x20000132
 8002c90:	20000142 	.word	0x20000142
 8002c94:	20000130 	.word	0x20000130

08002c98 <USBD_FS_ManufacturerStrDescriptor>:
{
 8002c98:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8002c9a:	4c04      	ldr	r4, [pc, #16]	; (8002cac <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8002c9c:	460a      	mov	r2, r1
 8002c9e:	4804      	ldr	r0, [pc, #16]	; (8002cb0 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8002ca0:	4621      	mov	r1, r4
 8002ca2:	f7ff fcbe 	bl	8002622 <USBD_GetString>
}
 8002ca6:	4620      	mov	r0, r4
 8002ca8:	bd10      	pop	{r4, pc}
 8002caa:	bf00      	nop
 8002cac:	200006cc 	.word	0x200006cc
 8002cb0:	08002e02 	.word	0x08002e02

08002cb4 <USBD_FS_ProductStrDescriptor>:
{
 8002cb4:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8002cb6:	4c04      	ldr	r4, [pc, #16]	; (8002cc8 <USBD_FS_ProductStrDescriptor+0x14>)
 8002cb8:	460a      	mov	r2, r1
 8002cba:	4804      	ldr	r0, [pc, #16]	; (8002ccc <USBD_FS_ProductStrDescriptor+0x18>)
 8002cbc:	4621      	mov	r1, r4
 8002cbe:	f7ff fcb0 	bl	8002622 <USBD_GetString>
}
 8002cc2:	4620      	mov	r0, r4
 8002cc4:	bd10      	pop	{r4, pc}
 8002cc6:	bf00      	nop
 8002cc8:	200006cc 	.word	0x200006cc
 8002ccc:	08002e17 	.word	0x08002e17

08002cd0 <USBD_FS_ConfigStrDescriptor>:
{
 8002cd0:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8002cd2:	4c04      	ldr	r4, [pc, #16]	; (8002ce4 <USBD_FS_ConfigStrDescriptor+0x14>)
 8002cd4:	460a      	mov	r2, r1
 8002cd6:	4804      	ldr	r0, [pc, #16]	; (8002ce8 <USBD_FS_ConfigStrDescriptor+0x18>)
 8002cd8:	4621      	mov	r1, r4
 8002cda:	f7ff fca2 	bl	8002622 <USBD_GetString>
}
 8002cde:	4620      	mov	r0, r4
 8002ce0:	bd10      	pop	{r4, pc}
 8002ce2:	bf00      	nop
 8002ce4:	200006cc 	.word	0x200006cc
 8002ce8:	08002de9 	.word	0x08002de9

08002cec <USBD_FS_InterfaceStrDescriptor>:
{
 8002cec:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8002cee:	4c04      	ldr	r4, [pc, #16]	; (8002d00 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8002cf0:	460a      	mov	r2, r1
 8002cf2:	4804      	ldr	r0, [pc, #16]	; (8002d04 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8002cf4:	4621      	mov	r1, r4
 8002cf6:	f7ff fc94 	bl	8002622 <USBD_GetString>
}
 8002cfa:	4620      	mov	r0, r4
 8002cfc:	bd10      	pop	{r4, pc}
 8002cfe:	bf00      	nop
 8002d00:	200006cc 	.word	0x200006cc
 8002d04:	08002df4 	.word	0x08002df4

08002d08 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002d08:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002d0a:	e003      	b.n	8002d14 <LoopCopyDataInit>

08002d0c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002d0c:	4b0b      	ldr	r3, [pc, #44]	; (8002d3c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002d0e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002d10:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002d12:	3104      	adds	r1, #4

08002d14 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002d14:	480a      	ldr	r0, [pc, #40]	; (8002d40 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002d16:	4b0b      	ldr	r3, [pc, #44]	; (8002d44 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002d18:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002d1a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002d1c:	d3f6      	bcc.n	8002d0c <CopyDataInit>
  ldr r2, =_sbss
 8002d1e:	4a0a      	ldr	r2, [pc, #40]	; (8002d48 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002d20:	e002      	b.n	8002d28 <LoopFillZerobss>

08002d22 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002d22:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002d24:	f842 3b04 	str.w	r3, [r2], #4

08002d28 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002d28:	4b08      	ldr	r3, [pc, #32]	; (8002d4c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002d2a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002d2c:	d3f9      	bcc.n	8002d22 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002d2e:	f7ff fdbd 	bl	80028ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d32:	f000 f80f 	bl	8002d54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d36:	f7ff fd31 	bl	800279c <main>
  bx lr
 8002d3a:	4770      	bx	lr
  ldr r3, =_sidata
 8002d3c:	08002e38 	.word	0x08002e38
  ldr r0, =_sdata
 8002d40:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002d44:	2000014c 	.word	0x2000014c
  ldr r2, =_sbss
 8002d48:	2000014c 	.word	0x2000014c
  ldr r3, = _ebss
 8002d4c:	200008cc 	.word	0x200008cc

08002d50 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d50:	e7fe      	b.n	8002d50 <ADC1_IRQHandler>
	...

08002d54 <__libc_init_array>:
 8002d54:	b570      	push	{r4, r5, r6, lr}
 8002d56:	2500      	movs	r5, #0
 8002d58:	4e0c      	ldr	r6, [pc, #48]	; (8002d8c <__libc_init_array+0x38>)
 8002d5a:	4c0d      	ldr	r4, [pc, #52]	; (8002d90 <__libc_init_array+0x3c>)
 8002d5c:	1ba4      	subs	r4, r4, r6
 8002d5e:	10a4      	asrs	r4, r4, #2
 8002d60:	42a5      	cmp	r5, r4
 8002d62:	d109      	bne.n	8002d78 <__libc_init_array+0x24>
 8002d64:	f000 f822 	bl	8002dac <_init>
 8002d68:	2500      	movs	r5, #0
 8002d6a:	4e0a      	ldr	r6, [pc, #40]	; (8002d94 <__libc_init_array+0x40>)
 8002d6c:	4c0a      	ldr	r4, [pc, #40]	; (8002d98 <__libc_init_array+0x44>)
 8002d6e:	1ba4      	subs	r4, r4, r6
 8002d70:	10a4      	asrs	r4, r4, #2
 8002d72:	42a5      	cmp	r5, r4
 8002d74:	d105      	bne.n	8002d82 <__libc_init_array+0x2e>
 8002d76:	bd70      	pop	{r4, r5, r6, pc}
 8002d78:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d7c:	4798      	blx	r3
 8002d7e:	3501      	adds	r5, #1
 8002d80:	e7ee      	b.n	8002d60 <__libc_init_array+0xc>
 8002d82:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d86:	4798      	blx	r3
 8002d88:	3501      	adds	r5, #1
 8002d8a:	e7f2      	b.n	8002d72 <__libc_init_array+0x1e>
 8002d8c:	08002e30 	.word	0x08002e30
 8002d90:	08002e30 	.word	0x08002e30
 8002d94:	08002e30 	.word	0x08002e30
 8002d98:	08002e34 	.word	0x08002e34

08002d9c <memset>:
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	4402      	add	r2, r0
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d100      	bne.n	8002da6 <memset+0xa>
 8002da4:	4770      	bx	lr
 8002da6:	f803 1b01 	strb.w	r1, [r3], #1
 8002daa:	e7f9      	b.n	8002da0 <memset+0x4>

08002dac <_init>:
 8002dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dae:	bf00      	nop
 8002db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002db2:	bc08      	pop	{r3}
 8002db4:	469e      	mov	lr, r3
 8002db6:	4770      	bx	lr

08002db8 <_fini>:
 8002db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dba:	bf00      	nop
 8002dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dbe:	bc08      	pop	{r3}
 8002dc0:	469e      	mov	lr, r3
 8002dc2:	4770      	bx	lr
