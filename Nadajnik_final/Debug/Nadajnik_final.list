
Nadajnik_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c4c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08001d0c  08001d0c  00011d0c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001d28  08001d28  00011d28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001d2c  08001d2c  00011d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  08001d30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000f4  20000010  08001d40  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000104  08001d40  00020104  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000a2e9  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001ba8  00000000  00000000  0002a321  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000553f  00000000  00000000  0002bec9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000700  00000000  00000000  00031408  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000a40  00000000  00000000  00031b08  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003e60  00000000  00000000  00032548  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002808  00000000  00000000  000363a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00038bb0  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000014a4  00000000  00000000  00038c2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001cf4 	.word	0x08001cf4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08001cf4 	.word	0x08001cf4

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000408:	b570      	push	{r4, r5, r6, lr}
 800040a:	0005      	movs	r5, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800040c:	20fa      	movs	r0, #250	; 0xfa
 800040e:	4b0d      	ldr	r3, [pc, #52]	; (8000444 <HAL_InitTick+0x3c>)
 8000410:	0080      	lsls	r0, r0, #2
 8000412:	7819      	ldrb	r1, [r3, #0]
 8000414:	f7ff fe82 	bl	800011c <__udivsi3>
 8000418:	4b0b      	ldr	r3, [pc, #44]	; (8000448 <HAL_InitTick+0x40>)
 800041a:	0001      	movs	r1, r0
 800041c:	6818      	ldr	r0, [r3, #0]
 800041e:	f7ff fe7d 	bl	800011c <__udivsi3>
 8000422:	f000 fa8f 	bl	8000944 <HAL_SYSTICK_Config>
 8000426:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8000428:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800042a:	2c00      	cmp	r4, #0
 800042c:	d109      	bne.n	8000442 <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800042e:	2d03      	cmp	r5, #3
 8000430:	d807      	bhi.n	8000442 <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000432:	3802      	subs	r0, #2
 8000434:	0022      	movs	r2, r4
 8000436:	0029      	movs	r1, r5
 8000438:	f000 fa4a 	bl	80008d0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800043c:	0020      	movs	r0, r4
 800043e:	4b03      	ldr	r3, [pc, #12]	; (800044c <HAL_InitTick+0x44>)
 8000440:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000442:	bd70      	pop	{r4, r5, r6, pc}
 8000444:	20000000 	.word	0x20000000
 8000448:	2000000c 	.word	0x2000000c
 800044c:	20000004 	.word	0x20000004

08000450 <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000450:	2340      	movs	r3, #64	; 0x40
 8000452:	4a08      	ldr	r2, [pc, #32]	; (8000474 <HAL_Init+0x24>)
{
 8000454:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000456:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000458:	2000      	movs	r0, #0
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800045a:	430b      	orrs	r3, r1
 800045c:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800045e:	f7ff ffd3 	bl	8000408 <HAL_InitTick>
 8000462:	1e04      	subs	r4, r0, #0
 8000464:	d103      	bne.n	800046e <HAL_Init+0x1e>
    HAL_MspInit();
 8000466:	f001 fab3 	bl	80019d0 <HAL_MspInit>
}
 800046a:	0020      	movs	r0, r4
 800046c:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 800046e:	2401      	movs	r4, #1
 8000470:	e7fb      	b.n	800046a <HAL_Init+0x1a>
 8000472:	46c0      	nop			; (mov r8, r8)
 8000474:	40022000 	.word	0x40022000

08000478 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000478:	4a03      	ldr	r2, [pc, #12]	; (8000488 <HAL_IncTick+0x10>)
 800047a:	4b04      	ldr	r3, [pc, #16]	; (800048c <HAL_IncTick+0x14>)
 800047c:	6811      	ldr	r1, [r2, #0]
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	185b      	adds	r3, r3, r1
 8000482:	6013      	str	r3, [r2, #0]
}
 8000484:	4770      	bx	lr
 8000486:	46c0      	nop			; (mov r8, r8)
 8000488:	2000002c 	.word	0x2000002c
 800048c:	20000000 	.word	0x20000000

08000490 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000490:	4b01      	ldr	r3, [pc, #4]	; (8000498 <HAL_GetTick+0x8>)
 8000492:	6818      	ldr	r0, [r3, #0]
}
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	2000002c 	.word	0x2000002c

0800049c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800049c:	b570      	push	{r4, r5, r6, lr}
 800049e:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80004a0:	f7ff fff6 	bl	8000490 <HAL_GetTick>
 80004a4:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80004a6:	1c63      	adds	r3, r4, #1
 80004a8:	d002      	beq.n	80004b0 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80004aa:	4b04      	ldr	r3, [pc, #16]	; (80004bc <HAL_Delay+0x20>)
 80004ac:	781b      	ldrb	r3, [r3, #0]
 80004ae:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80004b0:	f7ff ffee 	bl	8000490 <HAL_GetTick>
 80004b4:	1b40      	subs	r0, r0, r5
 80004b6:	4284      	cmp	r4, r0
 80004b8:	d8fa      	bhi.n	80004b0 <HAL_Delay+0x14>
  {
  }
}
 80004ba:	bd70      	pop	{r4, r5, r6, pc}
 80004bc:	20000000 	.word	0x20000000

080004c0 <ADC_DelayMicroSecond>:
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80004c0:	4b08      	ldr	r3, [pc, #32]	; (80004e4 <ADC_DelayMicroSecond+0x24>)
{
 80004c2:	b513      	push	{r0, r1, r4, lr}
 80004c4:	0004      	movs	r4, r0
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80004c6:	4908      	ldr	r1, [pc, #32]	; (80004e8 <ADC_DelayMicroSecond+0x28>)
 80004c8:	6818      	ldr	r0, [r3, #0]
 80004ca:	f7ff fe27 	bl	800011c <__udivsi3>
 80004ce:	4344      	muls	r4, r0
 80004d0:	9401      	str	r4, [sp, #4]

  while(waitLoopIndex != 0U)
 80004d2:	9b01      	ldr	r3, [sp, #4]
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d100      	bne.n	80004da <ADC_DelayMicroSecond+0x1a>
  {
    waitLoopIndex--;
  } 
}
 80004d8:	bd13      	pop	{r0, r1, r4, pc}
    waitLoopIndex--;
 80004da:	9b01      	ldr	r3, [sp, #4]
 80004dc:	3b01      	subs	r3, #1
 80004de:	9301      	str	r3, [sp, #4]
 80004e0:	e7f7      	b.n	80004d2 <ADC_DelayMicroSecond+0x12>
 80004e2:	46c0      	nop			; (mov r8, r8)
 80004e4:	2000000c 	.word	0x2000000c
 80004e8:	000f4240 	.word	0x000f4240

080004ec <ADC_Enable>:
  if (ADC_IS_ENABLE(hadc) == RESET)
 80004ec:	2103      	movs	r1, #3
 80004ee:	6803      	ldr	r3, [r0, #0]
{
 80004f0:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80004f2:	689a      	ldr	r2, [r3, #8]
{
 80004f4:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 80004f6:	400a      	ands	r2, r1
 80004f8:	2a01      	cmp	r2, #1
 80004fa:	d10d      	bne.n	8000518 <ADC_Enable+0x2c>
 80004fc:	6819      	ldr	r1, [r3, #0]
 80004fe:	4211      	tst	r1, r2
 8000500:	d00a      	beq.n	8000518 <ADC_Enable+0x2c>
  return HAL_OK;
 8000502:	2000      	movs	r0, #0
}
 8000504:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000506:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000508:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800050a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800050c:	4313      	orrs	r3, r2
 800050e:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000510:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000512:	4303      	orrs	r3, r0
 8000514:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 8000516:	e7f5      	b.n	8000504 <ADC_Enable+0x18>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8000518:	6899      	ldr	r1, [r3, #8]
 800051a:	4a0f      	ldr	r2, [pc, #60]	; (8000558 <ADC_Enable+0x6c>)
 800051c:	4211      	tst	r1, r2
 800051e:	d1f2      	bne.n	8000506 <ADC_Enable+0x1a>
    __HAL_ADC_ENABLE(hadc);
 8000520:	2501      	movs	r5, #1
 8000522:	689a      	ldr	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8000524:	0028      	movs	r0, r5
    __HAL_ADC_ENABLE(hadc);
 8000526:	432a      	orrs	r2, r5
 8000528:	609a      	str	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800052a:	f7ff ffc9 	bl	80004c0 <ADC_DelayMicroSecond>
    tickstart = HAL_GetTick();
 800052e:	f7ff ffaf 	bl	8000490 <HAL_GetTick>
 8000532:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000534:	6823      	ldr	r3, [r4, #0]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	422b      	tst	r3, r5
 800053a:	d1e2      	bne.n	8000502 <ADC_Enable+0x16>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800053c:	f7ff ffa8 	bl	8000490 <HAL_GetTick>
 8000540:	1b80      	subs	r0, r0, r6
 8000542:	280a      	cmp	r0, #10
 8000544:	d9f6      	bls.n	8000534 <ADC_Enable+0x48>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000546:	2310      	movs	r3, #16
 8000548:	6d62      	ldr	r2, [r4, #84]	; 0x54
        return HAL_ERROR;
 800054a:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800054c:	4313      	orrs	r3, r2
 800054e:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000550:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000552:	431d      	orrs	r5, r3
 8000554:	65a5      	str	r5, [r4, #88]	; 0x58
        return HAL_ERROR;
 8000556:	e7d5      	b.n	8000504 <ADC_Enable+0x18>
 8000558:	80000017 	.word	0x80000017

0800055c <HAL_ADC_Init>:
{
 800055c:	b570      	push	{r4, r5, r6, lr}
 800055e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8000560:	2001      	movs	r0, #1
  if(hadc == NULL)
 8000562:	2c00      	cmp	r4, #0
 8000564:	d019      	beq.n	800059a <HAL_ADC_Init+0x3e>
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000566:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000568:	2b00      	cmp	r3, #0
 800056a:	d106      	bne.n	800057a <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 800056c:	0022      	movs	r2, r4
 800056e:	3250      	adds	r2, #80	; 0x50
    ADC_CLEAR_ERRORCODE(hadc);
 8000570:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADC_MspInit(hadc);
 8000572:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 8000574:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 8000576:	f001 f85b 	bl	8001630 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800057a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800057c:	06db      	lsls	r3, r3, #27
 800057e:	d404      	bmi.n	800058a <HAL_ADC_Init+0x2e>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8000580:	2204      	movs	r2, #4
 8000582:	6823      	ldr	r3, [r4, #0]
 8000584:	6898      	ldr	r0, [r3, #8]
 8000586:	4010      	ands	r0, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000588:	d008      	beq.n	800059c <HAL_ADC_Init+0x40>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800058a:	2310      	movs	r3, #16
 800058c:	6d62      	ldr	r2, [r4, #84]	; 0x54
    return HAL_ERROR;
 800058e:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000590:	4313      	orrs	r3, r2
 8000592:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 8000594:	2300      	movs	r3, #0
 8000596:	3450      	adds	r4, #80	; 0x50
 8000598:	7023      	strb	r3, [r4, #0]
}
 800059a:	bd70      	pop	{r4, r5, r6, pc}
  ADC_STATE_CLR_SET(hadc->State,
 800059c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800059e:	4955      	ldr	r1, [pc, #340]	; (80006f4 <HAL_ADC_Init+0x198>)
 80005a0:	4011      	ands	r1, r2
 80005a2:	2202      	movs	r2, #2
 80005a4:	430a      	orrs	r2, r1
 80005a6:	6562      	str	r2, [r4, #84]	; 0x54
  if (ADC_IS_ENABLE(hadc) == RESET)
 80005a8:	2203      	movs	r2, #3
 80005aa:	6899      	ldr	r1, [r3, #8]
 80005ac:	4011      	ands	r1, r2
 80005ae:	4a52      	ldr	r2, [pc, #328]	; (80006f8 <HAL_ADC_Init+0x19c>)
 80005b0:	2901      	cmp	r1, #1
 80005b2:	d102      	bne.n	80005ba <HAL_ADC_Init+0x5e>
 80005b4:	681d      	ldr	r5, [r3, #0]
 80005b6:	420d      	tst	r5, r1
 80005b8:	d119      	bne.n	80005ee <HAL_ADC_Init+0x92>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80005ba:	2680      	movs	r6, #128	; 0x80
 80005bc:	6865      	ldr	r5, [r4, #4]
 80005be:	05f6      	lsls	r6, r6, #23
 80005c0:	0069      	lsls	r1, r5, #1
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	42b1      	cmp	r1, r6
 80005c6:	d003      	beq.n	80005d0 <HAL_ADC_Init+0x74>
 80005c8:	2180      	movs	r1, #128	; 0x80
 80005ca:	0609      	lsls	r1, r1, #24
 80005cc:	428d      	cmp	r5, r1
 80005ce:	d176      	bne.n	80006be <HAL_ADC_Init+0x162>
 80005d0:	6919      	ldr	r1, [r3, #16]
 80005d2:	0089      	lsls	r1, r1, #2
 80005d4:	0889      	lsrs	r1, r1, #2
 80005d6:	6119      	str	r1, [r3, #16]
 80005d8:	6919      	ldr	r1, [r3, #16]
 80005da:	430d      	orrs	r5, r1
 80005dc:	611d      	str	r5, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 80005de:	2518      	movs	r5, #24
 80005e0:	68d9      	ldr	r1, [r3, #12]
 80005e2:	43a9      	bics	r1, r5
 80005e4:	60d9      	str	r1, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 80005e6:	68d9      	ldr	r1, [r3, #12]
 80005e8:	68a5      	ldr	r5, [r4, #8]
 80005ea:	4329      	orrs	r1, r5
 80005ec:	60d9      	str	r1, [r3, #12]
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80005ee:	6811      	ldr	r1, [r2, #0]
 80005f0:	4d42      	ldr	r5, [pc, #264]	; (80006fc <HAL_ADC_Init+0x1a0>)
 80005f2:	4029      	ands	r1, r5
 80005f4:	6011      	str	r1, [r2, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 80005f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80005f8:	6815      	ldr	r5, [r2, #0]
 80005fa:	0649      	lsls	r1, r1, #25
 80005fc:	4329      	orrs	r1, r5
 80005fe:	6011      	str	r1, [r2, #0]
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8000600:	2280      	movs	r2, #128	; 0x80
 8000602:	6899      	ldr	r1, [r3, #8]
 8000604:	0552      	lsls	r2, r2, #21
 8000606:	4211      	tst	r1, r2
 8000608:	d102      	bne.n	8000610 <HAL_ADC_Init+0xb4>
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800060a:	6899      	ldr	r1, [r3, #8]
 800060c:	430a      	orrs	r2, r1
 800060e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8000610:	68da      	ldr	r2, [r3, #12]
 8000612:	493b      	ldr	r1, [pc, #236]	; (8000700 <HAL_ADC_Init+0x1a4>)
 8000614:	400a      	ands	r2, r1
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000616:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8000618:	60da      	str	r2, [r3, #12]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800061a:	68dd      	ldr	r5, [r3, #12]
 800061c:	68e2      	ldr	r2, [r4, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800061e:	2902      	cmp	r1, #2
 8000620:	d100      	bne.n	8000624 <HAL_ADC_Init+0xc8>
 8000622:	2004      	movs	r0, #4
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000624:	6b26      	ldr	r6, [r4, #48]	; 0x30
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000626:	1c61      	adds	r1, r4, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000628:	4332      	orrs	r2, r6
 800062a:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800062c:	69a5      	ldr	r5, [r4, #24]
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800062e:	7fc9      	ldrb	r1, [r1, #31]
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000630:	03ad      	lsls	r5, r5, #14
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000632:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8000634:	69e5      	ldr	r5, [r4, #28]
 8000636:	03ed      	lsls	r5, r5, #15
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000638:	432a      	orrs	r2, r5
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800063a:	034d      	lsls	r5, r1, #13
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800063c:	432a      	orrs	r2, r5
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800063e:	0025      	movs	r5, r4
 8000640:	352c      	adds	r5, #44	; 0x2c
 8000642:	782d      	ldrb	r5, [r5, #0]
 8000644:	006d      	lsls	r5, r5, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000646:	432a      	orrs	r2, r5
 8000648:	4302      	orrs	r2, r0
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800064a:	20c2      	movs	r0, #194	; 0xc2
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800064c:	60da      	str	r2, [r3, #12]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800064e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000650:	30ff      	adds	r0, #255	; 0xff
 8000652:	4282      	cmp	r2, r0
 8000654:	d004      	beq.n	8000660 <HAL_ADC_Init+0x104>
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000656:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8000658:	68d8      	ldr	r0, [r3, #12]
 800065a:	432a      	orrs	r2, r5
 800065c:	4302      	orrs	r2, r0
 800065e:	60da      	str	r2, [r3, #12]
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000660:	1ca2      	adds	r2, r4, #2
 8000662:	7fd2      	ldrb	r2, [r2, #31]
 8000664:	2a01      	cmp	r2, #1
 8000666:	d106      	bne.n	8000676 <HAL_ADC_Init+0x11a>
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8000668:	2900      	cmp	r1, #0
 800066a:	d134      	bne.n	80006d6 <HAL_ADC_Init+0x17a>
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800066c:	2280      	movs	r2, #128	; 0x80
 800066e:	68d9      	ldr	r1, [r3, #12]
 8000670:	0252      	lsls	r2, r2, #9
 8000672:	430a      	orrs	r2, r1
 8000674:	60da      	str	r2, [r3, #12]
  if (hadc->Init.OversamplingMode == ENABLE)
 8000676:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8000678:	691a      	ldr	r2, [r3, #16]
  if (hadc->Init.OversamplingMode == ENABLE)
 800067a:	2901      	cmp	r1, #1
 800067c:	d133      	bne.n	80006e6 <HAL_ADC_Init+0x18a>
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 800067e:	4821      	ldr	r0, [pc, #132]	; (8000704 <HAL_ADC_Init+0x1a8>)
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000680:	6c65      	ldr	r5, [r4, #68]	; 0x44
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8000682:	4002      	ands	r2, r0
 8000684:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000686:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000688:	6918      	ldr	r0, [r3, #16]
 800068a:	432a      	orrs	r2, r5
                               hadc->Init.Oversample.RightBitShift             |
 800068c:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 800068e:	432a      	orrs	r2, r5
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000690:	4302      	orrs	r2, r0
 8000692:	611a      	str	r2, [r3, #16]
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8000694:	691a      	ldr	r2, [r3, #16]
 8000696:	4311      	orrs	r1, r2
 8000698:	6119      	str	r1, [r3, #16]
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800069a:	2107      	movs	r1, #7
 800069c:	695a      	ldr	r2, [r3, #20]
  ADC_CLEAR_ERRORCODE(hadc);
 800069e:	2000      	movs	r0, #0
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80006a0:	438a      	bics	r2, r1
 80006a2:	615a      	str	r2, [r3, #20]
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80006a4:	695a      	ldr	r2, [r3, #20]
 80006a6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80006a8:	430a      	orrs	r2, r1
 80006aa:	615a      	str	r2, [r3, #20]
  ADC_STATE_CLR_SET(hadc->State,
 80006ac:	2203      	movs	r2, #3
  ADC_CLEAR_ERRORCODE(hadc);
 80006ae:	65a0      	str	r0, [r4, #88]	; 0x58
  ADC_STATE_CLR_SET(hadc->State,
 80006b0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80006b2:	4393      	bics	r3, r2
 80006b4:	001a      	movs	r2, r3
 80006b6:	2301      	movs	r3, #1
 80006b8:	4313      	orrs	r3, r2
 80006ba:	6563      	str	r3, [r4, #84]	; 0x54
  return HAL_OK;
 80006bc:	e76d      	b.n	800059a <HAL_ADC_Init+0x3e>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80006be:	6919      	ldr	r1, [r3, #16]
 80006c0:	4e11      	ldr	r6, [pc, #68]	; (8000708 <HAL_ADC_Init+0x1ac>)
 80006c2:	0089      	lsls	r1, r1, #2
 80006c4:	0889      	lsrs	r1, r1, #2
 80006c6:	6119      	str	r1, [r3, #16]
 80006c8:	6811      	ldr	r1, [r2, #0]
 80006ca:	4031      	ands	r1, r6
 80006cc:	6011      	str	r1, [r2, #0]
 80006ce:	6811      	ldr	r1, [r2, #0]
 80006d0:	430d      	orrs	r5, r1
 80006d2:	6015      	str	r5, [r2, #0]
 80006d4:	e783      	b.n	80005de <HAL_ADC_Init+0x82>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80006d6:	2120      	movs	r1, #32
 80006d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80006da:	4301      	orrs	r1, r0
 80006dc:	6561      	str	r1, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80006de:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80006e0:	430a      	orrs	r2, r1
 80006e2:	65a2      	str	r2, [r4, #88]	; 0x58
 80006e4:	e7c7      	b.n	8000676 <HAL_ADC_Init+0x11a>
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80006e6:	2101      	movs	r1, #1
 80006e8:	420a      	tst	r2, r1
 80006ea:	d0d6      	beq.n	800069a <HAL_ADC_Init+0x13e>
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80006ec:	691a      	ldr	r2, [r3, #16]
 80006ee:	438a      	bics	r2, r1
 80006f0:	611a      	str	r2, [r3, #16]
 80006f2:	e7d2      	b.n	800069a <HAL_ADC_Init+0x13e>
 80006f4:	fffffefd 	.word	0xfffffefd
 80006f8:	40012708 	.word	0x40012708
 80006fc:	fdffffff 	.word	0xfdffffff
 8000700:	fffe0219 	.word	0xfffe0219
 8000704:	fffffc03 	.word	0xfffffc03
 8000708:	ffc3ffff 	.word	0xffc3ffff

0800070c <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800070c:	6803      	ldr	r3, [r0, #0]
{
 800070e:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000710:	689b      	ldr	r3, [r3, #8]
{
 8000712:	0004      	movs	r4, r0
    tmp_hal_status = HAL_BUSY;
 8000714:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000716:	075b      	lsls	r3, r3, #29
 8000718:	d41a      	bmi.n	8000750 <HAL_ADC_Start+0x44>
    __HAL_LOCK(hadc);
 800071a:	0025      	movs	r5, r4
 800071c:	3550      	adds	r5, #80	; 0x50
 800071e:	782b      	ldrb	r3, [r5, #0]
 8000720:	2b01      	cmp	r3, #1
 8000722:	d015      	beq.n	8000750 <HAL_ADC_Start+0x44>
 8000724:	2301      	movs	r3, #1
 8000726:	702b      	strb	r3, [r5, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000728:	69e3      	ldr	r3, [r4, #28]
 800072a:	2b01      	cmp	r3, #1
 800072c:	d111      	bne.n	8000752 <HAL_ADC_Start+0x46>
      ADC_STATE_CLR_SET(hadc->State,
 800072e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000730:	4a0b      	ldr	r2, [pc, #44]	; (8000760 <HAL_ADC_Start+0x54>)
      ADC_CLEAR_ERRORCODE(hadc);
 8000732:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8000734:	401a      	ands	r2, r3
 8000736:	2380      	movs	r3, #128	; 0x80
 8000738:	005b      	lsls	r3, r3, #1
 800073a:	4313      	orrs	r3, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800073c:	221c      	movs	r2, #28
      ADC_STATE_CLR_SET(hadc->State,
 800073e:	6563      	str	r3, [r4, #84]	; 0x54
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000740:	6823      	ldr	r3, [r4, #0]
      ADC_CLEAR_ERRORCODE(hadc);
 8000742:	65a0      	str	r0, [r4, #88]	; 0x58
      __HAL_UNLOCK(hadc);
 8000744:	7028      	strb	r0, [r5, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000746:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000748:	6899      	ldr	r1, [r3, #8]
 800074a:	3a18      	subs	r2, #24
 800074c:	430a      	orrs	r2, r1
 800074e:	609a      	str	r2, [r3, #8]
}
 8000750:	bd70      	pop	{r4, r5, r6, pc}
      tmp_hal_status = ADC_Enable(hadc);
 8000752:	0020      	movs	r0, r4
 8000754:	f7ff feca 	bl	80004ec <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8000758:	2800      	cmp	r0, #0
 800075a:	d1f9      	bne.n	8000750 <HAL_ADC_Start+0x44>
 800075c:	e7e7      	b.n	800072e <HAL_ADC_Start+0x22>
 800075e:	46c0      	nop			; (mov r8, r8)
 8000760:	fffff0fe 	.word	0xfffff0fe

08000764 <HAL_ADC_PollForConversion>:
{
 8000764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000766:	6945      	ldr	r5, [r0, #20]
{
 8000768:	0004      	movs	r4, r0
 800076a:	000e      	movs	r6, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800076c:	2d08      	cmp	r5, #8
 800076e:	d00d      	beq.n	800078c <HAL_ADC_PollForConversion+0x28>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8000770:	6803      	ldr	r3, [r0, #0]
 8000772:	2001      	movs	r0, #1
 8000774:	68db      	ldr	r3, [r3, #12]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8000776:	250c      	movs	r5, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8000778:	4203      	tst	r3, r0
 800077a:	d007      	beq.n	800078c <HAL_ADC_PollForConversion+0x28>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800077c:	2320      	movs	r3, #32
 800077e:	6d62      	ldr	r2, [r4, #84]	; 0x54
      __HAL_UNLOCK(hadc);
 8000780:	3450      	adds	r4, #80	; 0x50
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000782:	4313      	orrs	r3, r2
 8000784:	6063      	str	r3, [r4, #4]
      __HAL_UNLOCK(hadc);
 8000786:	2300      	movs	r3, #0
 8000788:	7023      	strb	r3, [r4, #0]
}
 800078a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tickstart = HAL_GetTick();
 800078c:	f7ff fe80 	bl	8000490 <HAL_GetTick>
 8000790:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000792:	6823      	ldr	r3, [r4, #0]
 8000794:	681a      	ldr	r2, [r3, #0]
 8000796:	422a      	tst	r2, r5
 8000798:	d024      	beq.n	80007e4 <HAL_ADC_PollForConversion+0x80>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800079a:	2280      	movs	r2, #128	; 0x80
 800079c:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800079e:	0092      	lsls	r2, r2, #2
 80007a0:	430a      	orrs	r2, r1
 80007a2:	6562      	str	r2, [r4, #84]	; 0x54
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80007a4:	22c0      	movs	r2, #192	; 0xc0
 80007a6:	68d9      	ldr	r1, [r3, #12]
 80007a8:	0112      	lsls	r2, r2, #4
 80007aa:	4211      	tst	r1, r2
 80007ac:	d113      	bne.n	80007d6 <HAL_ADC_PollForConversion+0x72>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80007ae:	1c62      	adds	r2, r4, #1
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80007b0:	7fd2      	ldrb	r2, [r2, #31]
 80007b2:	2a00      	cmp	r2, #0
 80007b4:	d10f      	bne.n	80007d6 <HAL_ADC_PollForConversion+0x72>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80007b6:	681a      	ldr	r2, [r3, #0]
 80007b8:	0712      	lsls	r2, r2, #28
 80007ba:	d50c      	bpl.n	80007d6 <HAL_ADC_PollForConversion+0x72>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80007bc:	689a      	ldr	r2, [r3, #8]
 80007be:	0752      	lsls	r2, r2, #29
 80007c0:	d423      	bmi.n	800080a <HAL_ADC_PollForConversion+0xa6>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80007c2:	210c      	movs	r1, #12
 80007c4:	685a      	ldr	r2, [r3, #4]
 80007c6:	438a      	bics	r2, r1
 80007c8:	605a      	str	r2, [r3, #4]
        ADC_STATE_CLR_SET(hadc->State,
 80007ca:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80007cc:	4913      	ldr	r1, [pc, #76]	; (800081c <HAL_ADC_PollForConversion+0xb8>)
 80007ce:	4011      	ands	r1, r2
 80007d0:	2201      	movs	r2, #1
 80007d2:	430a      	orrs	r2, r1
 80007d4:	6562      	str	r2, [r4, #84]	; 0x54
  return HAL_OK;
 80007d6:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80007d8:	69a2      	ldr	r2, [r4, #24]
 80007da:	4282      	cmp	r2, r0
 80007dc:	d1d5      	bne.n	800078a <HAL_ADC_PollForConversion+0x26>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80007de:	220c      	movs	r2, #12
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	e7d2      	b.n	800078a <HAL_ADC_PollForConversion+0x26>
    if(Timeout != HAL_MAX_DELAY)
 80007e4:	1c72      	adds	r2, r6, #1
 80007e6:	d0d5      	beq.n	8000794 <HAL_ADC_PollForConversion+0x30>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80007e8:	2e00      	cmp	r6, #0
 80007ea:	d108      	bne.n	80007fe <HAL_ADC_PollForConversion+0x9a>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80007ec:	2304      	movs	r3, #4
 80007ee:	6d62      	ldr	r2, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 80007f0:	3450      	adds	r4, #80	; 0x50
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80007f2:	4313      	orrs	r3, r2
 80007f4:	6063      	str	r3, [r4, #4]
        __HAL_UNLOCK(hadc);
 80007f6:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 80007f8:	2003      	movs	r0, #3
        __HAL_UNLOCK(hadc);
 80007fa:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 80007fc:	e7c5      	b.n	800078a <HAL_ADC_PollForConversion+0x26>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80007fe:	f7ff fe47 	bl	8000490 <HAL_GetTick>
 8000802:	1bc0      	subs	r0, r0, r7
 8000804:	4286      	cmp	r6, r0
 8000806:	d2c4      	bcs.n	8000792 <HAL_ADC_PollForConversion+0x2e>
 8000808:	e7f0      	b.n	80007ec <HAL_ADC_PollForConversion+0x88>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800080a:	2220      	movs	r2, #32
 800080c:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800080e:	430a      	orrs	r2, r1
 8000810:	6562      	str	r2, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000812:	2201      	movs	r2, #1
 8000814:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8000816:	430a      	orrs	r2, r1
 8000818:	65a2      	str	r2, [r4, #88]	; 0x58
 800081a:	e7dc      	b.n	80007d6 <HAL_ADC_PollForConversion+0x72>
 800081c:	fffffefe 	.word	0xfffffefe

08000820 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8000820:	6803      	ldr	r3, [r0, #0]
 8000822:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8000824:	4770      	bx	lr
	...

08000828 <HAL_ADC_ConfigChannel>:
{
 8000828:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 800082a:	0004      	movs	r4, r0
 800082c:	3450      	adds	r4, #80	; 0x50
 800082e:	7823      	ldrb	r3, [r4, #0]
{
 8000830:	0006      	movs	r6, r0
 8000832:	000d      	movs	r5, r1
  __HAL_LOCK(hadc);
 8000834:	2002      	movs	r0, #2
 8000836:	2b01      	cmp	r3, #1
 8000838:	d00b      	beq.n	8000852 <HAL_ADC_ConfigChannel+0x2a>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800083a:	6832      	ldr	r2, [r6, #0]
  __HAL_LOCK(hadc);
 800083c:	3801      	subs	r0, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800083e:	6891      	ldr	r1, [r2, #8]
  __HAL_LOCK(hadc);
 8000840:	7020      	strb	r0, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8000842:	074b      	lsls	r3, r1, #29
 8000844:	d506      	bpl.n	8000854 <HAL_ADC_ConfigChannel+0x2c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000846:	2220      	movs	r2, #32
 8000848:	6d71      	ldr	r1, [r6, #84]	; 0x54
 800084a:	430a      	orrs	r2, r1
 800084c:	6572      	str	r2, [r6, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 800084e:	2200      	movs	r2, #0
 8000850:	7022      	strb	r2, [r4, #0]
}
 8000852:	bd70      	pop	{r4, r5, r6, pc}
 8000854:	2080      	movs	r0, #128	; 0x80
  if (sConfig->Rank != ADC_RANK_NONE)
 8000856:	491a      	ldr	r1, [pc, #104]	; (80008c0 <HAL_ADC_ConfigChannel+0x98>)
 8000858:	686e      	ldr	r6, [r5, #4]
 800085a:	682b      	ldr	r3, [r5, #0]
 800085c:	02c0      	lsls	r0, r0, #11
 800085e:	428e      	cmp	r6, r1
 8000860:	d01b      	beq.n	800089a <HAL_ADC_ConfigChannel+0x72>
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8000862:	6a96      	ldr	r6, [r2, #40]	; 0x28
 8000864:	0359      	lsls	r1, r3, #13
 8000866:	0b49      	lsrs	r1, r1, #13
 8000868:	4331      	orrs	r1, r6
 800086a:	6291      	str	r1, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800086c:	4203      	tst	r3, r0
 800086e:	d008      	beq.n	8000882 <HAL_ADC_ConfigChannel+0x5a>
      ADC->CCR |= ADC_CCR_TSEN;   
 8000870:	2380      	movs	r3, #128	; 0x80
 8000872:	4a14      	ldr	r2, [pc, #80]	; (80008c4 <HAL_ADC_ConfigChannel+0x9c>)
 8000874:	041b      	lsls	r3, r3, #16
 8000876:	6811      	ldr	r1, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8000878:	200a      	movs	r0, #10
      ADC->CCR |= ADC_CCR_TSEN;   
 800087a:	430b      	orrs	r3, r1
 800087c:	6013      	str	r3, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800087e:	f7ff fe1f 	bl	80004c0 <ADC_DelayMicroSecond>
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8000882:	682b      	ldr	r3, [r5, #0]
 8000884:	039b      	lsls	r3, r3, #14
 8000886:	d505      	bpl.n	8000894 <HAL_ADC_ConfigChannel+0x6c>
      ADC->CCR |= ADC_CCR_VREFEN;   
 8000888:	2380      	movs	r3, #128	; 0x80
 800088a:	4a0e      	ldr	r2, [pc, #56]	; (80008c4 <HAL_ADC_ConfigChannel+0x9c>)
 800088c:	03db      	lsls	r3, r3, #15
 800088e:	6811      	ldr	r1, [r2, #0]
 8000890:	430b      	orrs	r3, r1
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8000892:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hadc);
 8000894:	2000      	movs	r0, #0
 8000896:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8000898:	e7db      	b.n	8000852 <HAL_ADC_ConfigChannel+0x2a>
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800089a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800089c:	035d      	lsls	r5, r3, #13
 800089e:	0b6d      	lsrs	r5, r5, #13
 80008a0:	43a9      	bics	r1, r5
 80008a2:	6291      	str	r1, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80008a4:	4203      	tst	r3, r0
 80008a6:	d004      	beq.n	80008b2 <HAL_ADC_ConfigChannel+0x8a>
      ADC->CCR &= ~ADC_CCR_TSEN;   
 80008a8:	4906      	ldr	r1, [pc, #24]	; (80008c4 <HAL_ADC_ConfigChannel+0x9c>)
 80008aa:	4807      	ldr	r0, [pc, #28]	; (80008c8 <HAL_ADC_ConfigChannel+0xa0>)
 80008ac:	680a      	ldr	r2, [r1, #0]
 80008ae:	4002      	ands	r2, r0
 80008b0:	600a      	str	r2, [r1, #0]
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80008b2:	039b      	lsls	r3, r3, #14
 80008b4:	d5ee      	bpl.n	8000894 <HAL_ADC_ConfigChannel+0x6c>
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 80008b6:	4a03      	ldr	r2, [pc, #12]	; (80008c4 <HAL_ADC_ConfigChannel+0x9c>)
 80008b8:	4904      	ldr	r1, [pc, #16]	; (80008cc <HAL_ADC_ConfigChannel+0xa4>)
 80008ba:	6813      	ldr	r3, [r2, #0]
 80008bc:	400b      	ands	r3, r1
 80008be:	e7e8      	b.n	8000892 <HAL_ADC_ConfigChannel+0x6a>
 80008c0:	00001001 	.word	0x00001001
 80008c4:	40012708 	.word	0x40012708
 80008c8:	ff7fffff 	.word	0xff7fffff
 80008cc:	ffbfffff 	.word	0xffbfffff

080008d0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008d0:	b570      	push	{r4, r5, r6, lr}
 80008d2:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80008d4:	2800      	cmp	r0, #0
 80008d6:	da14      	bge.n	8000902 <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008d8:	230f      	movs	r3, #15
 80008da:	b2c0      	uxtb	r0, r0
 80008dc:	4003      	ands	r3, r0
 80008de:	3b08      	subs	r3, #8
 80008e0:	4a11      	ldr	r2, [pc, #68]	; (8000928 <HAL_NVIC_SetPriority+0x58>)
 80008e2:	089b      	lsrs	r3, r3, #2
 80008e4:	009b      	lsls	r3, r3, #2
 80008e6:	189b      	adds	r3, r3, r2
 80008e8:	2203      	movs	r2, #3
 80008ea:	4010      	ands	r0, r2
 80008ec:	4090      	lsls	r0, r2
 80008ee:	32fc      	adds	r2, #252	; 0xfc
 80008f0:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008f2:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008f4:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008f6:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008f8:	69dc      	ldr	r4, [r3, #28]
 80008fa:	43ac      	bics	r4, r5
 80008fc:	4321      	orrs	r1, r4
 80008fe:	61d9      	str	r1, [r3, #28]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000900:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000902:	2503      	movs	r5, #3
 8000904:	0883      	lsrs	r3, r0, #2
 8000906:	4028      	ands	r0, r5
 8000908:	40a8      	lsls	r0, r5
 800090a:	35fc      	adds	r5, #252	; 0xfc
 800090c:	002e      	movs	r6, r5
 800090e:	4a07      	ldr	r2, [pc, #28]	; (800092c <HAL_NVIC_SetPriority+0x5c>)
 8000910:	009b      	lsls	r3, r3, #2
 8000912:	189b      	adds	r3, r3, r2
 8000914:	22c0      	movs	r2, #192	; 0xc0
 8000916:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000918:	4029      	ands	r1, r5
 800091a:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800091c:	0092      	lsls	r2, r2, #2
 800091e:	589c      	ldr	r4, [r3, r2]
 8000920:	43b4      	bics	r4, r6
 8000922:	4321      	orrs	r1, r4
 8000924:	5099      	str	r1, [r3, r2]
 8000926:	e7eb      	b.n	8000900 <HAL_NVIC_SetPriority+0x30>
 8000928:	e000ed00 	.word	0xe000ed00
 800092c:	e000e100 	.word	0xe000e100

08000930 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000930:	231f      	movs	r3, #31
 8000932:	4018      	ands	r0, r3
 8000934:	3b1e      	subs	r3, #30
 8000936:	4083      	lsls	r3, r0
 8000938:	4a01      	ldr	r2, [pc, #4]	; (8000940 <HAL_NVIC_EnableIRQ+0x10>)
 800093a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800093c:	4770      	bx	lr
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	e000e100 	.word	0xe000e100

08000944 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000944:	4a09      	ldr	r2, [pc, #36]	; (800096c <HAL_SYSTICK_Config+0x28>)
 8000946:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8000948:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800094a:	4293      	cmp	r3, r2
 800094c:	d80d      	bhi.n	800096a <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800094e:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000950:	4a07      	ldr	r2, [pc, #28]	; (8000970 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000952:	4808      	ldr	r0, [pc, #32]	; (8000974 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000954:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000956:	6a03      	ldr	r3, [r0, #32]
 8000958:	0609      	lsls	r1, r1, #24
 800095a:	021b      	lsls	r3, r3, #8
 800095c:	0a1b      	lsrs	r3, r3, #8
 800095e:	430b      	orrs	r3, r1
 8000960:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000962:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000964:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000966:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000968:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800096a:	4770      	bx	lr
 800096c:	00ffffff 	.word	0x00ffffff
 8000970:	e000e010 	.word	0xe000e010
 8000974:	e000ed00 	.word	0xe000ed00

08000978 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000978:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800097a:	680b      	ldr	r3, [r1, #0]
{
 800097c:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0)
 800097e:	9302      	str	r3, [sp, #8]
  uint32_t position = 0x00U;
 8000980:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0)
 8000982:	9a02      	ldr	r2, [sp, #8]
 8000984:	40da      	lsrs	r2, r3
 8000986:	d101      	bne.n	800098c <HAL_GPIO_Init+0x14>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 8000988:	b005      	add	sp, #20
 800098a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800098c:	2401      	movs	r4, #1
 800098e:	409c      	lsls	r4, r3
 8000990:	9a02      	ldr	r2, [sp, #8]
 8000992:	4022      	ands	r2, r4
 8000994:	9201      	str	r2, [sp, #4]
    if (iocurrent)
 8000996:	d100      	bne.n	800099a <HAL_GPIO_Init+0x22>
 8000998:	e08b      	b.n	8000ab2 <HAL_GPIO_Init+0x13a>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800099a:	684a      	ldr	r2, [r1, #4]
 800099c:	0017      	movs	r7, r2
 800099e:	4694      	mov	ip, r2
 80009a0:	2210      	movs	r2, #16
 80009a2:	4397      	bics	r7, r2
 80009a4:	1e7a      	subs	r2, r7, #1
 80009a6:	2a01      	cmp	r2, #1
 80009a8:	d812      	bhi.n	80009d0 <HAL_GPIO_Init+0x58>
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80009aa:	2603      	movs	r6, #3
 80009ac:	005d      	lsls	r5, r3, #1
 80009ae:	40ae      	lsls	r6, r5
        temp = GPIOx->OSPEEDR;
 80009b0:	6882      	ldr	r2, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80009b2:	43b2      	bics	r2, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 80009b4:	68ce      	ldr	r6, [r1, #12]
 80009b6:	40ae      	lsls	r6, r5
 80009b8:	4332      	orrs	r2, r6
        GPIOx->OSPEEDR = temp;
 80009ba:	6082      	str	r2, [r0, #8]
        temp = GPIOx->OTYPER;
 80009bc:	6842      	ldr	r2, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80009be:	2501      	movs	r5, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009c0:	43a2      	bics	r2, r4
 80009c2:	0014      	movs	r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80009c4:	4662      	mov	r2, ip
 80009c6:	0912      	lsrs	r2, r2, #4
 80009c8:	402a      	ands	r2, r5
 80009ca:	409a      	lsls	r2, r3
 80009cc:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 80009ce:	6042      	str	r2, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80009d0:	2503      	movs	r5, #3
 80009d2:	005e      	lsls	r6, r3, #1
 80009d4:	40b5      	lsls	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80009d6:	688a      	ldr	r2, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80009d8:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80009da:	40b2      	lsls	r2, r6
      temp = GPIOx->PUPDR;
 80009dc:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80009de:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80009e0:	4322      	orrs	r2, r4
      GPIOx->PUPDR = temp;
 80009e2:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009e4:	2f02      	cmp	r7, #2
 80009e6:	d10f      	bne.n	8000a08 <HAL_GPIO_Init+0x90>
        temp = GPIOx->AFR[position >> 3U];
 80009e8:	08da      	lsrs	r2, r3, #3
 80009ea:	0092      	lsls	r2, r2, #2
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U));
 80009ec:	2407      	movs	r4, #7
 80009ee:	1882      	adds	r2, r0, r2
        temp = GPIOx->AFR[position >> 3U];
 80009f0:	6a17      	ldr	r7, [r2, #32]
 80009f2:	9203      	str	r2, [sp, #12]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U));
 80009f4:	220f      	movs	r2, #15
 80009f6:	401c      	ands	r4, r3
 80009f8:	00a4      	lsls	r4, r4, #2
 80009fa:	40a2      	lsls	r2, r4
 80009fc:	4397      	bics	r7, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80009fe:	690a      	ldr	r2, [r1, #16]
 8000a00:	40a2      	lsls	r2, r4
 8000a02:	4317      	orrs	r7, r2
        GPIOx->AFR[position >> 3U] = temp;
 8000a04:	9a03      	ldr	r2, [sp, #12]
 8000a06:	6217      	str	r7, [r2, #32]
      temp = GPIOx->MODER;
 8000a08:	6802      	ldr	r2, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a0a:	2403      	movs	r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000a0c:	4015      	ands	r5, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a0e:	4662      	mov	r2, ip
 8000a10:	4022      	ands	r2, r4
 8000a12:	40b2      	lsls	r2, r6
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a14:	2480      	movs	r4, #128	; 0x80
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a16:	4315      	orrs	r5, r2
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a18:	4662      	mov	r2, ip
 8000a1a:	0564      	lsls	r4, r4, #21
      GPIOx->MODER = temp;
 8000a1c:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a1e:	4222      	tst	r2, r4
 8000a20:	d047      	beq.n	8000ab2 <HAL_GPIO_Init+0x13a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a22:	2501      	movs	r5, #1
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000a24:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a26:	4c24      	ldr	r4, [pc, #144]	; (8000ab8 <HAL_GPIO_Init+0x140>)
 8000a28:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000a2a:	432a      	orrs	r2, r5
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000a2c:	3502      	adds	r5, #2
 8000a2e:	401d      	ands	r5, r3
 8000a30:	00ad      	lsls	r5, r5, #2
 8000a32:	40af      	lsls	r7, r5
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a34:	6362      	str	r2, [r4, #52]	; 0x34
 8000a36:	4a21      	ldr	r2, [pc, #132]	; (8000abc <HAL_GPIO_Init+0x144>)
        temp = SYSCFG->EXTICR[position >> 2U];
 8000a38:	089c      	lsrs	r4, r3, #2
 8000a3a:	00a4      	lsls	r4, r4, #2
 8000a3c:	18a4      	adds	r4, r4, r2
 8000a3e:	68a6      	ldr	r6, [r4, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000a40:	2200      	movs	r2, #0
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000a42:	43be      	bics	r6, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000a44:	27a0      	movs	r7, #160	; 0xa0
 8000a46:	05ff      	lsls	r7, r7, #23
 8000a48:	42b8      	cmp	r0, r7
 8000a4a:	d008      	beq.n	8000a5e <HAL_GPIO_Init+0xe6>
 8000a4c:	4f1c      	ldr	r7, [pc, #112]	; (8000ac0 <HAL_GPIO_Init+0x148>)
 8000a4e:	3201      	adds	r2, #1
 8000a50:	42b8      	cmp	r0, r7
 8000a52:	d004      	beq.n	8000a5e <HAL_GPIO_Init+0xe6>
 8000a54:	4f1b      	ldr	r7, [pc, #108]	; (8000ac4 <HAL_GPIO_Init+0x14c>)
 8000a56:	3205      	adds	r2, #5
 8000a58:	42b8      	cmp	r0, r7
 8000a5a:	d100      	bne.n	8000a5e <HAL_GPIO_Init+0xe6>
 8000a5c:	3a04      	subs	r2, #4
 8000a5e:	40aa      	lsls	r2, r5
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a60:	4667      	mov	r7, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000a62:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a64:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 8000a66:	4a18      	ldr	r2, [pc, #96]	; (8000ac8 <HAL_GPIO_Init+0x150>)
        temp &= ~((uint32_t)iocurrent);
 8000a68:	9c01      	ldr	r4, [sp, #4]
        temp = EXTI->IMR;
 8000a6a:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 8000a6c:	9d01      	ldr	r5, [sp, #4]
        temp &= ~((uint32_t)iocurrent);
 8000a6e:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8000a70:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a72:	03ff      	lsls	r7, r7, #15
 8000a74:	d401      	bmi.n	8000a7a <HAL_GPIO_Init+0x102>
        temp &= ~((uint32_t)iocurrent);
 8000a76:	0035      	movs	r5, r6
 8000a78:	4025      	ands	r5, r4
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a7a:	4667      	mov	r7, ip
        EXTI->IMR = temp;
 8000a7c:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000a7e:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8000a80:	9d01      	ldr	r5, [sp, #4]
 8000a82:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a84:	03bf      	lsls	r7, r7, #14
 8000a86:	d401      	bmi.n	8000a8c <HAL_GPIO_Init+0x114>
        temp &= ~((uint32_t)iocurrent);
 8000a88:	0035      	movs	r5, r6
 8000a8a:	4025      	ands	r5, r4
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a8c:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 8000a8e:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000a90:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8000a92:	9d01      	ldr	r5, [sp, #4]
 8000a94:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a96:	02ff      	lsls	r7, r7, #11
 8000a98:	d401      	bmi.n	8000a9e <HAL_GPIO_Init+0x126>
        temp &= ~((uint32_t)iocurrent);
 8000a9a:	0035      	movs	r5, r6
 8000a9c:	4025      	ands	r5, r4
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a9e:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 8000aa0:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000aa2:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 8000aa4:	9e01      	ldr	r6, [sp, #4]
 8000aa6:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000aa8:	02bf      	lsls	r7, r7, #10
 8000aaa:	d401      	bmi.n	8000ab0 <HAL_GPIO_Init+0x138>
        temp &= ~((uint32_t)iocurrent);
 8000aac:	4025      	ands	r5, r4
 8000aae:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 8000ab0:	60d6      	str	r6, [r2, #12]
    position++;
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	e765      	b.n	8000982 <HAL_GPIO_Init+0xa>
 8000ab6:	46c0      	nop			; (mov r8, r8)
 8000ab8:	40021000 	.word	0x40021000
 8000abc:	40010000 	.word	0x40010000
 8000ac0:	50000400 	.word	0x50000400
 8000ac4:	50000800 	.word	0x50000800
 8000ac8:	40010400 	.word	0x40010400

08000acc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000acc:	2a00      	cmp	r2, #0
 8000ace:	d001      	beq.n	8000ad4 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ad0:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000ad2:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8000ad4:	6281      	str	r1, [r0, #40]	; 0x28
}
 8000ad6:	e7fc      	b.n	8000ad2 <HAL_GPIO_WritePin+0x6>

08000ad8 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000ad8:	4b04      	ldr	r3, [pc, #16]	; (8000aec <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 8000ada:	b510      	push	{r4, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000adc:	695a      	ldr	r2, [r3, #20]
 8000ade:	4210      	tst	r0, r2
 8000ae0:	d002      	beq.n	8000ae8 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000ae2:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000ae4:	f000 ff6a 	bl	80019bc <HAL_GPIO_EXTI_Callback>
  }
}
 8000ae8:	bd10      	pop	{r4, pc}
 8000aea:	46c0      	nop			; (mov r8, r8)
 8000aec:	40010400 	.word	0x40010400

08000af0 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000af0:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8000af2:	4b18      	ldr	r3, [pc, #96]	; (8000b54 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8000af4:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 8000af6:	68d9      	ldr	r1, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8000af8:	400a      	ands	r2, r1
 8000afa:	2a08      	cmp	r2, #8
 8000afc:	d026      	beq.n	8000b4c <HAL_RCC_GetSysClockFreq+0x5c>
 8000afe:	2a0c      	cmp	r2, #12
 8000b00:	d006      	beq.n	8000b10 <HAL_RCC_GetSysClockFreq+0x20>
 8000b02:	2a04      	cmp	r2, #4
 8000b04:	d11a      	bne.n	8000b3c <HAL_RCC_GetSysClockFreq+0x4c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	06db      	lsls	r3, r3, #27
 8000b0a:	d421      	bmi.n	8000b50 <HAL_RCC_GetSysClockFreq+0x60>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 8000b0c:	4812      	ldr	r0, [pc, #72]	; (8000b58 <HAL_RCC_GetSysClockFreq+0x68>)
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 8000b0e:	bd10      	pop	{r4, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8000b10:	028a      	lsls	r2, r1, #10
 8000b12:	4812      	ldr	r0, [pc, #72]	; (8000b5c <HAL_RCC_GetSysClockFreq+0x6c>)
 8000b14:	0f12      	lsrs	r2, r2, #28
 8000b16:	5c82      	ldrb	r2, [r0, r2]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8000b18:	0209      	lsls	r1, r1, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000b1a:	68d8      	ldr	r0, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8000b1c:	0f89      	lsrs	r1, r1, #30
 8000b1e:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000b20:	03c0      	lsls	r0, r0, #15
 8000b22:	d504      	bpl.n	8000b2e <HAL_RCC_GetSysClockFreq+0x3e>
        pllvco = (HSE_VALUE * pllm) / plld;
 8000b24:	480e      	ldr	r0, [pc, #56]	; (8000b60 <HAL_RCC_GetSysClockFreq+0x70>)
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8000b26:	4350      	muls	r0, r2
 8000b28:	f7ff faf8 	bl	800011c <__udivsi3>
 8000b2c:	e7ef      	b.n	8000b0e <HAL_RCC_GetSysClockFreq+0x1e>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	06db      	lsls	r3, r3, #27
 8000b32:	d501      	bpl.n	8000b38 <HAL_RCC_GetSysClockFreq+0x48>
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8000b34:	480b      	ldr	r0, [pc, #44]	; (8000b64 <HAL_RCC_GetSysClockFreq+0x74>)
 8000b36:	e7f6      	b.n	8000b26 <HAL_RCC_GetSysClockFreq+0x36>
         pllvco = (HSI_VALUE * pllm) / plld;
 8000b38:	4807      	ldr	r0, [pc, #28]	; (8000b58 <HAL_RCC_GetSysClockFreq+0x68>)
 8000b3a:	e7f4      	b.n	8000b26 <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8000b3c:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8000b3e:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8000b40:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8000b42:	041b      	lsls	r3, r3, #16
 8000b44:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8000b46:	3301      	adds	r3, #1
 8000b48:	4098      	lsls	r0, r3
 8000b4a:	e7e0      	b.n	8000b0e <HAL_RCC_GetSysClockFreq+0x1e>
      sysclockfreq = HSE_VALUE;
 8000b4c:	4804      	ldr	r0, [pc, #16]	; (8000b60 <HAL_RCC_GetSysClockFreq+0x70>)
 8000b4e:	e7de      	b.n	8000b0e <HAL_RCC_GetSysClockFreq+0x1e>
        sysclockfreq =  (HSI_VALUE >> 2);
 8000b50:	4804      	ldr	r0, [pc, #16]	; (8000b64 <HAL_RCC_GetSysClockFreq+0x74>)
  return sysclockfreq;
 8000b52:	e7dc      	b.n	8000b0e <HAL_RCC_GetSysClockFreq+0x1e>
 8000b54:	40021000 	.word	0x40021000
 8000b58:	00f42400 	.word	0x00f42400
 8000b5c:	08001d1c 	.word	0x08001d1c
 8000b60:	007a1200 	.word	0x007a1200
 8000b64:	003d0900 	.word	0x003d0900

08000b68 <HAL_RCC_OscConfig>:
{
 8000b68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b6a:	0005      	movs	r5, r0
 8000b6c:	b087      	sub	sp, #28
  if(RCC_OscInitStruct == NULL)
 8000b6e:	2800      	cmp	r0, #0
 8000b70:	d102      	bne.n	8000b78 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8000b72:	2001      	movs	r0, #1
}
 8000b74:	b007      	add	sp, #28
 8000b76:	bdf0      	pop	{r4, r5, r6, r7, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000b78:	230c      	movs	r3, #12
 8000b7a:	4cc0      	ldr	r4, [pc, #768]	; (8000e7c <HAL_RCC_OscConfig+0x314>)
 8000b7c:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000b7e:	68e2      	ldr	r2, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000b80:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000b82:	2380      	movs	r3, #128	; 0x80
 8000b84:	025b      	lsls	r3, r3, #9
 8000b86:	401a      	ands	r2, r3
 8000b88:	9201      	str	r2, [sp, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b8a:	6802      	ldr	r2, [r0, #0]
 8000b8c:	07d2      	lsls	r2, r2, #31
 8000b8e:	d43d      	bmi.n	8000c0c <HAL_RCC_OscConfig+0xa4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b90:	682b      	ldr	r3, [r5, #0]
 8000b92:	079b      	lsls	r3, r3, #30
 8000b94:	d500      	bpl.n	8000b98 <HAL_RCC_OscConfig+0x30>
 8000b96:	e083      	b.n	8000ca0 <HAL_RCC_OscConfig+0x138>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000b98:	682b      	ldr	r3, [r5, #0]
 8000b9a:	06db      	lsls	r3, r3, #27
 8000b9c:	d528      	bpl.n	8000bf0 <HAL_RCC_OscConfig+0x88>
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8000b9e:	2e00      	cmp	r6, #0
 8000ba0:	d000      	beq.n	8000ba4 <HAL_RCC_OscConfig+0x3c>
 8000ba2:	e0dd      	b.n	8000d60 <HAL_RCC_OscConfig+0x1f8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000ba4:	6823      	ldr	r3, [r4, #0]
 8000ba6:	059b      	lsls	r3, r3, #22
 8000ba8:	d502      	bpl.n	8000bb0 <HAL_RCC_OscConfig+0x48>
 8000baa:	69ab      	ldr	r3, [r5, #24]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d0e0      	beq.n	8000b72 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000bb0:	6862      	ldr	r2, [r4, #4]
 8000bb2:	49b3      	ldr	r1, [pc, #716]	; (8000e80 <HAL_RCC_OscConfig+0x318>)
 8000bb4:	6a2b      	ldr	r3, [r5, #32]
 8000bb6:	400a      	ands	r2, r1
 8000bb8:	431a      	orrs	r2, r3
 8000bba:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000bbc:	6861      	ldr	r1, [r4, #4]
 8000bbe:	69ea      	ldr	r2, [r5, #28]
 8000bc0:	0209      	lsls	r1, r1, #8
 8000bc2:	0a09      	lsrs	r1, r1, #8
 8000bc4:	0612      	lsls	r2, r2, #24
 8000bc6:	430a      	orrs	r2, r1
 8000bc8:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000bca:	2280      	movs	r2, #128	; 0x80
 8000bcc:	0b5b      	lsrs	r3, r3, #13
 8000bce:	3301      	adds	r3, #1
 8000bd0:	0212      	lsls	r2, r2, #8
 8000bd2:	409a      	lsls	r2, r3
 8000bd4:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000bd6:	68e1      	ldr	r1, [r4, #12]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8000bd8:	2000      	movs	r0, #0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000bda:	060a      	lsls	r2, r1, #24
 8000bdc:	49a9      	ldr	r1, [pc, #676]	; (8000e84 <HAL_RCC_OscConfig+0x31c>)
 8000bde:	0f12      	lsrs	r2, r2, #28
 8000be0:	5c8a      	ldrb	r2, [r1, r2]
 8000be2:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000be4:	4aa8      	ldr	r2, [pc, #672]	; (8000e88 <HAL_RCC_OscConfig+0x320>)
 8000be6:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8000be8:	f7ff fc0e 	bl	8000408 <HAL_InitTick>
        if(status != HAL_OK)
 8000bec:	2800      	cmp	r0, #0
 8000bee:	d1c1      	bne.n	8000b74 <HAL_RCC_OscConfig+0xc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000bf0:	682b      	ldr	r3, [r5, #0]
 8000bf2:	071b      	lsls	r3, r3, #28
 8000bf4:	d500      	bpl.n	8000bf8 <HAL_RCC_OscConfig+0x90>
 8000bf6:	e0ea      	b.n	8000dce <HAL_RCC_OscConfig+0x266>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000bf8:	682b      	ldr	r3, [r5, #0]
 8000bfa:	075b      	lsls	r3, r3, #29
 8000bfc:	d500      	bpl.n	8000c00 <HAL_RCC_OscConfig+0x98>
 8000bfe:	e10c      	b.n	8000e1a <HAL_RCC_OscConfig+0x2b2>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000c00:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d000      	beq.n	8000c08 <HAL_RCC_OscConfig+0xa0>
 8000c06:	e191      	b.n	8000f2c <HAL_RCC_OscConfig+0x3c4>
  return HAL_OK;
 8000c08:	2000      	movs	r0, #0
 8000c0a:	e7b3      	b.n	8000b74 <HAL_RCC_OscConfig+0xc>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c0c:	2e08      	cmp	r6, #8
 8000c0e:	d004      	beq.n	8000c1a <HAL_RCC_OscConfig+0xb2>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000c10:	2e0c      	cmp	r6, #12
 8000c12:	d109      	bne.n	8000c28 <HAL_RCC_OscConfig+0xc0>
 8000c14:	9a01      	ldr	r2, [sp, #4]
 8000c16:	2a00      	cmp	r2, #0
 8000c18:	d006      	beq.n	8000c28 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c1a:	6823      	ldr	r3, [r4, #0]
 8000c1c:	039b      	lsls	r3, r3, #14
 8000c1e:	d5b7      	bpl.n	8000b90 <HAL_RCC_OscConfig+0x28>
 8000c20:	686b      	ldr	r3, [r5, #4]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d1b4      	bne.n	8000b90 <HAL_RCC_OscConfig+0x28>
 8000c26:	e7a4      	b.n	8000b72 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c28:	686a      	ldr	r2, [r5, #4]
 8000c2a:	429a      	cmp	r2, r3
 8000c2c:	d111      	bne.n	8000c52 <HAL_RCC_OscConfig+0xea>
 8000c2e:	6822      	ldr	r2, [r4, #0]
 8000c30:	4313      	orrs	r3, r2
 8000c32:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000c34:	f7ff fc2c 	bl	8000490 <HAL_GetTick>
 8000c38:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000c3a:	2280      	movs	r2, #128	; 0x80
 8000c3c:	6823      	ldr	r3, [r4, #0]
 8000c3e:	0292      	lsls	r2, r2, #10
 8000c40:	4213      	tst	r3, r2
 8000c42:	d1a5      	bne.n	8000b90 <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c44:	f7ff fc24 	bl	8000490 <HAL_GetTick>
 8000c48:	1bc0      	subs	r0, r0, r7
 8000c4a:	2864      	cmp	r0, #100	; 0x64
 8000c4c:	d9f5      	bls.n	8000c3a <HAL_RCC_OscConfig+0xd2>
            return HAL_TIMEOUT;
 8000c4e:	2003      	movs	r0, #3
 8000c50:	e790      	b.n	8000b74 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c52:	21a0      	movs	r1, #160	; 0xa0
 8000c54:	02c9      	lsls	r1, r1, #11
 8000c56:	428a      	cmp	r2, r1
 8000c58:	d105      	bne.n	8000c66 <HAL_RCC_OscConfig+0xfe>
 8000c5a:	2280      	movs	r2, #128	; 0x80
 8000c5c:	6821      	ldr	r1, [r4, #0]
 8000c5e:	02d2      	lsls	r2, r2, #11
 8000c60:	430a      	orrs	r2, r1
 8000c62:	6022      	str	r2, [r4, #0]
 8000c64:	e7e3      	b.n	8000c2e <HAL_RCC_OscConfig+0xc6>
 8000c66:	6821      	ldr	r1, [r4, #0]
 8000c68:	4888      	ldr	r0, [pc, #544]	; (8000e8c <HAL_RCC_OscConfig+0x324>)
 8000c6a:	4001      	ands	r1, r0
 8000c6c:	6021      	str	r1, [r4, #0]
 8000c6e:	6821      	ldr	r1, [r4, #0]
 8000c70:	400b      	ands	r3, r1
 8000c72:	9305      	str	r3, [sp, #20]
 8000c74:	9b05      	ldr	r3, [sp, #20]
 8000c76:	4986      	ldr	r1, [pc, #536]	; (8000e90 <HAL_RCC_OscConfig+0x328>)
 8000c78:	6823      	ldr	r3, [r4, #0]
 8000c7a:	400b      	ands	r3, r1
 8000c7c:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c7e:	2a00      	cmp	r2, #0
 8000c80:	d1d8      	bne.n	8000c34 <HAL_RCC_OscConfig+0xcc>
        tickstart = HAL_GetTick();
 8000c82:	f7ff fc05 	bl	8000490 <HAL_GetTick>
 8000c86:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000c88:	2280      	movs	r2, #128	; 0x80
 8000c8a:	6823      	ldr	r3, [r4, #0]
 8000c8c:	0292      	lsls	r2, r2, #10
 8000c8e:	4213      	tst	r3, r2
 8000c90:	d100      	bne.n	8000c94 <HAL_RCC_OscConfig+0x12c>
 8000c92:	e77d      	b.n	8000b90 <HAL_RCC_OscConfig+0x28>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c94:	f7ff fbfc 	bl	8000490 <HAL_GetTick>
 8000c98:	1bc0      	subs	r0, r0, r7
 8000c9a:	2864      	cmp	r0, #100	; 0x64
 8000c9c:	d9f4      	bls.n	8000c88 <HAL_RCC_OscConfig+0x120>
 8000c9e:	e7d6      	b.n	8000c4e <HAL_RCC_OscConfig+0xe6>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8000ca0:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 8000ca2:	68eb      	ldr	r3, [r5, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8000ca4:	4213      	tst	r3, r2
 8000ca6:	d003      	beq.n	8000cb0 <HAL_RCC_OscConfig+0x148>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8000ca8:	6821      	ldr	r1, [r4, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 8000caa:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8000cac:	4311      	orrs	r1, r2
 8000cae:	6021      	str	r1, [r4, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000cb0:	2e04      	cmp	r6, #4
 8000cb2:	d004      	beq.n	8000cbe <HAL_RCC_OscConfig+0x156>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000cb4:	2e0c      	cmp	r6, #12
 8000cb6:	d125      	bne.n	8000d04 <HAL_RCC_OscConfig+0x19c>
 8000cb8:	9a01      	ldr	r2, [sp, #4]
 8000cba:	2a00      	cmp	r2, #0
 8000cbc:	d122      	bne.n	8000d04 <HAL_RCC_OscConfig+0x19c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8000cbe:	6822      	ldr	r2, [r4, #0]
 8000cc0:	0752      	lsls	r2, r2, #29
 8000cc2:	d502      	bpl.n	8000cca <HAL_RCC_OscConfig+0x162>
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d100      	bne.n	8000cca <HAL_RCC_OscConfig+0x162>
 8000cc8:	e753      	b.n	8000b72 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cca:	6861      	ldr	r1, [r4, #4]
 8000ccc:	692a      	ldr	r2, [r5, #16]
 8000cce:	4871      	ldr	r0, [pc, #452]	; (8000e94 <HAL_RCC_OscConfig+0x32c>)
 8000cd0:	0212      	lsls	r2, r2, #8
 8000cd2:	4001      	ands	r1, r0
 8000cd4:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000cd6:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cd8:	6062      	str	r2, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000cda:	6822      	ldr	r2, [r4, #0]
 8000cdc:	438a      	bics	r2, r1
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000ce2:	f7ff ff05 	bl	8000af0 <HAL_RCC_GetSysClockFreq>
 8000ce6:	68e3      	ldr	r3, [r4, #12]
 8000ce8:	4a66      	ldr	r2, [pc, #408]	; (8000e84 <HAL_RCC_OscConfig+0x31c>)
 8000cea:	061b      	lsls	r3, r3, #24
 8000cec:	0f1b      	lsrs	r3, r3, #28
 8000cee:	5cd3      	ldrb	r3, [r2, r3]
 8000cf0:	40d8      	lsrs	r0, r3
 8000cf2:	4b65      	ldr	r3, [pc, #404]	; (8000e88 <HAL_RCC_OscConfig+0x320>)
 8000cf4:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8000cf6:	2000      	movs	r0, #0
 8000cf8:	f7ff fb86 	bl	8000408 <HAL_InitTick>
      if(status != HAL_OK)
 8000cfc:	2800      	cmp	r0, #0
 8000cfe:	d100      	bne.n	8000d02 <HAL_RCC_OscConfig+0x19a>
 8000d00:	e74a      	b.n	8000b98 <HAL_RCC_OscConfig+0x30>
 8000d02:	e737      	b.n	8000b74 <HAL_RCC_OscConfig+0xc>
      if(hsi_state != RCC_HSI_OFF)
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d019      	beq.n	8000d3c <HAL_RCC_OscConfig+0x1d4>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000d08:	2109      	movs	r1, #9
 8000d0a:	6822      	ldr	r2, [r4, #0]
 8000d0c:	438a      	bics	r2, r1
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000d12:	f7ff fbbd 	bl	8000490 <HAL_GetTick>
 8000d16:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000d18:	2204      	movs	r2, #4
 8000d1a:	6823      	ldr	r3, [r4, #0]
 8000d1c:	4213      	tst	r3, r2
 8000d1e:	d007      	beq.n	8000d30 <HAL_RCC_OscConfig+0x1c8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d20:	6862      	ldr	r2, [r4, #4]
 8000d22:	692b      	ldr	r3, [r5, #16]
 8000d24:	495b      	ldr	r1, [pc, #364]	; (8000e94 <HAL_RCC_OscConfig+0x32c>)
 8000d26:	021b      	lsls	r3, r3, #8
 8000d28:	400a      	ands	r2, r1
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	6063      	str	r3, [r4, #4]
 8000d2e:	e733      	b.n	8000b98 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d30:	f7ff fbae 	bl	8000490 <HAL_GetTick>
 8000d34:	1bc0      	subs	r0, r0, r7
 8000d36:	2802      	cmp	r0, #2
 8000d38:	d9ee      	bls.n	8000d18 <HAL_RCC_OscConfig+0x1b0>
 8000d3a:	e788      	b.n	8000c4e <HAL_RCC_OscConfig+0xe6>
        __HAL_RCC_HSI_DISABLE();
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	6823      	ldr	r3, [r4, #0]
 8000d40:	4393      	bics	r3, r2
 8000d42:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000d44:	f7ff fba4 	bl	8000490 <HAL_GetTick>
 8000d48:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000d4a:	2204      	movs	r2, #4
 8000d4c:	6823      	ldr	r3, [r4, #0]
 8000d4e:	4213      	tst	r3, r2
 8000d50:	d100      	bne.n	8000d54 <HAL_RCC_OscConfig+0x1ec>
 8000d52:	e721      	b.n	8000b98 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d54:	f7ff fb9c 	bl	8000490 <HAL_GetTick>
 8000d58:	1bc0      	subs	r0, r0, r7
 8000d5a:	2802      	cmp	r0, #2
 8000d5c:	d9f5      	bls.n	8000d4a <HAL_RCC_OscConfig+0x1e2>
 8000d5e:	e776      	b.n	8000c4e <HAL_RCC_OscConfig+0xe6>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000d60:	69ab      	ldr	r3, [r5, #24]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d020      	beq.n	8000da8 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_MSI_ENABLE();
 8000d66:	2380      	movs	r3, #128	; 0x80
 8000d68:	6822      	ldr	r2, [r4, #0]
 8000d6a:	005b      	lsls	r3, r3, #1
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000d70:	f7ff fb8e 	bl	8000490 <HAL_GetTick>
 8000d74:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000d76:	2280      	movs	r2, #128	; 0x80
 8000d78:	6823      	ldr	r3, [r4, #0]
 8000d7a:	0092      	lsls	r2, r2, #2
 8000d7c:	4213      	tst	r3, r2
 8000d7e:	d00d      	beq.n	8000d9c <HAL_RCC_OscConfig+0x234>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d80:	6863      	ldr	r3, [r4, #4]
 8000d82:	4a3f      	ldr	r2, [pc, #252]	; (8000e80 <HAL_RCC_OscConfig+0x318>)
 8000d84:	4013      	ands	r3, r2
 8000d86:	6a2a      	ldr	r2, [r5, #32]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d8c:	6862      	ldr	r2, [r4, #4]
 8000d8e:	69eb      	ldr	r3, [r5, #28]
 8000d90:	0212      	lsls	r2, r2, #8
 8000d92:	061b      	lsls	r3, r3, #24
 8000d94:	0a12      	lsrs	r2, r2, #8
 8000d96:	4313      	orrs	r3, r2
 8000d98:	6063      	str	r3, [r4, #4]
 8000d9a:	e729      	b.n	8000bf0 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000d9c:	f7ff fb78 	bl	8000490 <HAL_GetTick>
 8000da0:	1bc0      	subs	r0, r0, r7
 8000da2:	2802      	cmp	r0, #2
 8000da4:	d9e7      	bls.n	8000d76 <HAL_RCC_OscConfig+0x20e>
 8000da6:	e752      	b.n	8000c4e <HAL_RCC_OscConfig+0xe6>
        __HAL_RCC_MSI_DISABLE();
 8000da8:	6823      	ldr	r3, [r4, #0]
 8000daa:	4a3b      	ldr	r2, [pc, #236]	; (8000e98 <HAL_RCC_OscConfig+0x330>)
 8000dac:	4013      	ands	r3, r2
 8000dae:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000db0:	f7ff fb6e 	bl	8000490 <HAL_GetTick>
 8000db4:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000db6:	2280      	movs	r2, #128	; 0x80
 8000db8:	6823      	ldr	r3, [r4, #0]
 8000dba:	0092      	lsls	r2, r2, #2
 8000dbc:	4213      	tst	r3, r2
 8000dbe:	d100      	bne.n	8000dc2 <HAL_RCC_OscConfig+0x25a>
 8000dc0:	e716      	b.n	8000bf0 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000dc2:	f7ff fb65 	bl	8000490 <HAL_GetTick>
 8000dc6:	1bc0      	subs	r0, r0, r7
 8000dc8:	2802      	cmp	r0, #2
 8000dca:	d9f4      	bls.n	8000db6 <HAL_RCC_OscConfig+0x24e>
 8000dcc:	e73f      	b.n	8000c4e <HAL_RCC_OscConfig+0xe6>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000dce:	696a      	ldr	r2, [r5, #20]
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d010      	beq.n	8000df8 <HAL_RCC_OscConfig+0x290>
      __HAL_RCC_LSI_ENABLE();
 8000dd6:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000ddc:	f7ff fb58 	bl	8000490 <HAL_GetTick>
 8000de0:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000de2:	2202      	movs	r2, #2
 8000de4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000de6:	4213      	tst	r3, r2
 8000de8:	d000      	beq.n	8000dec <HAL_RCC_OscConfig+0x284>
 8000dea:	e705      	b.n	8000bf8 <HAL_RCC_OscConfig+0x90>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000dec:	f7ff fb50 	bl	8000490 <HAL_GetTick>
 8000df0:	1bc0      	subs	r0, r0, r7
 8000df2:	2802      	cmp	r0, #2
 8000df4:	d9f5      	bls.n	8000de2 <HAL_RCC_OscConfig+0x27a>
 8000df6:	e72a      	b.n	8000c4e <HAL_RCC_OscConfig+0xe6>
      __HAL_RCC_LSI_DISABLE();
 8000df8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8000dfa:	439a      	bics	r2, r3
 8000dfc:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000dfe:	f7ff fb47 	bl	8000490 <HAL_GetTick>
 8000e02:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000e04:	2202      	movs	r2, #2
 8000e06:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000e08:	4213      	tst	r3, r2
 8000e0a:	d100      	bne.n	8000e0e <HAL_RCC_OscConfig+0x2a6>
 8000e0c:	e6f4      	b.n	8000bf8 <HAL_RCC_OscConfig+0x90>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e0e:	f7ff fb3f 	bl	8000490 <HAL_GetTick>
 8000e12:	1bc0      	subs	r0, r0, r7
 8000e14:	2802      	cmp	r0, #2
 8000e16:	d9f5      	bls.n	8000e04 <HAL_RCC_OscConfig+0x29c>
 8000e18:	e719      	b.n	8000c4e <HAL_RCC_OscConfig+0xe6>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e1a:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000e1c:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e1e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000e20:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8000e22:	9101      	str	r1, [sp, #4]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e24:	421a      	tst	r2, r3
 8000e26:	d104      	bne.n	8000e32 <HAL_RCC_OscConfig+0x2ca>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e28:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	9301      	str	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e32:	2280      	movs	r2, #128	; 0x80
 8000e34:	4f19      	ldr	r7, [pc, #100]	; (8000e9c <HAL_RCC_OscConfig+0x334>)
 8000e36:	0052      	lsls	r2, r2, #1
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	4213      	tst	r3, r2
 8000e3c:	d008      	beq.n	8000e50 <HAL_RCC_OscConfig+0x2e8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e3e:	2280      	movs	r2, #128	; 0x80
 8000e40:	68ab      	ldr	r3, [r5, #8]
 8000e42:	0052      	lsls	r2, r2, #1
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d12b      	bne.n	8000ea0 <HAL_RCC_OscConfig+0x338>
 8000e48:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	6523      	str	r3, [r4, #80]	; 0x50
 8000e4e:	e04c      	b.n	8000eea <HAL_RCC_OscConfig+0x382>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e50:	2280      	movs	r2, #128	; 0x80
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	0052      	lsls	r2, r2, #1
 8000e56:	4313      	orrs	r3, r2
 8000e58:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000e5a:	f7ff fb19 	bl	8000490 <HAL_GetTick>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e5e:	2380      	movs	r3, #128	; 0x80
 8000e60:	005b      	lsls	r3, r3, #1
      tickstart = HAL_GetTick();
 8000e62:	9002      	str	r0, [sp, #8]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e64:	9303      	str	r3, [sp, #12]
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	9a03      	ldr	r2, [sp, #12]
 8000e6a:	4213      	tst	r3, r2
 8000e6c:	d1e7      	bne.n	8000e3e <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e6e:	f7ff fb0f 	bl	8000490 <HAL_GetTick>
 8000e72:	9b02      	ldr	r3, [sp, #8]
 8000e74:	1ac0      	subs	r0, r0, r3
 8000e76:	2864      	cmp	r0, #100	; 0x64
 8000e78:	d9f5      	bls.n	8000e66 <HAL_RCC_OscConfig+0x2fe>
 8000e7a:	e6e8      	b.n	8000c4e <HAL_RCC_OscConfig+0xe6>
 8000e7c:	40021000 	.word	0x40021000
 8000e80:	ffff1fff 	.word	0xffff1fff
 8000e84:	08001d0c 	.word	0x08001d0c
 8000e88:	2000000c 	.word	0x2000000c
 8000e8c:	fffeffff 	.word	0xfffeffff
 8000e90:	fffbffff 	.word	0xfffbffff
 8000e94:	ffffe0ff 	.word	0xffffe0ff
 8000e98:	fffffeff 	.word	0xfffffeff
 8000e9c:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d116      	bne.n	8000ed2 <HAL_RCC_OscConfig+0x36a>
 8000ea4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000ea6:	4a53      	ldr	r2, [pc, #332]	; (8000ff4 <HAL_RCC_OscConfig+0x48c>)
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	6523      	str	r3, [r4, #80]	; 0x50
 8000eac:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000eae:	4a52      	ldr	r2, [pc, #328]	; (8000ff8 <HAL_RCC_OscConfig+0x490>)
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000eb4:	f7ff faec 	bl	8000490 <HAL_GetTick>
 8000eb8:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000eba:	2280      	movs	r2, #128	; 0x80
 8000ebc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000ebe:	0092      	lsls	r2, r2, #2
 8000ec0:	4213      	tst	r3, r2
 8000ec2:	d02a      	beq.n	8000f1a <HAL_RCC_OscConfig+0x3b2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ec4:	f7ff fae4 	bl	8000490 <HAL_GetTick>
 8000ec8:	4b4c      	ldr	r3, [pc, #304]	; (8000ffc <HAL_RCC_OscConfig+0x494>)
 8000eca:	1bc0      	subs	r0, r0, r7
 8000ecc:	4298      	cmp	r0, r3
 8000ece:	d9f4      	bls.n	8000eba <HAL_RCC_OscConfig+0x352>
 8000ed0:	e6bd      	b.n	8000c4e <HAL_RCC_OscConfig+0xe6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ed2:	21a0      	movs	r1, #160	; 0xa0
 8000ed4:	00c9      	lsls	r1, r1, #3
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	d10b      	bne.n	8000ef2 <HAL_RCC_OscConfig+0x38a>
 8000eda:	2380      	movs	r3, #128	; 0x80
 8000edc:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8000ede:	00db      	lsls	r3, r3, #3
 8000ee0:	430b      	orrs	r3, r1
 8000ee2:	6523      	str	r3, [r4, #80]	; 0x50
 8000ee4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000ee6:	431a      	orrs	r2, r3
 8000ee8:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000eea:	f7ff fad1 	bl	8000490 <HAL_GetTick>
 8000eee:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000ef0:	e00e      	b.n	8000f10 <HAL_RCC_OscConfig+0x3a8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ef2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000ef4:	4a3f      	ldr	r2, [pc, #252]	; (8000ff4 <HAL_RCC_OscConfig+0x48c>)
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	6523      	str	r3, [r4, #80]	; 0x50
 8000efa:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000efc:	4a3e      	ldr	r2, [pc, #248]	; (8000ff8 <HAL_RCC_OscConfig+0x490>)
 8000efe:	4013      	ands	r3, r2
 8000f00:	e7a4      	b.n	8000e4c <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f02:	f7ff fac5 	bl	8000490 <HAL_GetTick>
 8000f06:	4b3d      	ldr	r3, [pc, #244]	; (8000ffc <HAL_RCC_OscConfig+0x494>)
 8000f08:	1bc0      	subs	r0, r0, r7
 8000f0a:	4298      	cmp	r0, r3
 8000f0c:	d900      	bls.n	8000f10 <HAL_RCC_OscConfig+0x3a8>
 8000f0e:	e69e      	b.n	8000c4e <HAL_RCC_OscConfig+0xe6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000f10:	2280      	movs	r2, #128	; 0x80
 8000f12:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000f14:	0092      	lsls	r2, r2, #2
 8000f16:	4213      	tst	r3, r2
 8000f18:	d0f3      	beq.n	8000f02 <HAL_RCC_OscConfig+0x39a>
    if(pwrclkchanged == SET)
 8000f1a:	9b01      	ldr	r3, [sp, #4]
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d000      	beq.n	8000f22 <HAL_RCC_OscConfig+0x3ba>
 8000f20:	e66e      	b.n	8000c00 <HAL_RCC_OscConfig+0x98>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f22:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000f24:	4a36      	ldr	r2, [pc, #216]	; (8001000 <HAL_RCC_OscConfig+0x498>)
 8000f26:	4013      	ands	r3, r2
 8000f28:	63a3      	str	r3, [r4, #56]	; 0x38
 8000f2a:	e669      	b.n	8000c00 <HAL_RCC_OscConfig+0x98>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f2c:	2e0c      	cmp	r6, #12
 8000f2e:	d043      	beq.n	8000fb8 <HAL_RCC_OscConfig+0x450>
 8000f30:	4a34      	ldr	r2, [pc, #208]	; (8001004 <HAL_RCC_OscConfig+0x49c>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f32:	2b02      	cmp	r3, #2
 8000f34:	d12e      	bne.n	8000f94 <HAL_RCC_OscConfig+0x42c>
        __HAL_RCC_PLL_DISABLE();
 8000f36:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000f38:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000f3e:	f7ff faa7 	bl	8000490 <HAL_GetTick>
 8000f42:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000f44:	04b6      	lsls	r6, r6, #18
 8000f46:	6823      	ldr	r3, [r4, #0]
 8000f48:	4233      	tst	r3, r6
 8000f4a:	d11d      	bne.n	8000f88 <HAL_RCC_OscConfig+0x420>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f4c:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8000f4e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000f50:	68e2      	ldr	r2, [r4, #12]
 8000f52:	430b      	orrs	r3, r1
 8000f54:	492c      	ldr	r1, [pc, #176]	; (8001008 <HAL_RCC_OscConfig+0x4a0>)
 8000f56:	400a      	ands	r2, r1
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8000f5c:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8000f62:	2380      	movs	r3, #128	; 0x80
 8000f64:	6822      	ldr	r2, [r4, #0]
 8000f66:	045b      	lsls	r3, r3, #17
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000f6c:	f7ff fa90 	bl	8000490 <HAL_GetTick>
 8000f70:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8000f72:	04ad      	lsls	r5, r5, #18
 8000f74:	6823      	ldr	r3, [r4, #0]
 8000f76:	422b      	tst	r3, r5
 8000f78:	d000      	beq.n	8000f7c <HAL_RCC_OscConfig+0x414>
 8000f7a:	e645      	b.n	8000c08 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f7c:	f7ff fa88 	bl	8000490 <HAL_GetTick>
 8000f80:	1b80      	subs	r0, r0, r6
 8000f82:	2802      	cmp	r0, #2
 8000f84:	d9f6      	bls.n	8000f74 <HAL_RCC_OscConfig+0x40c>
 8000f86:	e662      	b.n	8000c4e <HAL_RCC_OscConfig+0xe6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f88:	f7ff fa82 	bl	8000490 <HAL_GetTick>
 8000f8c:	1bc0      	subs	r0, r0, r7
 8000f8e:	2802      	cmp	r0, #2
 8000f90:	d9d9      	bls.n	8000f46 <HAL_RCC_OscConfig+0x3de>
 8000f92:	e65c      	b.n	8000c4e <HAL_RCC_OscConfig+0xe6>
        __HAL_RCC_PLL_DISABLE();
 8000f94:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000f96:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8000f98:	4013      	ands	r3, r2
 8000f9a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000f9c:	f7ff fa78 	bl	8000490 <HAL_GetTick>
 8000fa0:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000fa2:	04ad      	lsls	r5, r5, #18
 8000fa4:	6823      	ldr	r3, [r4, #0]
 8000fa6:	422b      	tst	r3, r5
 8000fa8:	d100      	bne.n	8000fac <HAL_RCC_OscConfig+0x444>
 8000faa:	e62d      	b.n	8000c08 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fac:	f7ff fa70 	bl	8000490 <HAL_GetTick>
 8000fb0:	1b80      	subs	r0, r0, r6
 8000fb2:	2802      	cmp	r0, #2
 8000fb4:	d9f6      	bls.n	8000fa4 <HAL_RCC_OscConfig+0x43c>
 8000fb6:	e64a      	b.n	8000c4e <HAL_RCC_OscConfig+0xe6>
        return HAL_ERROR;
 8000fb8:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d100      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x458>
 8000fbe:	e5d9      	b.n	8000b74 <HAL_RCC_OscConfig+0xc>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fc0:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 8000fc2:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fc4:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8000fc6:	0252      	lsls	r2, r2, #9
 8000fc8:	401a      	ands	r2, r3
        return HAL_ERROR;
 8000fca:	2001      	movs	r0, #1
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fcc:	428a      	cmp	r2, r1
 8000fce:	d000      	beq.n	8000fd2 <HAL_RCC_OscConfig+0x46a>
 8000fd0:	e5d0      	b.n	8000b74 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8000fd2:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fd4:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8000fd6:	0392      	lsls	r2, r2, #14
 8000fd8:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fda:	428a      	cmp	r2, r1
 8000fdc:	d000      	beq.n	8000fe0 <HAL_RCC_OscConfig+0x478>
 8000fde:	e5c9      	b.n	8000b74 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8000fe0:	20c0      	movs	r0, #192	; 0xc0
 8000fe2:	0400      	lsls	r0, r0, #16
 8000fe4:	4003      	ands	r3, r0
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8000fe6:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8000fe8:	1a18      	subs	r0, r3, r0
 8000fea:	1e43      	subs	r3, r0, #1
 8000fec:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 8000fee:	b2c0      	uxtb	r0, r0
 8000ff0:	e5c0      	b.n	8000b74 <HAL_RCC_OscConfig+0xc>
 8000ff2:	46c0      	nop			; (mov r8, r8)
 8000ff4:	fffffeff 	.word	0xfffffeff
 8000ff8:	fffffbff 	.word	0xfffffbff
 8000ffc:	00001388 	.word	0x00001388
 8001000:	efffffff 	.word	0xefffffff
 8001004:	feffffff 	.word	0xfeffffff
 8001008:	ff02ffff 	.word	0xff02ffff

0800100c <HAL_RCC_ClockConfig>:
{
 800100c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800100e:	1e06      	subs	r6, r0, #0
 8001010:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 8001012:	d101      	bne.n	8001018 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 8001014:	2001      	movs	r0, #1
}
 8001016:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001018:	2201      	movs	r2, #1
 800101a:	4c51      	ldr	r4, [pc, #324]	; (8001160 <HAL_RCC_ClockConfig+0x154>)
 800101c:	9901      	ldr	r1, [sp, #4]
 800101e:	6823      	ldr	r3, [r4, #0]
 8001020:	4013      	ands	r3, r2
 8001022:	428b      	cmp	r3, r1
 8001024:	d327      	bcc.n	8001076 <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001026:	6832      	ldr	r2, [r6, #0]
 8001028:	0793      	lsls	r3, r2, #30
 800102a:	d42f      	bmi.n	800108c <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800102c:	07d3      	lsls	r3, r2, #31
 800102e:	d435      	bmi.n	800109c <HAL_RCC_ClockConfig+0x90>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001030:	2301      	movs	r3, #1
 8001032:	6822      	ldr	r2, [r4, #0]
 8001034:	9901      	ldr	r1, [sp, #4]
 8001036:	401a      	ands	r2, r3
 8001038:	4291      	cmp	r1, r2
 800103a:	d200      	bcs.n	800103e <HAL_RCC_ClockConfig+0x32>
 800103c:	e081      	b.n	8001142 <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800103e:	6832      	ldr	r2, [r6, #0]
 8001040:	4c48      	ldr	r4, [pc, #288]	; (8001164 <HAL_RCC_ClockConfig+0x158>)
 8001042:	0753      	lsls	r3, r2, #29
 8001044:	d500      	bpl.n	8001048 <HAL_RCC_ClockConfig+0x3c>
 8001046:	e084      	b.n	8001152 <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001048:	0713      	lsls	r3, r2, #28
 800104a:	d506      	bpl.n	800105a <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800104c:	68e2      	ldr	r2, [r4, #12]
 800104e:	6933      	ldr	r3, [r6, #16]
 8001050:	4945      	ldr	r1, [pc, #276]	; (8001168 <HAL_RCC_ClockConfig+0x15c>)
 8001052:	00db      	lsls	r3, r3, #3
 8001054:	400a      	ands	r2, r1
 8001056:	4313      	orrs	r3, r2
 8001058:	60e3      	str	r3, [r4, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800105a:	f7ff fd49 	bl	8000af0 <HAL_RCC_GetSysClockFreq>
 800105e:	68e3      	ldr	r3, [r4, #12]
 8001060:	4a42      	ldr	r2, [pc, #264]	; (800116c <HAL_RCC_ClockConfig+0x160>)
 8001062:	061b      	lsls	r3, r3, #24
 8001064:	0f1b      	lsrs	r3, r3, #28
 8001066:	5cd3      	ldrb	r3, [r2, r3]
 8001068:	40d8      	lsrs	r0, r3
 800106a:	4b41      	ldr	r3, [pc, #260]	; (8001170 <HAL_RCC_ClockConfig+0x164>)
 800106c:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(TICK_INT_PRIORITY);
 800106e:	2000      	movs	r0, #0
 8001070:	f7ff f9ca 	bl	8000408 <HAL_InitTick>
 8001074:	e7cf      	b.n	8001016 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001076:	6823      	ldr	r3, [r4, #0]
 8001078:	9901      	ldr	r1, [sp, #4]
 800107a:	4393      	bics	r3, r2
 800107c:	430b      	orrs	r3, r1
 800107e:	6023      	str	r3, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001080:	6823      	ldr	r3, [r4, #0]
 8001082:	4013      	ands	r3, r2
 8001084:	9a01      	ldr	r2, [sp, #4]
 8001086:	429a      	cmp	r2, r3
 8001088:	d1c4      	bne.n	8001014 <HAL_RCC_ClockConfig+0x8>
 800108a:	e7cc      	b.n	8001026 <HAL_RCC_ClockConfig+0x1a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800108c:	20f0      	movs	r0, #240	; 0xf0
 800108e:	4935      	ldr	r1, [pc, #212]	; (8001164 <HAL_RCC_ClockConfig+0x158>)
 8001090:	68cb      	ldr	r3, [r1, #12]
 8001092:	4383      	bics	r3, r0
 8001094:	68b0      	ldr	r0, [r6, #8]
 8001096:	4303      	orrs	r3, r0
 8001098:	60cb      	str	r3, [r1, #12]
 800109a:	e7c7      	b.n	800102c <HAL_RCC_ClockConfig+0x20>
 800109c:	4d31      	ldr	r5, [pc, #196]	; (8001164 <HAL_RCC_ClockConfig+0x158>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800109e:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80010a0:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010a2:	2a02      	cmp	r2, #2
 80010a4:	d119      	bne.n	80010da <HAL_RCC_ClockConfig+0xce>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80010a6:	039b      	lsls	r3, r3, #14
 80010a8:	d5b4      	bpl.n	8001014 <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010aa:	2103      	movs	r1, #3
 80010ac:	68eb      	ldr	r3, [r5, #12]
 80010ae:	438b      	bics	r3, r1
 80010b0:	4313      	orrs	r3, r2
 80010b2:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 80010b4:	f7ff f9ec 	bl	8000490 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010b8:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80010ba:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d119      	bne.n	80010f4 <HAL_RCC_ClockConfig+0xe8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80010c0:	220c      	movs	r2, #12
 80010c2:	68eb      	ldr	r3, [r5, #12]
 80010c4:	4013      	ands	r3, r2
 80010c6:	2b08      	cmp	r3, #8
 80010c8:	d0b2      	beq.n	8001030 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010ca:	f7ff f9e1 	bl	8000490 <HAL_GetTick>
 80010ce:	4b29      	ldr	r3, [pc, #164]	; (8001174 <HAL_RCC_ClockConfig+0x168>)
 80010d0:	1bc0      	subs	r0, r0, r7
 80010d2:	4298      	cmp	r0, r3
 80010d4:	d9f4      	bls.n	80010c0 <HAL_RCC_ClockConfig+0xb4>
          return HAL_TIMEOUT;
 80010d6:	2003      	movs	r0, #3
 80010d8:	e79d      	b.n	8001016 <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010da:	2a03      	cmp	r2, #3
 80010dc:	d102      	bne.n	80010e4 <HAL_RCC_ClockConfig+0xd8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80010de:	019b      	lsls	r3, r3, #6
 80010e0:	d4e3      	bmi.n	80010aa <HAL_RCC_ClockConfig+0x9e>
 80010e2:	e797      	b.n	8001014 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80010e4:	2a01      	cmp	r2, #1
 80010e6:	d102      	bne.n	80010ee <HAL_RCC_ClockConfig+0xe2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80010e8:	075b      	lsls	r3, r3, #29
 80010ea:	d4de      	bmi.n	80010aa <HAL_RCC_ClockConfig+0x9e>
 80010ec:	e792      	b.n	8001014 <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80010ee:	059b      	lsls	r3, r3, #22
 80010f0:	d4db      	bmi.n	80010aa <HAL_RCC_ClockConfig+0x9e>
 80010f2:	e78f      	b.n	8001014 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010f4:	2b03      	cmp	r3, #3
 80010f6:	d10b      	bne.n	8001110 <HAL_RCC_ClockConfig+0x104>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010f8:	220c      	movs	r2, #12
 80010fa:	68eb      	ldr	r3, [r5, #12]
 80010fc:	4013      	ands	r3, r2
 80010fe:	4293      	cmp	r3, r2
 8001100:	d096      	beq.n	8001030 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001102:	f7ff f9c5 	bl	8000490 <HAL_GetTick>
 8001106:	4b1b      	ldr	r3, [pc, #108]	; (8001174 <HAL_RCC_ClockConfig+0x168>)
 8001108:	1bc0      	subs	r0, r0, r7
 800110a:	4298      	cmp	r0, r3
 800110c:	d9f4      	bls.n	80010f8 <HAL_RCC_ClockConfig+0xec>
 800110e:	e7e2      	b.n	80010d6 <HAL_RCC_ClockConfig+0xca>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001110:	2b01      	cmp	r3, #1
 8001112:	d010      	beq.n	8001136 <HAL_RCC_ClockConfig+0x12a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001114:	220c      	movs	r2, #12
 8001116:	68eb      	ldr	r3, [r5, #12]
 8001118:	4213      	tst	r3, r2
 800111a:	d089      	beq.n	8001030 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800111c:	f7ff f9b8 	bl	8000490 <HAL_GetTick>
 8001120:	4b14      	ldr	r3, [pc, #80]	; (8001174 <HAL_RCC_ClockConfig+0x168>)
 8001122:	1bc0      	subs	r0, r0, r7
 8001124:	4298      	cmp	r0, r3
 8001126:	d9f5      	bls.n	8001114 <HAL_RCC_ClockConfig+0x108>
 8001128:	e7d5      	b.n	80010d6 <HAL_RCC_ClockConfig+0xca>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800112a:	f7ff f9b1 	bl	8000490 <HAL_GetTick>
 800112e:	4b11      	ldr	r3, [pc, #68]	; (8001174 <HAL_RCC_ClockConfig+0x168>)
 8001130:	1bc0      	subs	r0, r0, r7
 8001132:	4298      	cmp	r0, r3
 8001134:	d8cf      	bhi.n	80010d6 <HAL_RCC_ClockConfig+0xca>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001136:	220c      	movs	r2, #12
 8001138:	68eb      	ldr	r3, [r5, #12]
 800113a:	4013      	ands	r3, r2
 800113c:	2b04      	cmp	r3, #4
 800113e:	d1f4      	bne.n	800112a <HAL_RCC_ClockConfig+0x11e>
 8001140:	e776      	b.n	8001030 <HAL_RCC_ClockConfig+0x24>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001142:	6822      	ldr	r2, [r4, #0]
 8001144:	439a      	bics	r2, r3
 8001146:	6022      	str	r2, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001148:	6822      	ldr	r2, [r4, #0]
 800114a:	421a      	tst	r2, r3
 800114c:	d000      	beq.n	8001150 <HAL_RCC_ClockConfig+0x144>
 800114e:	e761      	b.n	8001014 <HAL_RCC_ClockConfig+0x8>
 8001150:	e775      	b.n	800103e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001152:	68e3      	ldr	r3, [r4, #12]
 8001154:	4908      	ldr	r1, [pc, #32]	; (8001178 <HAL_RCC_ClockConfig+0x16c>)
 8001156:	400b      	ands	r3, r1
 8001158:	68f1      	ldr	r1, [r6, #12]
 800115a:	430b      	orrs	r3, r1
 800115c:	60e3      	str	r3, [r4, #12]
 800115e:	e773      	b.n	8001048 <HAL_RCC_ClockConfig+0x3c>
 8001160:	40022000 	.word	0x40022000
 8001164:	40021000 	.word	0x40021000
 8001168:	ffffc7ff 	.word	0xffffc7ff
 800116c:	08001d0c 	.word	0x08001d0c
 8001170:	2000000c 	.word	0x2000000c
 8001174:	00001388 	.word	0x00001388
 8001178:	fffff8ff 	.word	0xfffff8ff

0800117c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800117c:	2280      	movs	r2, #128	; 0x80
{
 800117e:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8001180:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001182:	05d2      	lsls	r2, r2, #23
 8001184:	4290      	cmp	r0, r2
 8001186:	d002      	beq.n	800118e <TIM_Base_SetConfig+0x12>
 8001188:	4c0d      	ldr	r4, [pc, #52]	; (80011c0 <TIM_Base_SetConfig+0x44>)
 800118a:	42a0      	cmp	r0, r4
 800118c:	d10c      	bne.n	80011a8 <TIM_Base_SetConfig+0x2c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800118e:	2470      	movs	r4, #112	; 0x70
 8001190:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 8001192:	684c      	ldr	r4, [r1, #4]
 8001194:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001196:	4290      	cmp	r0, r2
 8001198:	d002      	beq.n	80011a0 <TIM_Base_SetConfig+0x24>
 800119a:	4a09      	ldr	r2, [pc, #36]	; (80011c0 <TIM_Base_SetConfig+0x44>)
 800119c:	4290      	cmp	r0, r2
 800119e:	d103      	bne.n	80011a8 <TIM_Base_SetConfig+0x2c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80011a0:	4a08      	ldr	r2, [pc, #32]	; (80011c4 <TIM_Base_SetConfig+0x48>)
 80011a2:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80011a4:	68ca      	ldr	r2, [r1, #12]
 80011a6:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80011a8:	2280      	movs	r2, #128	; 0x80
 80011aa:	4393      	bics	r3, r2
 80011ac:	690a      	ldr	r2, [r1, #16]
 80011ae:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80011b0:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80011b2:	688b      	ldr	r3, [r1, #8]
 80011b4:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80011b6:	680b      	ldr	r3, [r1, #0]
 80011b8:	6283      	str	r3, [r0, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80011ba:	2301      	movs	r3, #1
 80011bc:	6143      	str	r3, [r0, #20]
}
 80011be:	bd10      	pop	{r4, pc}
 80011c0:	40010800 	.word	0x40010800
 80011c4:	fffffcff 	.word	0xfffffcff

080011c8 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80011c8:	2201      	movs	r2, #1
{
 80011ca:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80011cc:	2573      	movs	r5, #115	; 0x73
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80011ce:	6a03      	ldr	r3, [r0, #32]
 80011d0:	4393      	bics	r3, r2
 80011d2:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80011d4:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80011d6:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80011d8:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80011da:	43aa      	bics	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80011dc:	680d      	ldr	r5, [r1, #0]
 80011de:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80011e0:	2502      	movs	r5, #2
 80011e2:	43ab      	bics	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80011e4:	688d      	ldr	r5, [r1, #8]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80011e6:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80011e8:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80011ea:	684a      	ldr	r2, [r1, #4]
  tmpccer |= OC_Config->OCPolarity;
 80011ec:	432b      	orrs	r3, r5
  TIMx->CCR1 = OC_Config->Pulse;
 80011ee:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80011f0:	6203      	str	r3, [r0, #32]
}
 80011f2:	bd30      	pop	{r4, r5, pc}

080011f4 <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80011f4:	2210      	movs	r2, #16
 80011f6:	6a03      	ldr	r3, [r0, #32]
{
 80011f8:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80011fa:	4393      	bics	r3, r2
 80011fc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80011fe:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001200:	4c09      	ldr	r4, [pc, #36]	; (8001228 <TIM_OC2_SetConfig+0x34>)
  tmpcr2 =  TIMx->CR2;
 8001202:	6845      	ldr	r5, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001204:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001206:	4014      	ands	r4, r2

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001208:	680a      	ldr	r2, [r1, #0]
 800120a:	0212      	lsls	r2, r2, #8
 800120c:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800120e:	2420      	movs	r4, #32
 8001210:	43a3      	bics	r3, r4
 8001212:	001c      	movs	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001214:	688b      	ldr	r3, [r1, #8]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001216:	6045      	str	r5, [r0, #4]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001218:	011b      	lsls	r3, r3, #4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800121a:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800121c:	684a      	ldr	r2, [r1, #4]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800121e:	4323      	orrs	r3, r4
  TIMx->CCR2 = OC_Config->Pulse;
 8001220:	6382      	str	r2, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001222:	6203      	str	r3, [r0, #32]
}
 8001224:	bd30      	pop	{r4, r5, pc}
 8001226:	46c0      	nop			; (mov r8, r8)
 8001228:	ffff8cff 	.word	0xffff8cff

0800122c <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800122c:	231f      	movs	r3, #31
{
 800122e:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001230:	2401      	movs	r4, #1
 8001232:	4019      	ands	r1, r3
 8001234:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001236:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 8001238:	6a03      	ldr	r3, [r0, #32]
 800123a:	43a3      	bics	r3, r4
 800123c:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800123e:	6a03      	ldr	r3, [r0, #32]
 8001240:	431a      	orrs	r2, r3
 8001242:	6202      	str	r2, [r0, #32]
}
 8001244:	bd10      	pop	{r4, pc}

08001246 <HAL_TIM_Base_Init>:
{
 8001246:	b570      	push	{r4, r5, r6, lr}
 8001248:	0004      	movs	r4, r0
    return HAL_ERROR;
 800124a:	2001      	movs	r0, #1
  if (htim == NULL)
 800124c:	2c00      	cmp	r4, #0
 800124e:	d014      	beq.n	800127a <HAL_TIM_Base_Init+0x34>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001250:	0025      	movs	r5, r4
 8001252:	3539      	adds	r5, #57	; 0x39
 8001254:	782b      	ldrb	r3, [r5, #0]
 8001256:	b2db      	uxtb	r3, r3
 8001258:	2b00      	cmp	r3, #0
 800125a:	d105      	bne.n	8001268 <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 800125c:	0022      	movs	r2, r4
 800125e:	3238      	adds	r2, #56	; 0x38
 8001260:	7013      	strb	r3, [r2, #0]
    HAL_TIM_Base_MspInit(htim);
 8001262:	0020      	movs	r0, r4
 8001264:	f000 fc3a 	bl	8001adc <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001268:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800126a:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800126c:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800126e:	1d21      	adds	r1, r4, #4
 8001270:	f7ff ff84 	bl	800117c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001274:	2301      	movs	r3, #1
  return HAL_OK;
 8001276:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001278:	702b      	strb	r3, [r5, #0]
}
 800127a:	bd70      	pop	{r4, r5, r6, pc}

0800127c <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 800127c:	0001      	movs	r1, r0
 800127e:	2302      	movs	r3, #2
 8001280:	3139      	adds	r1, #57	; 0x39
 8001282:	700b      	strb	r3, [r1, #0]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001284:	6803      	ldr	r3, [r0, #0]
 8001286:	2007      	movs	r0, #7
 8001288:	689a      	ldr	r2, [r3, #8]
 800128a:	4002      	ands	r2, r0
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800128c:	2a06      	cmp	r2, #6
 800128e:	d003      	beq.n	8001298 <HAL_TIM_Base_Start+0x1c>
    __HAL_TIM_ENABLE(htim);
 8001290:	2201      	movs	r2, #1
 8001292:	6818      	ldr	r0, [r3, #0]
 8001294:	4302      	orrs	r2, r0
 8001296:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8001298:	2301      	movs	r3, #1
}
 800129a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800129c:	700b      	strb	r3, [r1, #0]
}
 800129e:	4770      	bx	lr

080012a0 <HAL_TIM_PWM_MspInit>:
 80012a0:	4770      	bx	lr

080012a2 <HAL_TIM_PWM_Init>:
{
 80012a2:	b570      	push	{r4, r5, r6, lr}
 80012a4:	0004      	movs	r4, r0
    return HAL_ERROR;
 80012a6:	2001      	movs	r0, #1
  if (htim == NULL)
 80012a8:	2c00      	cmp	r4, #0
 80012aa:	d014      	beq.n	80012d6 <HAL_TIM_PWM_Init+0x34>
  if (htim->State == HAL_TIM_STATE_RESET)
 80012ac:	0025      	movs	r5, r4
 80012ae:	3539      	adds	r5, #57	; 0x39
 80012b0:	782b      	ldrb	r3, [r5, #0]
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d105      	bne.n	80012c4 <HAL_TIM_PWM_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 80012b8:	0022      	movs	r2, r4
 80012ba:	3238      	adds	r2, #56	; 0x38
 80012bc:	7013      	strb	r3, [r2, #0]
    HAL_TIM_PWM_MspInit(htim);
 80012be:	0020      	movs	r0, r4
 80012c0:	f7ff ffee 	bl	80012a0 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80012c4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80012c6:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80012c8:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80012ca:	1d21      	adds	r1, r4, #4
 80012cc:	f7ff ff56 	bl	800117c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80012d0:	2301      	movs	r3, #1
  return HAL_OK;
 80012d2:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80012d4:	702b      	strb	r3, [r5, #0]
}
 80012d6:	bd70      	pop	{r4, r5, r6, pc}

080012d8 <HAL_TIM_IC_Start>:
{
 80012d8:	b510      	push	{r4, lr}
 80012da:	0004      	movs	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80012dc:	2201      	movs	r2, #1
 80012de:	6800      	ldr	r0, [r0, #0]
 80012e0:	f7ff ffa4 	bl	800122c <TIM_CCxChannelCmd>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80012e4:	2107      	movs	r1, #7
 80012e6:	6823      	ldr	r3, [r4, #0]
 80012e8:	689a      	ldr	r2, [r3, #8]
 80012ea:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80012ec:	2a06      	cmp	r2, #6
 80012ee:	d003      	beq.n	80012f8 <HAL_TIM_IC_Start+0x20>
    __HAL_TIM_ENABLE(htim);
 80012f0:	2201      	movs	r2, #1
 80012f2:	6819      	ldr	r1, [r3, #0]
 80012f4:	430a      	orrs	r2, r1
 80012f6:	601a      	str	r2, [r3, #0]
}
 80012f8:	2000      	movs	r0, #0
 80012fa:	bd10      	pop	{r4, pc}

080012fc <HAL_TIM_PWM_Start>:
 80012fc:	b510      	push	{r4, lr}
 80012fe:	f7ff ffeb 	bl	80012d8 <HAL_TIM_IC_Start>
 8001302:	bd10      	pop	{r4, pc}

08001304 <HAL_TIM_PWM_ConfigChannel>:
{
 8001304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8001306:	0005      	movs	r5, r0
 8001308:	2302      	movs	r3, #2
 800130a:	3538      	adds	r5, #56	; 0x38
{
 800130c:	000c      	movs	r4, r1
  __HAL_LOCK(htim);
 800130e:	7829      	ldrb	r1, [r5, #0]
{
 8001310:	0007      	movs	r7, r0
  __HAL_LOCK(htim);
 8001312:	0018      	movs	r0, r3
 8001314:	2901      	cmp	r1, #1
 8001316:	d025      	beq.n	8001364 <HAL_TIM_PWM_ConfigChannel+0x60>
  htim->State = HAL_TIM_STATE_BUSY;
 8001318:	003e      	movs	r6, r7
  __HAL_LOCK(htim);
 800131a:	2101      	movs	r1, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800131c:	3639      	adds	r6, #57	; 0x39
  __HAL_LOCK(htim);
 800131e:	7029      	strb	r1, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001320:	7033      	strb	r3, [r6, #0]
  switch (Channel)
 8001322:	2a0c      	cmp	r2, #12
 8001324:	d81a      	bhi.n	800135c <HAL_TIM_PWM_ConfigChannel+0x58>
 8001326:	0010      	movs	r0, r2
 8001328:	f7fe feee 	bl	8000108 <__gnu_thumb1_case_uqi>
 800132c:	18181807 	.word	0x18181807
 8001330:	1818181d 	.word	0x1818181d
 8001334:	1818182f 	.word	0x1818182f
 8001338:	52          	.byte	0x52
 8001339:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800133a:	0021      	movs	r1, r4
 800133c:	6838      	ldr	r0, [r7, #0]
 800133e:	f7ff ff43 	bl	80011c8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001342:	2208      	movs	r2, #8
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	6999      	ldr	r1, [r3, #24]
 8001348:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800134a:	2104      	movs	r1, #4
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800134c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800134e:	699a      	ldr	r2, [r3, #24]
 8001350:	438a      	bics	r2, r1
 8001352:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001354:	699a      	ldr	r2, [r3, #24]
 8001356:	68e1      	ldr	r1, [r4, #12]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001358:	430a      	orrs	r2, r1
 800135a:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 800135c:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800135e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001360:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(htim);
 8001362:	7028      	strb	r0, [r5, #0]
}
 8001364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001366:	0021      	movs	r1, r4
 8001368:	6838      	ldr	r0, [r7, #0]
 800136a:	f7ff ff43 	bl	80011f4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800136e:	2280      	movs	r2, #128	; 0x80
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	0112      	lsls	r2, r2, #4
 8001374:	6999      	ldr	r1, [r3, #24]
 8001376:	430a      	orrs	r2, r1
 8001378:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800137a:	699a      	ldr	r2, [r3, #24]
 800137c:	4926      	ldr	r1, [pc, #152]	; (8001418 <HAL_TIM_PWM_ConfigChannel+0x114>)
 800137e:	400a      	ands	r2, r1
 8001380:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001382:	68e2      	ldr	r2, [r4, #12]
 8001384:	6999      	ldr	r1, [r3, #24]
 8001386:	0212      	lsls	r2, r2, #8
 8001388:	e7e6      	b.n	8001358 <HAL_TIM_PWM_ConfigChannel+0x54>
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800138a:	2073      	movs	r0, #115	; 0x73
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800138c:	683b      	ldr	r3, [r7, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800138e:	4923      	ldr	r1, [pc, #140]	; (800141c <HAL_TIM_PWM_ConfigChannel+0x118>)
 8001390:	6a1a      	ldr	r2, [r3, #32]
 8001392:	400a      	ands	r2, r1
 8001394:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8001396:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8001398:	685f      	ldr	r7, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 800139a:	69d9      	ldr	r1, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800139c:	4381      	bics	r1, r0
  tmpccmrx |= OC_Config->OCMode;
 800139e:	6820      	ldr	r0, [r4, #0]
 80013a0:	4301      	orrs	r1, r0
  tmpccer &= ~TIM_CCER_CC3P;
 80013a2:	481f      	ldr	r0, [pc, #124]	; (8001420 <HAL_TIM_PWM_ConfigChannel+0x11c>)
 80013a4:	4010      	ands	r0, r2
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80013a6:	68a2      	ldr	r2, [r4, #8]
  TIMx->CR2 = tmpcr2;
 80013a8:	605f      	str	r7, [r3, #4]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80013aa:	0212      	lsls	r2, r2, #8
  TIMx->CCMR2 = tmpccmrx;
 80013ac:	61d9      	str	r1, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80013ae:	6861      	ldr	r1, [r4, #4]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80013b0:	4302      	orrs	r2, r0
  TIMx->CCR3 = OC_Config->Pulse;
 80013b2:	63d9      	str	r1, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 80013b4:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80013b6:	2208      	movs	r2, #8
 80013b8:	69d9      	ldr	r1, [r3, #28]
 80013ba:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80013bc:	2104      	movs	r1, #4
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80013be:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80013c0:	69da      	ldr	r2, [r3, #28]
 80013c2:	438a      	bics	r2, r1
 80013c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80013c6:	69da      	ldr	r2, [r3, #28]
 80013c8:	68e1      	ldr	r1, [r4, #12]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80013ca:	430a      	orrs	r2, r1
 80013cc:	61da      	str	r2, [r3, #28]
      break;
 80013ce:	e7c5      	b.n	800135c <HAL_TIM_PWM_ConfigChannel+0x58>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80013d0:	683b      	ldr	r3, [r7, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80013d2:	4914      	ldr	r1, [pc, #80]	; (8001424 <HAL_TIM_PWM_ConfigChannel+0x120>)
 80013d4:	6a1a      	ldr	r2, [r3, #32]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80013d6:	4814      	ldr	r0, [pc, #80]	; (8001428 <HAL_TIM_PWM_ConfigChannel+0x124>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80013d8:	400a      	ands	r2, r1
 80013da:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 80013dc:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80013de:	685f      	ldr	r7, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 80013e0:	69d9      	ldr	r1, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80013e2:	4001      	ands	r1, r0
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80013e4:	6820      	ldr	r0, [r4, #0]
 80013e6:	0200      	lsls	r0, r0, #8
 80013e8:	4301      	orrs	r1, r0
  tmpccer &= ~TIM_CCER_CC4P;
 80013ea:	4810      	ldr	r0, [pc, #64]	; (800142c <HAL_TIM_PWM_ConfigChannel+0x128>)
 80013ec:	4010      	ands	r0, r2
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80013ee:	68a2      	ldr	r2, [r4, #8]
  TIMx->CR2 = tmpcr2;
 80013f0:	605f      	str	r7, [r3, #4]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80013f2:	0312      	lsls	r2, r2, #12
  TIMx->CCMR2 = tmpccmrx;
 80013f4:	61d9      	str	r1, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 80013f6:	6861      	ldr	r1, [r4, #4]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80013f8:	4302      	orrs	r2, r0
  TIMx->CCR4 = OC_Config->Pulse;
 80013fa:	6419      	str	r1, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 80013fc:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80013fe:	2280      	movs	r2, #128	; 0x80
 8001400:	69d9      	ldr	r1, [r3, #28]
 8001402:	0112      	lsls	r2, r2, #4
 8001404:	430a      	orrs	r2, r1
 8001406:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001408:	69da      	ldr	r2, [r3, #28]
 800140a:	4903      	ldr	r1, [pc, #12]	; (8001418 <HAL_TIM_PWM_ConfigChannel+0x114>)
 800140c:	400a      	ands	r2, r1
 800140e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001410:	68e2      	ldr	r2, [r4, #12]
 8001412:	69d9      	ldr	r1, [r3, #28]
 8001414:	0212      	lsls	r2, r2, #8
 8001416:	e7d8      	b.n	80013ca <HAL_TIM_PWM_ConfigChannel+0xc6>
 8001418:	fffffbff 	.word	0xfffffbff
 800141c:	fffffeff 	.word	0xfffffeff
 8001420:	fffffdff 	.word	0xfffffdff
 8001424:	ffffefff 	.word	0xffffefff
 8001428:	ffff8cff 	.word	0xffff8cff
 800142c:	ffffdfff 	.word	0xffffdfff

08001430 <HAL_TIM_ConfigClockSource>:
{
 8001430:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8001432:	0004      	movs	r4, r0
 8001434:	2202      	movs	r2, #2
 8001436:	3438      	adds	r4, #56	; 0x38
 8001438:	7825      	ldrb	r5, [r4, #0]
{
 800143a:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 800143c:	0010      	movs	r0, r2
 800143e:	2d01      	cmp	r5, #1
 8001440:	d017      	beq.n	8001472 <HAL_TIM_ConfigClockSource+0x42>
  htim->State = HAL_TIM_STATE_BUSY;
 8001442:	001d      	movs	r5, r3
  __HAL_LOCK(htim);
 8001444:	2701      	movs	r7, #1
  tmpsmcr = htim->Instance->SMCR;
 8001446:	681b      	ldr	r3, [r3, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001448:	3539      	adds	r5, #57	; 0x39
  __HAL_LOCK(htim);
 800144a:	7027      	strb	r7, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800144c:	702a      	strb	r2, [r5, #0]
  tmpsmcr = htim->Instance->SMCR;
 800144e:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001450:	4845      	ldr	r0, [pc, #276]	; (8001568 <HAL_TIM_ConfigClockSource+0x138>)
 8001452:	4002      	ands	r2, r0
  htim->Instance->SMCR = tmpsmcr;
 8001454:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8001456:	680a      	ldr	r2, [r1, #0]
 8001458:	2a40      	cmp	r2, #64	; 0x40
 800145a:	d100      	bne.n	800145e <HAL_TIM_ConfigClockSource+0x2e>
 800145c:	e06d      	b.n	800153a <HAL_TIM_ConfigClockSource+0x10a>
 800145e:	d814      	bhi.n	800148a <HAL_TIM_ConfigClockSource+0x5a>
 8001460:	2a10      	cmp	r2, #16
 8001462:	d00b      	beq.n	800147c <HAL_TIM_ConfigClockSource+0x4c>
 8001464:	d806      	bhi.n	8001474 <HAL_TIM_ConfigClockSource+0x44>
 8001466:	2a00      	cmp	r2, #0
 8001468:	d008      	beq.n	800147c <HAL_TIM_ConfigClockSource+0x4c>
  htim->State = HAL_TIM_STATE_READY;
 800146a:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800146c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800146e:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8001470:	7020      	strb	r0, [r4, #0]
}
 8001472:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 8001474:	2a20      	cmp	r2, #32
 8001476:	d001      	beq.n	800147c <HAL_TIM_ConfigClockSource+0x4c>
 8001478:	2a30      	cmp	r2, #48	; 0x30
 800147a:	d1f6      	bne.n	800146a <HAL_TIM_ConfigClockSource+0x3a>
  tmpsmcr &= ~TIM_SMCR_TS;
 800147c:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 800147e:	6898      	ldr	r0, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001480:	4388      	bics	r0, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001482:	3969      	subs	r1, #105	; 0x69
 8001484:	430a      	orrs	r2, r1
 8001486:	4302      	orrs	r2, r0
 8001488:	e03d      	b.n	8001506 <HAL_TIM_ConfigClockSource+0xd6>
  switch (sClockSourceConfig->ClockSource)
 800148a:	2a60      	cmp	r2, #96	; 0x60
 800148c:	d03d      	beq.n	800150a <HAL_TIM_ConfigClockSource+0xda>
 800148e:	d817      	bhi.n	80014c0 <HAL_TIM_ConfigClockSource+0x90>
 8001490:	2a50      	cmp	r2, #80	; 0x50
 8001492:	d1ea      	bne.n	800146a <HAL_TIM_ConfigClockSource+0x3a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001494:	6848      	ldr	r0, [r1, #4]
 8001496:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 8001498:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800149a:	6a1e      	ldr	r6, [r3, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800149c:	0112      	lsls	r2, r2, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800149e:	43be      	bics	r6, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80014a0:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80014a2:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80014a4:	699e      	ldr	r6, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80014a6:	43be      	bics	r6, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80014a8:	4332      	orrs	r2, r6
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80014aa:	260a      	movs	r6, #10
 80014ac:	43b1      	bics	r1, r6
  tmpccer |= TIM_ICPolarity;
 80014ae:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 80014b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80014b2:	6219      	str	r1, [r3, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 80014b4:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 80014b6:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80014b8:	438a      	bics	r2, r1
 80014ba:	0011      	movs	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80014bc:	2257      	movs	r2, #87	; 0x57
 80014be:	e021      	b.n	8001504 <HAL_TIM_ConfigClockSource+0xd4>
  switch (sClockSourceConfig->ClockSource)
 80014c0:	2a70      	cmp	r2, #112	; 0x70
 80014c2:	d012      	beq.n	80014ea <HAL_TIM_ConfigClockSource+0xba>
 80014c4:	2080      	movs	r0, #128	; 0x80
 80014c6:	0180      	lsls	r0, r0, #6
 80014c8:	4282      	cmp	r2, r0
 80014ca:	d1ce      	bne.n	800146a <HAL_TIM_ConfigClockSource+0x3a>
  tmpsmcr = TIMx->SMCR;
 80014cc:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80014ce:	4827      	ldr	r0, [pc, #156]	; (800156c <HAL_TIM_ConfigClockSource+0x13c>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80014d0:	684e      	ldr	r6, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80014d2:	4010      	ands	r0, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80014d4:	688a      	ldr	r2, [r1, #8]
 80014d6:	68c9      	ldr	r1, [r1, #12]
 80014d8:	4332      	orrs	r2, r6
 80014da:	0209      	lsls	r1, r1, #8
 80014dc:	430a      	orrs	r2, r1
 80014de:	4302      	orrs	r2, r0
  TIMx->SMCR = tmpsmcr;
 80014e0:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80014e2:	2280      	movs	r2, #128	; 0x80
 80014e4:	6899      	ldr	r1, [r3, #8]
 80014e6:	01d2      	lsls	r2, r2, #7
 80014e8:	e00c      	b.n	8001504 <HAL_TIM_ConfigClockSource+0xd4>
  tmpsmcr = TIMx->SMCR;
 80014ea:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80014ec:	481f      	ldr	r0, [pc, #124]	; (800156c <HAL_TIM_ConfigClockSource+0x13c>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80014ee:	684e      	ldr	r6, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80014f0:	4010      	ands	r0, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80014f2:	688a      	ldr	r2, [r1, #8]
 80014f4:	68c9      	ldr	r1, [r1, #12]
 80014f6:	4332      	orrs	r2, r6
 80014f8:	0209      	lsls	r1, r1, #8
 80014fa:	430a      	orrs	r2, r1
 80014fc:	4302      	orrs	r2, r0
  TIMx->SMCR = tmpsmcr;
 80014fe:	609a      	str	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001500:	2277      	movs	r2, #119	; 0x77
      tmpsmcr = htim->Instance->SMCR;
 8001502:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001504:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	e7af      	b.n	800146a <HAL_TIM_ConfigClockSource+0x3a>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800150a:	2610      	movs	r6, #16
 800150c:	6a18      	ldr	r0, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800150e:	684a      	ldr	r2, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001510:	43b0      	bics	r0, r6
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001512:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001514:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001516:	699e      	ldr	r6, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001518:	4f15      	ldr	r7, [pc, #84]	; (8001570 <HAL_TIM_ConfigClockSource+0x140>)
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800151a:	0309      	lsls	r1, r1, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800151c:	403e      	ands	r6, r7
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800151e:	4331      	orrs	r1, r6
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001520:	26a0      	movs	r6, #160	; 0xa0
  tmpccer = TIMx->CCER;
 8001522:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8001524:	6199      	str	r1, [r3, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001526:	2170      	movs	r1, #112	; 0x70
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001528:	43b0      	bics	r0, r6
  tmpccer |= (TIM_ICPolarity << 4U);
 800152a:	0112      	lsls	r2, r2, #4
 800152c:	4302      	orrs	r2, r0
  TIMx->CCER = tmpccer;
 800152e:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8001530:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001532:	438a      	bics	r2, r1
 8001534:	0011      	movs	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001536:	2267      	movs	r2, #103	; 0x67
 8001538:	e7e4      	b.n	8001504 <HAL_TIM_ConfigClockSource+0xd4>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800153a:	6848      	ldr	r0, [r1, #4]
 800153c:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 800153e:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001540:	6a1e      	ldr	r6, [r3, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001542:	0112      	lsls	r2, r2, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001544:	43be      	bics	r6, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001546:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001548:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800154a:	699e      	ldr	r6, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800154c:	43be      	bics	r6, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800154e:	4332      	orrs	r2, r6
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001550:	260a      	movs	r6, #10
 8001552:	43b1      	bics	r1, r6
  tmpccer |= TIM_ICPolarity;
 8001554:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8001556:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001558:	6219      	str	r1, [r3, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 800155a:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 800155c:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800155e:	438a      	bics	r2, r1
 8001560:	0011      	movs	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001562:	2247      	movs	r2, #71	; 0x47
 8001564:	e7ce      	b.n	8001504 <HAL_TIM_ConfigClockSource+0xd4>
 8001566:	46c0      	nop			; (mov r8, r8)
 8001568:	ffff0088 	.word	0xffff0088
 800156c:	ffff00ff 	.word	0xffff00ff
 8001570:	ffff0fff 	.word	0xffff0fff

08001574 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001574:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001576:	0004      	movs	r4, r0
 8001578:	3438      	adds	r4, #56	; 0x38
 800157a:	7822      	ldrb	r2, [r4, #0]
{
 800157c:	0003      	movs	r3, r0
 800157e:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 8001580:	2a01      	cmp	r2, #1
 8001582:	d013      	beq.n	80015ac <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001584:	001d      	movs	r5, r3

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001586:	2670      	movs	r6, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 8001588:	3539      	adds	r5, #57	; 0x39
 800158a:	7028      	strb	r0, [r5, #0]
  tmpcr2 = htim->Instance->CR2;
 800158c:	6818      	ldr	r0, [r3, #0]
 800158e:	6842      	ldr	r2, [r0, #4]
  tmpsmcr = htim->Instance->SMCR;
 8001590:	6883      	ldr	r3, [r0, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8001592:	43b2      	bics	r2, r6
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001594:	680e      	ldr	r6, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001596:	6849      	ldr	r1, [r1, #4]
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001598:	4332      	orrs	r2, r6
  tmpsmcr &= ~TIM_SMCR_MSM;
 800159a:	2680      	movs	r6, #128	; 0x80
 800159c:	43b3      	bics	r3, r6
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800159e:	430b      	orrs	r3, r1

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80015a0:	6042      	str	r2, [r0, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80015a2:	6083      	str	r3, [r0, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80015a4:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 80015a6:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80015a8:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 80015aa:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 80015ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080015b0 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80015b0:	b513      	push	{r0, r1, r4, lr}
  ADC_ChannelConfTypeDef sConfig = {0};
 80015b2:	2208      	movs	r2, #8
 80015b4:	2100      	movs	r1, #0
 80015b6:	4668      	mov	r0, sp
 80015b8:	f000 fb94 	bl	8001ce4 <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
  hadc.Init.OversamplingMode = DISABLE;
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80015bc:	2280      	movs	r2, #128	; 0x80
  hadc.Instance = ADC1;
 80015be:	4c19      	ldr	r4, [pc, #100]	; (8001624 <MX_ADC_Init+0x74>)
 80015c0:	4b19      	ldr	r3, [pc, #100]	; (8001628 <MX_ADC_Init+0x78>)
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80015c2:	05d2      	lsls	r2, r2, #23
 80015c4:	6062      	str	r2, [r4, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80015c6:	2201      	movs	r2, #1
  hadc.Instance = ADC1;
 80015c8:	6023      	str	r3, [r4, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80015ca:	2300      	movs	r3, #0
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80015cc:	6122      	str	r2, [r4, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc.Init.ContinuousConvMode = DISABLE;
 80015ce:	18a2      	adds	r2, r4, r2
 80015d0:	77d3      	strb	r3, [r2, #31]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80015d2:	1ca2      	adds	r2, r4, #2
 80015d4:	77d3      	strb	r3, [r2, #31]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015d6:	22c2      	movs	r2, #194	; 0xc2
 80015d8:	32ff      	adds	r2, #255	; 0xff
 80015da:	6262      	str	r2, [r4, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 80015dc:	0022      	movs	r2, r4
 80015de:	322c      	adds	r2, #44	; 0x2c
 80015e0:	7013      	strb	r3, [r2, #0]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015e2:	2204      	movs	r2, #4
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc.Init.LowPowerAutoWait = DISABLE;
  hadc.Init.LowPowerFrequencyMode = DISABLE;
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80015e4:	0020      	movs	r0, r4
  hadc.Init.OversamplingMode = DISABLE;
 80015e6:	63e3      	str	r3, [r4, #60]	; 0x3c
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80015e8:	60a3      	str	r3, [r4, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80015ea:	63a3      	str	r3, [r4, #56]	; 0x38
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015ec:	60e3      	str	r3, [r4, #12]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015ee:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015f0:	6162      	str	r2, [r4, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80015f2:	6323      	str	r3, [r4, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80015f4:	61a3      	str	r3, [r4, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 80015f6:	6363      	str	r3, [r4, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80015f8:	61e3      	str	r3, [r4, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80015fa:	f7fe ffaf 	bl	800055c <HAL_ADC_Init>
 80015fe:	2800      	cmp	r0, #0
 8001600:	d001      	beq.n	8001606 <MX_ADC_Init+0x56>
  {
    Error_Handler();
 8001602:	f000 f9e3 	bl	80019cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001606:	4b09      	ldr	r3, [pc, #36]	; (800162c <MX_ADC_Init+0x7c>)
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001608:	4669      	mov	r1, sp
  sConfig.Channel = ADC_CHANNEL_4;
 800160a:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800160c:	2380      	movs	r3, #128	; 0x80
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800160e:	0020      	movs	r0, r4
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001610:	015b      	lsls	r3, r3, #5
 8001612:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001614:	f7ff f908 	bl	8000828 <HAL_ADC_ConfigChannel>
 8001618:	2800      	cmp	r0, #0
 800161a:	d001      	beq.n	8001620 <MX_ADC_Init+0x70>
  {
    Error_Handler();
 800161c:	f000 f9d6 	bl	80019cc <Error_Handler>
  }

}
 8001620:	bd13      	pop	{r0, r1, r4, pc}
 8001622:	46c0      	nop			; (mov r8, r8)
 8001624:	20000030 	.word	0x20000030
 8001628:	40012400 	.word	0x40012400
 800162c:	10000010 	.word	0x10000010

08001630 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001630:	b510      	push	{r4, lr}
 8001632:	0004      	movs	r4, r0
 8001634:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001636:	2214      	movs	r2, #20
 8001638:	2100      	movs	r1, #0
 800163a:	a801      	add	r0, sp, #4
 800163c:	f000 fb52 	bl	8001ce4 <memset>
  if(adcHandle->Instance==ADC1)
 8001640:	4b0e      	ldr	r3, [pc, #56]	; (800167c <HAL_ADC_MspInit+0x4c>)
 8001642:	6822      	ldr	r2, [r4, #0]
 8001644:	429a      	cmp	r2, r3
 8001646:	d116      	bne.n	8001676 <HAL_ADC_MspInit+0x46>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001648:	2280      	movs	r2, #128	; 0x80
 800164a:	4b0d      	ldr	r3, [pc, #52]	; (8001680 <HAL_ADC_MspInit+0x50>)
 800164c:	0092      	lsls	r2, r2, #2
 800164e:	6b59      	ldr	r1, [r3, #52]	; 0x34
    PA4     ------> ADC_IN4 
    */
    GPIO_InitStruct.Pin = Brightness_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(Brightness_GPIO_Port, &GPIO_InitStruct);
 8001650:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001652:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001654:	2101      	movs	r1, #1
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001656:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(Brightness_GPIO_Port, &GPIO_InitStruct);
 800165a:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800165c:	430a      	orrs	r2, r1
 800165e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001662:	400b      	ands	r3, r1
 8001664:	9300      	str	r3, [sp, #0]
 8001666:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = Brightness_Pin;
 8001668:	2310      	movs	r3, #16
    HAL_GPIO_Init(Brightness_GPIO_Port, &GPIO_InitStruct);
 800166a:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = Brightness_Pin;
 800166c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800166e:	3b0d      	subs	r3, #13
 8001670:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(Brightness_GPIO_Port, &GPIO_InitStruct);
 8001672:	f7ff f981 	bl	8000978 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001676:	b006      	add	sp, #24
 8001678:	bd10      	pop	{r4, pc}
 800167a:	46c0      	nop			; (mov r8, r8)
 800167c:	40012400 	.word	0x40012400
 8001680:	40021000 	.word	0x40021000

08001684 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001684:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001686:	2601      	movs	r6, #1

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TX_GPIO_Port, TX_Pin, GPIO_PIN_RESET);
 8001688:	2780      	movs	r7, #128	; 0x80
 800168a:	25a0      	movs	r5, #160	; 0xa0
{
 800168c:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168e:	2214      	movs	r2, #20
 8001690:	2100      	movs	r1, #0
 8001692:	a801      	add	r0, sp, #4
 8001694:	f000 fb26 	bl	8001ce4 <memset>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001698:	4b15      	ldr	r3, [pc, #84]	; (80016f0 <MX_GPIO_Init+0x6c>)
  HAL_GPIO_WritePin(TX_GPIO_Port, TX_Pin, GPIO_PIN_RESET);
 800169a:	05ed      	lsls	r5, r5, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800169c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(TX_GPIO_Port, TX_Pin, GPIO_PIN_RESET);
 800169e:	00bf      	lsls	r7, r7, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a0:	4332      	orrs	r2, r6
 80016a2:	62da      	str	r2, [r3, #44]	; 0x2c
 80016a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(TX_GPIO_Port, TX_Pin, GPIO_PIN_RESET);
 80016a6:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a8:	4033      	ands	r3, r6
 80016aa:	9300      	str	r3, [sp, #0]
  HAL_GPIO_WritePin(TX_GPIO_Port, TX_Pin, GPIO_PIN_RESET);
 80016ac:	0039      	movs	r1, r7
 80016ae:	0028      	movs	r0, r5
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b0:	9b00      	ldr	r3, [sp, #0]
  HAL_GPIO_WritePin(TX_GPIO_Port, TX_Pin, GPIO_PIN_RESET);
 80016b2:	f7ff fa0b 	bl	8000acc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
 80016b6:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b8:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = Button_Pin;
 80016ba:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016bc:	4b0d      	ldr	r3, [pc, #52]	; (80016f4 <MX_GPIO_Init+0x70>)
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 80016be:	a901      	add	r1, sp, #4
 80016c0:	0028      	movs	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016c2:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c4:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 80016c6:	f7ff f957 	bl	8000978 <HAL_GPIO_Init>
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(TX_GPIO_Port, &GPIO_InitStruct);
 80016ca:	a901      	add	r1, sp, #4
 80016cc:	0028      	movs	r0, r5
  GPIO_InitStruct.Pin = TX_Pin;
 80016ce:	9701      	str	r7, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d0:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d2:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d4:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(TX_GPIO_Port, &GPIO_InitStruct);
 80016d6:	f7ff f94f 	bl	8000978 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80016da:	0022      	movs	r2, r4
 80016dc:	0021      	movs	r1, r4
 80016de:	2007      	movs	r0, #7
 80016e0:	f7ff f8f6 	bl	80008d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80016e4:	2007      	movs	r0, #7
 80016e6:	f7ff f923 	bl	8000930 <HAL_NVIC_EnableIRQ>

}
 80016ea:	b007      	add	sp, #28
 80016ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016ee:	46c0      	nop			; (mov r8, r8)
 80016f0:	40021000 	.word	0x40021000
 80016f4:	10210000 	.word	0x10210000

080016f8 <delay_us>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void delay_us (uint16_t us)
{
	__HAL_TIM_SET_COUNTER(&htim21,0);
 80016f8:	2200      	movs	r2, #0
 80016fa:	4b03      	ldr	r3, [pc, #12]	; (8001708 <delay_us+0x10>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim21) < us);
 8001700:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001702:	4282      	cmp	r2, r0
 8001704:	d3fc      	bcc.n	8001700 <delay_us+0x8>
}
 8001706:	4770      	bx	lr
 8001708:	200000c8 	.word	0x200000c8

0800170c <burst>:

void burst(uint8_t cycle_count)
{
 800170c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for(int i = 0; i < cycle_count ; i++ ){
		HAL_GPIO_WritePin(TX_GPIO_Port, TX_Pin, GPIO_PIN_SET);
 800170e:	2580      	movs	r5, #128	; 0x80
 8001710:	26a0      	movs	r6, #160	; 0xa0
{
 8001712:	0007      	movs	r7, r0
	for(int i = 0; i < cycle_count ; i++ ){
 8001714:	2400      	movs	r4, #0
		HAL_GPIO_WritePin(TX_GPIO_Port, TX_Pin, GPIO_PIN_SET);
 8001716:	00ad      	lsls	r5, r5, #2
 8001718:	05f6      	lsls	r6, r6, #23
	for(int i = 0; i < cycle_count ; i++ ){
 800171a:	42bc      	cmp	r4, r7
 800171c:	db00      	blt.n	8001720 <burst+0x14>
		delay_us(13);
		HAL_GPIO_WritePin(TX_GPIO_Port, TX_Pin, GPIO_PIN_RESET);
		delay_us(13);
	}
}
 800171e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		HAL_GPIO_WritePin(TX_GPIO_Port, TX_Pin, GPIO_PIN_SET);
 8001720:	2201      	movs	r2, #1
 8001722:	0029      	movs	r1, r5
 8001724:	0030      	movs	r0, r6
 8001726:	f7ff f9d1 	bl	8000acc <HAL_GPIO_WritePin>
		delay_us(13);
 800172a:	200d      	movs	r0, #13
 800172c:	f7ff ffe4 	bl	80016f8 <delay_us>
		HAL_GPIO_WritePin(TX_GPIO_Port, TX_Pin, GPIO_PIN_RESET);
 8001730:	2200      	movs	r2, #0
 8001732:	0029      	movs	r1, r5
 8001734:	0030      	movs	r0, r6
 8001736:	f7ff f9c9 	bl	8000acc <HAL_GPIO_WritePin>
		delay_us(13);
 800173a:	200d      	movs	r0, #13
 800173c:	f7ff ffdc 	bl	80016f8 <delay_us>
	for(int i = 0; i < cycle_count ; i++ ){
 8001740:	3401      	adds	r4, #1
 8001742:	e7ea      	b.n	800171a <burst+0xe>

08001744 <send_symbol>:

void send_symbol(uint8_t bit_count, uint8_t cycle_count){
 8001744:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001746:	0006      	movs	r6, r0
	for(int i = 0; i < bit_count; i++){
		if(i%2) delay_us((26 * 6 * cycle_count) / 5);
		else burst((6 * cycle_count) / 7);
 8001748:	2006      	movs	r0, #6
void send_symbol(uint8_t bit_count, uint8_t cycle_count){
 800174a:	000c      	movs	r4, r1
		else burst((6 * cycle_count) / 7);
 800174c:	4348      	muls	r0, r1
 800174e:	2107      	movs	r1, #7
 8001750:	f7fe fd6e 	bl	8000230 <__divsi3>
 8001754:	b2c3      	uxtb	r3, r0
		if(i%2) delay_us((26 * 6 * cycle_count) / 5);
 8001756:	209c      	movs	r0, #156	; 0x9c
 8001758:	2105      	movs	r1, #5
 800175a:	4360      	muls	r0, r4
		else burst((6 * cycle_count) / 7);
 800175c:	9301      	str	r3, [sp, #4]
		if(i%2) delay_us((26 * 6 * cycle_count) / 5);
 800175e:	f7fe fd67 	bl	8000230 <__divsi3>
	for(int i = 0; i < bit_count; i++){
 8001762:	2400      	movs	r4, #0
		if(i%2) delay_us((26 * 6 * cycle_count) / 5);
 8001764:	2701      	movs	r7, #1
 8001766:	b285      	uxth	r5, r0
	for(int i = 0; i < bit_count; i++){
 8001768:	42b4      	cmp	r4, r6
 800176a:	db00      	blt.n	800176e <send_symbol+0x2a>
	}
}
 800176c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		if(i%2) delay_us((26 * 6 * cycle_count) / 5);
 800176e:	423c      	tst	r4, r7
 8001770:	d004      	beq.n	800177c <send_symbol+0x38>
 8001772:	0028      	movs	r0, r5
 8001774:	f7ff ffc0 	bl	80016f8 <delay_us>
	for(int i = 0; i < bit_count; i++){
 8001778:	3401      	adds	r4, #1
 800177a:	e7f5      	b.n	8001768 <send_symbol+0x24>
		else burst((6 * cycle_count) / 7);
 800177c:	9801      	ldr	r0, [sp, #4]
 800177e:	f7ff ffc5 	bl	800170c <burst>
 8001782:	e7f9      	b.n	8001778 <send_symbol+0x34>

08001784 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001784:	b530      	push	{r4, r5, lr}
 8001786:	b093      	sub	sp, #76	; 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001788:	2234      	movs	r2, #52	; 0x34
 800178a:	2100      	movs	r1, #0
 800178c:	a805      	add	r0, sp, #20
 800178e:	f000 faa9 	bl	8001ce4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001792:	2214      	movs	r2, #20
 8001794:	2100      	movs	r1, #0
 8001796:	4668      	mov	r0, sp
 8001798:	f000 faa4 	bl	8001ce4 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800179c:	4913      	ldr	r1, [pc, #76]	; (80017ec <SystemClock_Config+0x68>)
 800179e:	4a14      	ldr	r2, [pc, #80]	; (80017f0 <SystemClock_Config+0x6c>)
 80017a0:	680b      	ldr	r3, [r1, #0]
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017a2:	2400      	movs	r4, #0
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017a4:	401a      	ands	r2, r3
 80017a6:	2380      	movs	r3, #128	; 0x80
 80017a8:	011b      	lsls	r3, r3, #4
 80017aa:	4313      	orrs	r3, r2
 80017ac:	600b      	str	r3, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017ae:	2302      	movs	r3, #2
 80017b0:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017b2:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80017b4:	2380      	movs	r3, #128	; 0x80
 80017b6:	02db      	lsls	r3, r3, #11
 80017b8:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80017ba:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017bc:	2210      	movs	r2, #16
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017be:	2501      	movs	r5, #1
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80017c0:	03db      	lsls	r3, r3, #15
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017c2:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017c4:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80017c6:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017c8:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017ca:	940f      	str	r4, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017cc:	f7ff f9cc 	bl	8000b68 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017d0:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80017d2:	0029      	movs	r1, r5
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017d4:	9300      	str	r3, [sp, #0]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80017d6:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017d8:	3b0c      	subs	r3, #12
 80017da:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017dc:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017de:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017e0:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80017e2:	f7ff fc13 	bl	800100c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 80017e6:	b013      	add	sp, #76	; 0x4c
 80017e8:	bd30      	pop	{r4, r5, pc}
 80017ea:	46c0      	nop			; (mov r8, r8)
 80017ec:	40007000 	.word	0x40007000
 80017f0:	ffffe7ff 	.word	0xffffe7ff

080017f4 <main>:
{
 80017f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017f6:	b087      	sub	sp, #28
  HAL_Init();
 80017f8:	f7fe fe2a 	bl	8000450 <HAL_Init>
  SystemClock_Config();
 80017fc:	f7ff ffc2 	bl	8001784 <SystemClock_Config>
  MX_GPIO_Init();
 8001800:	f7ff ff40 	bl	8001684 <MX_GPIO_Init>
  MX_ADC_Init();
 8001804:	f7ff fed4 	bl	80015b0 <MX_ADC_Init>
  MX_TIM2_Init();
 8001808:	f000 f9a4 	bl	8001b54 <MX_TIM2_Init>
  MX_TIM21_Init();
 800180c:	f000 f92a 	bl	8001a64 <MX_TIM21_Init>
  HAL_TIM_Base_Start(&htim21);
 8001810:	4864      	ldr	r0, [pc, #400]	; (80019a4 <main+0x1b0>)
 8001812:	f7ff fd33 	bl	800127c <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);// red
 8001816:	4c64      	ldr	r4, [pc, #400]	; (80019a8 <main+0x1b4>)
 8001818:	2100      	movs	r1, #0
 800181a:	0020      	movs	r0, r4
 800181c:	f7ff fd6e 	bl	80012fc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);// green
 8001820:	2104      	movs	r1, #4
 8001822:	0020      	movs	r0, r4
 8001824:	f7ff fd6a 	bl	80012fc <HAL_TIM_PWM_Start>
  uint16_t Green = 500;
 8001828:	26fa      	movs	r6, #250	; 0xfa
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);// blue
 800182a:	0020      	movs	r0, r4
  uint8_t state = 0;
 800182c:	2400      	movs	r4, #0
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);// blue
 800182e:	2108      	movs	r1, #8
  uint16_t Red = 999;
 8001830:	4f5e      	ldr	r7, [pc, #376]	; (80019ac <main+0x1b8>)
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);// blue
 8001832:	f7ff fd63 	bl	80012fc <HAL_TIM_PWM_Start>
  uint16_t Green = 500;
 8001836:	0076      	lsls	r6, r6, #1
  uint32_t Blue_Scaled = 0;
 8001838:	9403      	str	r4, [sp, #12]
  uint32_t Green_Scaled = 0;
 800183a:	9402      	str	r4, [sp, #8]
  uint32_t Red_Scaled = 0;
 800183c:	9401      	str	r4, [sp, #4]
  uint16_t Blue = 0;
 800183e:	9400      	str	r4, [sp, #0]
	  while(button){
 8001840:	4b5b      	ldr	r3, [pc, #364]	; (80019b0 <main+0x1bc>)
 8001842:	781d      	ldrb	r5, [r3, #0]
 8001844:	b2ed      	uxtb	r5, r5
 8001846:	2d00      	cmp	r5, #0
 8001848:	d133      	bne.n	80018b2 <main+0xbe>
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 100);
 800184a:	2264      	movs	r2, #100	; 0x64
 800184c:	4b56      	ldr	r3, [pc, #344]	; (80019a8 <main+0x1b4>)
	  send_symbol(10, 23);
 800184e:	2117      	movs	r1, #23
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 100);
 8001850:	681b      	ldr	r3, [r3, #0]
	  send_symbol(10, 23);
 8001852:	200a      	movs	r0, #10
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 100);
 8001854:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8001856:	639d      	str	r5, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 8001858:	63dd      	str	r5, [r3, #60]	; 0x3c
	  send_symbol(10, 23);
 800185a:	f7ff ff73 	bl	8001744 <send_symbol>
	  HAL_Delay(150);
 800185e:	2096      	movs	r0, #150	; 0x96
 8001860:	f7fe fe1c 	bl	800049c <HAL_Delay>
	  button = 1;
 8001864:	2301      	movs	r3, #1
 8001866:	4a52      	ldr	r2, [pc, #328]	; (80019b0 <main+0x1bc>)
	  				  button = 1;
 8001868:	9305      	str	r3, [sp, #20]
	  button = 1;
 800186a:	7013      	strb	r3, [r2, #0]
	  			  if(!button) {
 800186c:	4b50      	ldr	r3, [pc, #320]	; (80019b0 <main+0x1bc>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	b2db      	uxtb	r3, r3
 8001872:	9304      	str	r3, [sp, #16]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d10b      	bne.n	8001890 <main+0x9c>
	  				  send_symbol(10, 23);
 8001878:	2117      	movs	r1, #23
 800187a:	200a      	movs	r0, #10
 800187c:	f7ff ff62 	bl	8001744 <send_symbol>
	  				  HAL_Delay(150);
 8001880:	2096      	movs	r0, #150	; 0x96
 8001882:	f7fe fe0b 	bl	800049c <HAL_Delay>
	  				  button = 1;
 8001886:	466a      	mov	r2, sp
 8001888:	4b49      	ldr	r3, [pc, #292]	; (80019b0 <main+0x1bc>)
 800188a:	7d12      	ldrb	r2, [r2, #20]
	  				  i = 0;
 800188c:	9d04      	ldr	r5, [sp, #16]
	  				  button = 1;
 800188e:	701a      	strb	r2, [r3, #0]
	  			HAL_Delay(1);
 8001890:	9805      	ldr	r0, [sp, #20]
 8001892:	f7fe fe03 	bl	800049c <HAL_Delay>
	  for(int i=0 ;i<450 ;i++){
 8001896:	23c2      	movs	r3, #194	; 0xc2
 8001898:	3501      	adds	r5, #1
 800189a:	33ff      	adds	r3, #255	; 0xff
 800189c:	429d      	cmp	r5, r3
 800189e:	dde5      	ble.n	800186c <main+0x78>
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, Red_Scaled);
 80018a0:	4b41      	ldr	r3, [pc, #260]	; (80019a8 <main+0x1b4>)
 80018a2:	9a01      	ldr	r2, [sp, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, Green_Scaled);
 80018a8:	9a02      	ldr	r2, [sp, #8]
 80018aa:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, Blue_Scaled);
 80018ac:	9a03      	ldr	r2, [sp, #12]
 80018ae:	63da      	str	r2, [r3, #60]	; 0x3c
	  while(button){
 80018b0:	e7c6      	b.n	8001840 <main+0x4c>
		  if(Red == 999) state = 1;
 80018b2:	4b3e      	ldr	r3, [pc, #248]	; (80019ac <main+0x1b8>)
 80018b4:	429f      	cmp	r7, r3
 80018b6:	d00a      	beq.n	80018ce <main+0xda>
		  else if(Green == 999) state = 2;
 80018b8:	429e      	cmp	r6, r3
 80018ba:	d04c      	beq.n	8001956 <main+0x162>
		  else if(Blue == 999) state = 3;
 80018bc:	9b00      	ldr	r3, [sp, #0]
 80018be:	001a      	movs	r2, r3
 80018c0:	4b3a      	ldr	r3, [pc, #232]	; (80019ac <main+0x1b8>)
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d053      	beq.n	800196e <main+0x17a>
		  else if(Green == 0) state = 4;
 80018c6:	2e00      	cmp	r6, #0
 80018c8:	d05d      	beq.n	8001986 <main+0x192>
		  if(state == 1){
 80018ca:	2c01      	cmp	r4, #1
 80018cc:	d141      	bne.n	8001952 <main+0x15e>
 80018ce:	2401      	movs	r4, #1
			  Blue = Blue + 1;
 80018d0:	9b00      	ldr	r3, [sp, #0]
			  Red = Red - 1;
 80018d2:	3f01      	subs	r7, #1
			  Blue = Blue + 1;
 80018d4:	3301      	adds	r3, #1
			  Green = Green + 1;
 80018d6:	3601      	adds	r6, #1
			  Blue = Blue + 1;
 80018d8:	b29b      	uxth	r3, r3
			  Red = Red - 1;
 80018da:	b2bf      	uxth	r7, r7
			  Green = Green + 1;
 80018dc:	b2b6      	uxth	r6, r6
			  Blue = Blue + 1;
 80018de:	9300      	str	r3, [sp, #0]
		  HAL_ADC_Start(&hadc);
 80018e0:	4d34      	ldr	r5, [pc, #208]	; (80019b4 <main+0x1c0>)
 80018e2:	0028      	movs	r0, r5
 80018e4:	f7fe ff12 	bl	800070c <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc,1000);
 80018e8:	21fa      	movs	r1, #250	; 0xfa
 80018ea:	0028      	movs	r0, r5
 80018ec:	0089      	lsls	r1, r1, #2
 80018ee:	f7fe ff39 	bl	8000764 <HAL_ADC_PollForConversion>
		  power = HAL_ADC_GetValue(&hadc);
 80018f2:	0028      	movs	r0, r5
 80018f4:	f7fe ff94 	bl	8000820 <HAL_ADC_GetValue>
 80018f8:	b283      	uxth	r3, r0
		  if(power < 180){
 80018fa:	2bb3      	cmp	r3, #179	; 0xb3
 80018fc:	d94d      	bls.n	800199a <main+0x1a6>
		  else if((power > 200)){
 80018fe:	2bc8      	cmp	r3, #200	; 0xc8
 8001900:	d912      	bls.n	8001928 <main+0x134>
			  Red_Scaled = ( Red * power ) / 4095;
 8001902:	0018      	movs	r0, r3
 8001904:	492c      	ldr	r1, [pc, #176]	; (80019b8 <main+0x1c4>)
 8001906:	4378      	muls	r0, r7
 8001908:	001d      	movs	r5, r3
 800190a:	f7fe fc91 	bl	8000230 <__divsi3>
 800190e:	9001      	str	r0, [sp, #4]
			  Green_Scaled = ( Green * power ) / 4095;
 8001910:	0028      	movs	r0, r5
 8001912:	4929      	ldr	r1, [pc, #164]	; (80019b8 <main+0x1c4>)
 8001914:	4370      	muls	r0, r6
 8001916:	f7fe fc8b 	bl	8000230 <__divsi3>
 800191a:	9002      	str	r0, [sp, #8]
			  Blue_Scaled = ( Blue * power ) / 4095;
 800191c:	9800      	ldr	r0, [sp, #0]
 800191e:	4926      	ldr	r1, [pc, #152]	; (80019b8 <main+0x1c4>)
 8001920:	4368      	muls	r0, r5
 8001922:	f7fe fc85 	bl	8000230 <__divsi3>
 8001926:	9003      	str	r0, [sp, #12]
			  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, Blue_Scaled);
 8001928:	2514      	movs	r5, #20
			  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, Red_Scaled);
 800192a:	4b1f      	ldr	r3, [pc, #124]	; (80019a8 <main+0x1b4>)
 800192c:	9a01      	ldr	r2, [sp, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	635a      	str	r2, [r3, #52]	; 0x34
			  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, Green_Scaled);
 8001932:	9a02      	ldr	r2, [sp, #8]
 8001934:	639a      	str	r2, [r3, #56]	; 0x38
			  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, Blue_Scaled);
 8001936:	9a03      	ldr	r2, [sp, #12]
 8001938:	63da      	str	r2, [r3, #60]	; 0x3c
			  if(!button) break;
 800193a:	4b1d      	ldr	r3, [pc, #116]	; (80019b0 <main+0x1bc>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d100      	bne.n	8001944 <main+0x150>
 8001942:	e77d      	b.n	8001840 <main+0x4c>
			  HAL_Delay(1);
 8001944:	2001      	movs	r0, #1
 8001946:	3d01      	subs	r5, #1
 8001948:	f7fe fda8 	bl	800049c <HAL_Delay>
		  for(int i=0 ;i<20 ;i++){
 800194c:	2d00      	cmp	r5, #0
 800194e:	d1f4      	bne.n	800193a <main+0x146>
 8001950:	e776      	b.n	8001840 <main+0x4c>
		  else if(state == 2){
 8001952:	2c02      	cmp	r4, #2
 8001954:	d109      	bne.n	800196a <main+0x176>
			  Blue = Blue + 1;
 8001956:	9b00      	ldr	r3, [sp, #0]
			  Red = Red - 1;
 8001958:	3f01      	subs	r7, #1
			  Blue = Blue + 1;
 800195a:	3301      	adds	r3, #1
			  Green = Green - 1;
 800195c:	3e01      	subs	r6, #1
			  Blue = Blue + 1;
 800195e:	b29b      	uxth	r3, r3
			  Red = Red - 1;
 8001960:	b2bf      	uxth	r7, r7
			  Green = Green - 1;
 8001962:	b2b6      	uxth	r6, r6
			  Blue = Blue + 1;
 8001964:	9300      	str	r3, [sp, #0]
 8001966:	2402      	movs	r4, #2
 8001968:	e7ba      	b.n	80018e0 <main+0xec>
		  else if(state == 3){
 800196a:	2c03      	cmp	r4, #3
 800196c:	d109      	bne.n	8001982 <main+0x18e>
			  Blue = Blue - 1;
 800196e:	9b00      	ldr	r3, [sp, #0]
			  Red = Red + 1;
 8001970:	3701      	adds	r7, #1
			  Blue = Blue - 1;
 8001972:	3b01      	subs	r3, #1
			  Green = Green - 1;
 8001974:	3e01      	subs	r6, #1
			  Blue = Blue - 1;
 8001976:	b29b      	uxth	r3, r3
			  Red = Red + 1;
 8001978:	b2bf      	uxth	r7, r7
			  Green = Green - 1;
 800197a:	b2b6      	uxth	r6, r6
			  Blue = Blue - 1;
 800197c:	9300      	str	r3, [sp, #0]
 800197e:	2403      	movs	r4, #3
 8001980:	e7ae      	b.n	80018e0 <main+0xec>
		  else if(state == 4){
 8001982:	2c04      	cmp	r4, #4
 8001984:	d1ac      	bne.n	80018e0 <main+0xec>
			  Blue = Blue - 1;
 8001986:	9b00      	ldr	r3, [sp, #0]
			  Red = Red + 1;
 8001988:	3701      	adds	r7, #1
			  Blue = Blue - 1;
 800198a:	3b01      	subs	r3, #1
			  Green = Green + 1;
 800198c:	3601      	adds	r6, #1
			  Blue = Blue - 1;
 800198e:	b29b      	uxth	r3, r3
			  Red = Red + 1;
 8001990:	b2bf      	uxth	r7, r7
			  Green = Green + 1;
 8001992:	b2b6      	uxth	r6, r6
			  Blue = Blue - 1;
 8001994:	9300      	str	r3, [sp, #0]
 8001996:	2404      	movs	r4, #4
 8001998:	e7a2      	b.n	80018e0 <main+0xec>
			  Blue_Scaled = 0;
 800199a:	2300      	movs	r3, #0
 800199c:	9303      	str	r3, [sp, #12]
			  Green_Scaled = 0;
 800199e:	9302      	str	r3, [sp, #8]
			  Red_Scaled = 0;
 80019a0:	9301      	str	r3, [sp, #4]
 80019a2:	e7c1      	b.n	8001928 <main+0x134>
 80019a4:	200000c8 	.word	0x200000c8
 80019a8:	2000008c 	.word	0x2000008c
 80019ac:	000003e7 	.word	0x000003e7
 80019b0:	20000008 	.word	0x20000008
 80019b4:	20000030 	.word	0x20000030
 80019b8:	00000fff 	.word	0x00000fff

080019bc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){

	if(GPIO_Pin == Button_Pin){
 80019bc:	2820      	cmp	r0, #32
 80019be:	d102      	bne.n	80019c6 <HAL_GPIO_EXTI_Callback+0xa>
		button = 0;
 80019c0:	2200      	movs	r2, #0
 80019c2:	4b01      	ldr	r3, [pc, #4]	; (80019c8 <HAL_GPIO_EXTI_Callback+0xc>)
 80019c4:	701a      	strb	r2, [r3, #0]
	}
}
 80019c6:	4770      	bx	lr
 80019c8:	20000008 	.word	0x20000008

080019cc <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80019cc:	4770      	bx	lr
	...

080019d0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019d0:	2201      	movs	r2, #1
 80019d2:	4b05      	ldr	r3, [pc, #20]	; (80019e8 <HAL_MspInit+0x18>)
 80019d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80019d6:	430a      	orrs	r2, r1
 80019d8:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80019da:	2280      	movs	r2, #128	; 0x80
 80019dc:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80019de:	0552      	lsls	r2, r2, #21
 80019e0:	430a      	orrs	r2, r1
 80019e2:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019e4:	4770      	bx	lr
 80019e6:	46c0      	nop			; (mov r8, r8)
 80019e8:	40021000 	.word	0x40021000

080019ec <NMI_Handler>:
 80019ec:	4770      	bx	lr

080019ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019ee:	e7fe      	b.n	80019ee <HardFault_Handler>

080019f0 <SVC_Handler>:
 80019f0:	4770      	bx	lr

080019f2 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019f2:	4770      	bx	lr

080019f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019f4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019f6:	f7fe fd3f 	bl	8000478 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019fa:	bd10      	pop	{r4, pc}

080019fc <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80019fc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80019fe:	2020      	movs	r0, #32
 8001a00:	f7ff f86a 	bl	8000ad8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001a04:	bd10      	pop	{r4, pc}
	...

08001a08 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8001a08:	2280      	movs	r2, #128	; 0x80
 8001a0a:	4b10      	ldr	r3, [pc, #64]	; (8001a4c <SystemInit+0x44>)
 8001a0c:	0052      	lsls	r2, r2, #1
 8001a0e:	6819      	ldr	r1, [r3, #0]
 8001a10:	430a      	orrs	r2, r1
 8001a12:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8001a14:	68da      	ldr	r2, [r3, #12]
 8001a16:	490e      	ldr	r1, [pc, #56]	; (8001a50 <SystemInit+0x48>)
 8001a18:	400a      	ands	r2, r1
 8001a1a:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	490d      	ldr	r1, [pc, #52]	; (8001a54 <SystemInit+0x4c>)
 8001a20:	400a      	ands	r2, r1

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001a22:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8001a24:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001a26:	689a      	ldr	r2, [r3, #8]
 8001a28:	438a      	bics	r2, r1
 8001a2a:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	490a      	ldr	r1, [pc, #40]	; (8001a58 <SystemInit+0x50>)
 8001a30:	400a      	ands	r2, r1
 8001a32:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8001a34:	68da      	ldr	r2, [r3, #12]
 8001a36:	4909      	ldr	r1, [pc, #36]	; (8001a5c <SystemInit+0x54>)
 8001a38:	400a      	ands	r2, r1
 8001a3a:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a40:	2280      	movs	r2, #128	; 0x80
 8001a42:	4b07      	ldr	r3, [pc, #28]	; (8001a60 <SystemInit+0x58>)
 8001a44:	0512      	lsls	r2, r2, #20
 8001a46:	609a      	str	r2, [r3, #8]
#endif
}
 8001a48:	4770      	bx	lr
 8001a4a:	46c0      	nop			; (mov r8, r8)
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	88ff400c 	.word	0x88ff400c
 8001a54:	fef6fff6 	.word	0xfef6fff6
 8001a58:	fffbffff 	.word	0xfffbffff
 8001a5c:	ff02ffff 	.word	0xff02ffff
 8001a60:	e000ed00 	.word	0xe000ed00

08001a64 <MX_TIM21_Init>:
  HAL_TIM_MspPostInit(&htim2);

}
/* TIM21 init function */
void MX_TIM21_Init(void)
{
 8001a64:	b510      	push	{r4, lr}
 8001a66:	b086      	sub	sp, #24
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a68:	2210      	movs	r2, #16
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	a802      	add	r0, sp, #8
 8001a6e:	f000 f939 	bl	8001ce4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a72:	2208      	movs	r2, #8
 8001a74:	2100      	movs	r1, #0
 8001a76:	4668      	mov	r0, sp
 8001a78:	f000 f934 	bl	8001ce4 <memset>

  htim21.Instance = TIM21;
 8001a7c:	4c14      	ldr	r4, [pc, #80]	; (8001ad0 <MX_TIM21_Init+0x6c>)
 8001a7e:	4b15      	ldr	r3, [pc, #84]	; (8001ad4 <MX_TIM21_Init+0x70>)
  htim21.Init.Prescaler = 31;
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim21.Init.Period = 65535;
 8001a80:	4a15      	ldr	r2, [pc, #84]	; (8001ad8 <MX_TIM21_Init+0x74>)
  htim21.Instance = TIM21;
 8001a82:	6023      	str	r3, [r4, #0]
  htim21.Init.Prescaler = 31;
 8001a84:	231f      	movs	r3, #31
 8001a86:	6063      	str	r3, [r4, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a88:	2300      	movs	r3, #0
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8001a8a:	0020      	movs	r0, r4
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a8c:	60a3      	str	r3, [r4, #8]
  htim21.Init.Period = 65535;
 8001a8e:	60e2      	str	r2, [r4, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a90:	6123      	str	r3, [r4, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a92:	6163      	str	r3, [r4, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8001a94:	f7ff fbd7 	bl	8001246 <HAL_TIM_Base_Init>
 8001a98:	2800      	cmp	r0, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_TIM21_Init+0x3c>
  {
    Error_Handler();
 8001a9c:	f7ff ff96 	bl	80019cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001aa0:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8001aa2:	a902      	add	r1, sp, #8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001aa4:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8001aa6:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001aa8:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8001aaa:	f7ff fcc1 	bl	8001430 <HAL_TIM_ConfigClockSource>
 8001aae:	2800      	cmp	r0, #0
 8001ab0:	d001      	beq.n	8001ab6 <MX_TIM21_Init+0x52>
  {
    Error_Handler();
 8001ab2:	f7ff ff8b 	bl	80019cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ab6:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8001ab8:	4669      	mov	r1, sp
 8001aba:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001abc:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001abe:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8001ac0:	f7ff fd58 	bl	8001574 <HAL_TIMEx_MasterConfigSynchronization>
 8001ac4:	2800      	cmp	r0, #0
 8001ac6:	d001      	beq.n	8001acc <MX_TIM21_Init+0x68>
  {
    Error_Handler();
 8001ac8:	f7ff ff80 	bl	80019cc <Error_Handler>
  }

}
 8001acc:	b006      	add	sp, #24
 8001ace:	bd10      	pop	{r4, pc}
 8001ad0:	200000c8 	.word	0x200000c8
 8001ad4:	40010800 	.word	0x40010800
 8001ad8:	0000ffff 	.word	0x0000ffff

08001adc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM2)
 8001adc:	2280      	movs	r2, #128	; 0x80
 8001ade:	6803      	ldr	r3, [r0, #0]
 8001ae0:	05d2      	lsls	r2, r2, #23
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d105      	bne.n	8001af2 <HAL_TIM_Base_MspInit+0x16>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	4a06      	ldr	r2, [pc, #24]	; (8001b04 <HAL_TIM_Base_MspInit+0x28>)
 8001aea:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8001aec:	430b      	orrs	r3, r1
 8001aee:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_RCC_TIM21_CLK_ENABLE();
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }
}
 8001af0:	4770      	bx	lr
  else if(tim_baseHandle->Instance==TIM21)
 8001af2:	4a05      	ldr	r2, [pc, #20]	; (8001b08 <HAL_TIM_Base_MspInit+0x2c>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d1fb      	bne.n	8001af0 <HAL_TIM_Base_MspInit+0x14>
    __HAL_RCC_TIM21_CLK_ENABLE();
 8001af8:	2304      	movs	r3, #4
 8001afa:	4a02      	ldr	r2, [pc, #8]	; (8001b04 <HAL_TIM_Base_MspInit+0x28>)
 8001afc:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8001afe:	430b      	orrs	r3, r1
 8001b00:	6353      	str	r3, [r2, #52]	; 0x34
}
 8001b02:	e7f5      	b.n	8001af0 <HAL_TIM_Base_MspInit+0x14>
 8001b04:	40021000 	.word	0x40021000
 8001b08:	40010800 	.word	0x40010800

08001b0c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b0c:	b510      	push	{r4, lr}
 8001b0e:	0004      	movs	r4, r0
 8001b10:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b12:	2214      	movs	r2, #20
 8001b14:	2100      	movs	r1, #0
 8001b16:	a801      	add	r0, sp, #4
 8001b18:	f000 f8e4 	bl	8001ce4 <memset>
  if(timHandle->Instance==TIM2)
 8001b1c:	2380      	movs	r3, #128	; 0x80
 8001b1e:	6822      	ldr	r2, [r4, #0]
 8001b20:	05db      	lsls	r3, r3, #23
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d112      	bne.n	8001b4c <HAL_TIM_MspPostInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b26:	2001      	movs	r0, #1
 8001b28:	4a09      	ldr	r2, [pc, #36]	; (8001b50 <HAL_TIM_MspPostInit+0x44>)
 8001b2a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001b2c:	4301      	orrs	r1, r0
 8001b2e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8001b30:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    GPIO_InitStruct.Pin = Red_Pin|Green_Pin|Blue_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b32:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b34:	4003      	ands	r3, r0
 8001b36:	9300      	str	r3, [sp, #0]
 8001b38:	9b00      	ldr	r3, [sp, #0]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3a:	20a0      	movs	r0, #160	; 0xa0
    GPIO_InitStruct.Pin = Red_Pin|Green_Pin|Blue_Pin;
 8001b3c:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3e:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = Red_Pin|Green_Pin|Blue_Pin;
 8001b40:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b42:	3b05      	subs	r3, #5
 8001b44:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001b46:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b48:	f7fe ff16 	bl	8000978 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001b4c:	b006      	add	sp, #24
 8001b4e:	bd10      	pop	{r4, pc}
 8001b50:	40021000 	.word	0x40021000

08001b54 <MX_TIM2_Init>:
{
 8001b54:	b510      	push	{r4, lr}
 8001b56:	b08a      	sub	sp, #40	; 0x28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b58:	2210      	movs	r2, #16
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	a802      	add	r0, sp, #8
 8001b5e:	f000 f8c1 	bl	8001ce4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b62:	2208      	movs	r2, #8
 8001b64:	2100      	movs	r1, #0
 8001b66:	4668      	mov	r0, sp
 8001b68:	f000 f8bc 	bl	8001ce4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b6c:	2210      	movs	r2, #16
 8001b6e:	2100      	movs	r1, #0
 8001b70:	a806      	add	r0, sp, #24
 8001b72:	f000 f8b7 	bl	8001ce4 <memset>
  htim2.Instance = TIM2;
 8001b76:	2380      	movs	r3, #128	; 0x80
 8001b78:	4c29      	ldr	r4, [pc, #164]	; (8001c20 <MX_TIM2_Init+0xcc>)
 8001b7a:	05db      	lsls	r3, r3, #23
 8001b7c:	6023      	str	r3, [r4, #0]
  htim2.Init.Prescaler = 31;
 8001b7e:	231f      	movs	r3, #31
 8001b80:	6063      	str	r3, [r4, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b82:	2300      	movs	r3, #0
  htim2.Init.Period = 999;
 8001b84:	4a27      	ldr	r2, [pc, #156]	; (8001c24 <MX_TIM2_Init+0xd0>)
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b86:	0020      	movs	r0, r4
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b88:	60a3      	str	r3, [r4, #8]
  htim2.Init.Period = 999;
 8001b8a:	60e2      	str	r2, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b8c:	6123      	str	r3, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b8e:	6163      	str	r3, [r4, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b90:	f7ff fb59 	bl	8001246 <HAL_TIM_Base_Init>
 8001b94:	2800      	cmp	r0, #0
 8001b96:	d001      	beq.n	8001b9c <MX_TIM2_Init+0x48>
    Error_Handler();
 8001b98:	f7ff ff18 	bl	80019cc <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b9c:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b9e:	a902      	add	r1, sp, #8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ba0:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ba2:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ba4:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ba6:	f7ff fc43 	bl	8001430 <HAL_TIM_ConfigClockSource>
 8001baa:	2800      	cmp	r0, #0
 8001bac:	d001      	beq.n	8001bb2 <MX_TIM2_Init+0x5e>
    Error_Handler();
 8001bae:	f7ff ff0d 	bl	80019cc <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001bb2:	0020      	movs	r0, r4
 8001bb4:	f7ff fb75 	bl	80012a2 <HAL_TIM_PWM_Init>
 8001bb8:	2800      	cmp	r0, #0
 8001bba:	d001      	beq.n	8001bc0 <MX_TIM2_Init+0x6c>
    Error_Handler();
 8001bbc:	f7ff ff06 	bl	80019cc <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bc0:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bc2:	4669      	mov	r1, sp
 8001bc4:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bc6:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bc8:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bca:	f7ff fcd3 	bl	8001574 <HAL_TIMEx_MasterConfigSynchronization>
 8001bce:	2800      	cmp	r0, #0
 8001bd0:	d001      	beq.n	8001bd6 <MX_TIM2_Init+0x82>
    Error_Handler();
 8001bd2:	f7ff fefb 	bl	80019cc <Error_Handler>
  sConfigOC.Pulse = 0;
 8001bd6:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bd8:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bda:	a906      	add	r1, sp, #24
 8001bdc:	0020      	movs	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bde:	9306      	str	r3, [sp, #24]
  sConfigOC.Pulse = 0;
 8001be0:	9207      	str	r2, [sp, #28]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001be2:	9208      	str	r2, [sp, #32]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001be4:	9209      	str	r2, [sp, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001be6:	f7ff fb8d 	bl	8001304 <HAL_TIM_PWM_ConfigChannel>
 8001bea:	2800      	cmp	r0, #0
 8001bec:	d001      	beq.n	8001bf2 <MX_TIM2_Init+0x9e>
    Error_Handler();
 8001bee:	f7ff feed 	bl	80019cc <Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001bf2:	2204      	movs	r2, #4
 8001bf4:	a906      	add	r1, sp, #24
 8001bf6:	0020      	movs	r0, r4
 8001bf8:	f7ff fb84 	bl	8001304 <HAL_TIM_PWM_ConfigChannel>
 8001bfc:	2800      	cmp	r0, #0
 8001bfe:	d001      	beq.n	8001c04 <MX_TIM2_Init+0xb0>
    Error_Handler();
 8001c00:	f7ff fee4 	bl	80019cc <Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c04:	2208      	movs	r2, #8
 8001c06:	a906      	add	r1, sp, #24
 8001c08:	0020      	movs	r0, r4
 8001c0a:	f7ff fb7b 	bl	8001304 <HAL_TIM_PWM_ConfigChannel>
 8001c0e:	2800      	cmp	r0, #0
 8001c10:	d001      	beq.n	8001c16 <MX_TIM2_Init+0xc2>
    Error_Handler();
 8001c12:	f7ff fedb 	bl	80019cc <Error_Handler>
  HAL_TIM_MspPostInit(&htim2);
 8001c16:	0020      	movs	r0, r4
 8001c18:	f7ff ff78 	bl	8001b0c <HAL_TIM_MspPostInit>
}
 8001c1c:	b00a      	add	sp, #40	; 0x28
 8001c1e:	bd10      	pop	{r4, pc}
 8001c20:	2000008c 	.word	0x2000008c
 8001c24:	000003e7 	.word	0x000003e7

08001c28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001c28:	4813      	ldr	r0, [pc, #76]	; (8001c78 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001c2a:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8001c2c:	2004      	movs	r0, #4
    LDR R1, [R0]
 8001c2e:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001c30:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8001c32:	221f      	movs	r2, #31
    CMP R1, R2
 8001c34:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8001c36:	d105      	bne.n	8001c44 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8001c38:	4810      	ldr	r0, [pc, #64]	; (8001c7c <LoopForever+0x6>)
    LDR R1,=0x00000001
 8001c3a:	2101      	movs	r1, #1
    STR R1, [R0]
 8001c3c:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8001c3e:	4810      	ldr	r0, [pc, #64]	; (8001c80 <LoopForever+0xa>)
    LDR R1,=0x00000000
 8001c40:	2100      	movs	r1, #0
    STR R1, [R0]
 8001c42:	6001      	str	r1, [r0, #0]

08001c44 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8001c44:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001c46:	e003      	b.n	8001c50 <LoopCopyDataInit>

08001c48 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001c48:	4b0e      	ldr	r3, [pc, #56]	; (8001c84 <LoopForever+0xe>)
  ldr  r3, [r3, r1]
 8001c4a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001c4c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001c4e:	3104      	adds	r1, #4

08001c50 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8001c50:	480d      	ldr	r0, [pc, #52]	; (8001c88 <LoopForever+0x12>)
  ldr  r3, =_edata
 8001c52:	4b0e      	ldr	r3, [pc, #56]	; (8001c8c <LoopForever+0x16>)
  adds  r2, r0, r1
 8001c54:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001c56:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001c58:	d3f6      	bcc.n	8001c48 <CopyDataInit>
  ldr  r2, =_sbss
 8001c5a:	4a0d      	ldr	r2, [pc, #52]	; (8001c90 <LoopForever+0x1a>)
  b  LoopFillZerobss
 8001c5c:	e002      	b.n	8001c64 <LoopFillZerobss>

08001c5e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8001c5e:	2300      	movs	r3, #0
  str  r3, [r2]
 8001c60:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c62:	3204      	adds	r2, #4

08001c64 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8001c64:	4b0b      	ldr	r3, [pc, #44]	; (8001c94 <LoopForever+0x1e>)
  cmp  r2, r3
 8001c66:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001c68:	d3f9      	bcc.n	8001c5e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001c6a:	f7ff fecd 	bl	8001a08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c6e:	f000 f815 	bl	8001c9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c72:	f7ff fdbf 	bl	80017f4 <main>

08001c76 <LoopForever>:

LoopForever:
    b LoopForever
 8001c76:	e7fe      	b.n	8001c76 <LoopForever>
   ldr   r0, =_estack
 8001c78:	20000800 	.word	0x20000800
    LDR R0,=0x40021034
 8001c7c:	40021034 	.word	0x40021034
    LDR R0,=0x40010000
 8001c80:	40010000 	.word	0x40010000
  ldr  r3, =_sidata
 8001c84:	08001d30 	.word	0x08001d30
  ldr  r0, =_sdata
 8001c88:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001c8c:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8001c90:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8001c94:	20000104 	.word	0x20000104

08001c98 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c98:	e7fe      	b.n	8001c98 <ADC1_COMP_IRQHandler>
	...

08001c9c <__libc_init_array>:
 8001c9c:	b570      	push	{r4, r5, r6, lr}
 8001c9e:	2600      	movs	r6, #0
 8001ca0:	4d0c      	ldr	r5, [pc, #48]	; (8001cd4 <__libc_init_array+0x38>)
 8001ca2:	4c0d      	ldr	r4, [pc, #52]	; (8001cd8 <__libc_init_array+0x3c>)
 8001ca4:	1b64      	subs	r4, r4, r5
 8001ca6:	10a4      	asrs	r4, r4, #2
 8001ca8:	42a6      	cmp	r6, r4
 8001caa:	d109      	bne.n	8001cc0 <__libc_init_array+0x24>
 8001cac:	2600      	movs	r6, #0
 8001cae:	f000 f821 	bl	8001cf4 <_init>
 8001cb2:	4d0a      	ldr	r5, [pc, #40]	; (8001cdc <__libc_init_array+0x40>)
 8001cb4:	4c0a      	ldr	r4, [pc, #40]	; (8001ce0 <__libc_init_array+0x44>)
 8001cb6:	1b64      	subs	r4, r4, r5
 8001cb8:	10a4      	asrs	r4, r4, #2
 8001cba:	42a6      	cmp	r6, r4
 8001cbc:	d105      	bne.n	8001cca <__libc_init_array+0x2e>
 8001cbe:	bd70      	pop	{r4, r5, r6, pc}
 8001cc0:	00b3      	lsls	r3, r6, #2
 8001cc2:	58eb      	ldr	r3, [r5, r3]
 8001cc4:	4798      	blx	r3
 8001cc6:	3601      	adds	r6, #1
 8001cc8:	e7ee      	b.n	8001ca8 <__libc_init_array+0xc>
 8001cca:	00b3      	lsls	r3, r6, #2
 8001ccc:	58eb      	ldr	r3, [r5, r3]
 8001cce:	4798      	blx	r3
 8001cd0:	3601      	adds	r6, #1
 8001cd2:	e7f2      	b.n	8001cba <__libc_init_array+0x1e>
 8001cd4:	08001d28 	.word	0x08001d28
 8001cd8:	08001d28 	.word	0x08001d28
 8001cdc:	08001d28 	.word	0x08001d28
 8001ce0:	08001d2c 	.word	0x08001d2c

08001ce4 <memset>:
 8001ce4:	0003      	movs	r3, r0
 8001ce6:	1882      	adds	r2, r0, r2
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d100      	bne.n	8001cee <memset+0xa>
 8001cec:	4770      	bx	lr
 8001cee:	7019      	strb	r1, [r3, #0]
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	e7f9      	b.n	8001ce8 <memset+0x4>

08001cf4 <_init>:
 8001cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cf6:	46c0      	nop			; (mov r8, r8)
 8001cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cfa:	bc08      	pop	{r3}
 8001cfc:	469e      	mov	lr, r3
 8001cfe:	4770      	bx	lr

08001d00 <_fini>:
 8001d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d02:	46c0      	nop			; (mov r8, r8)
 8001d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d06:	bc08      	pop	{r3}
 8001d08:	469e      	mov	lr, r3
 8001d0a:	4770      	bx	lr
